[["index.html", "Research Methods Kapitel 1 Einleitung", " Research Methods 2020-10-11 Kapitel 1 Einleitung Das Modul Research Methods vermittelt vertiefte Methodenkompetenzen für praxisorientiertes und angewandtes wissenschaftliches Arbeiten im Fachbereich Umwelt und Natürliche Ressourcen auf MSc-Niveau. Die Studierenden erarbeiten sich vertiefte Methodenkompetenzen für die analytische Betrachtung der Zusammenhänge im Gesamtsystem Umwelt und Natürliche Ressourcen. Die Studierenden erlernen die methodischen Kompetenzen, auf denen die nachfolgenden Module im MSc Programm UNR aufbauen. Das Modul vermittelt einerseits allgemeine, fächerübergreifende methodische Kompetenzen (z.B. Wissenschaftstheorie, computer-gestützte Datenverar-beitung und Statistik). Auf dieser Plattform (RStudio Connect) werden die Unterlagen für die R-Übungsteile bereitgestellt. Es werden sukzessive sowohl Demo-Files, Aufgabenstellungen und Lösungen veröffentlicht. "],["2-prepro1-12-10-2020.html", "Kapitel 2 PrePro1 (12.10.2020)", " Kapitel 2 PrePro1 (12.10.2020) Die Datenkunde 2.0 gibt den Studierenden das Wissen und die Fertigkeiten an die Hand, selbst erhobene und bezogene Daten für Ihre eigenen Analysen vorzubereiten und anzureichern (preprocessing). Die Einheit vermittelt zentrale Datenverarbeitungskompetenzen und thematisiert bekannte Problemzonen der umweltwissenschaftlichen Datenverarbeitung  immer mit einer hands-on Perspektive auf die begleitenden R-Übungen. Die Studierenden lernen die Eigenschaften ihrer Datensätze in der Fachsprache korrekt zu beschreiben. Sie lernen ausserdem Metadaten zu verstehen und die Implikationen derselben für ihre eigenen Analyseprojekte kritisch zu beurteilen. Zentrale Konzepte der Lerneinheit sind Skalenniveaus, Datentypen, Zeitdaten und Typumwandlungen. "],["2-1-demo-datentypen-tabellen.html", "2.1 Demo: Datentypen, Tabellen", " 2.1 Demo: Datentypen, Tabellen R-Code als Download 2.1.1 Datentypen 2.1.1.1 Numerics Unter die Kategorie numeric fallen in R zwei Datentypen: double: Gleitkommazahl (z.B. 10.3, 7.3) integer: Ganzzahl (z.B. 10, 7) 2.1.1.1.1 Doubles Folgendermassen wird eine Gleitkommazahl einer Variabel zuweisen: x &lt;- 10.3 x ## [1] 10.3 typeof(x) ## [1] &quot;double&quot; Statt &lt;-kann auch = verwendet werden. Dies funktioniert aber nicht in allen Situationen, und ist zudem leicht mit == zu verwechseln. y = 7.3 y ## [1] 7.3 Ohne explizite Zuweisung nimmt R immer den Datentyp doublean: z &lt;- 42 typeof(z) ## [1] &quot;double&quot; is.integer(z) ## [1] FALSE is.numeric(z) ## [1] TRUE is.double(z) ## [1] TRUE 2.1.1.2 Ganzzahl / Integer Erst wenn man eine Zahl explizit als integer definiert (mit as.integer() oder L), wird sie auch als solches abgespeichert. a &lt;- as.integer(z) is.numeric(a) ## [1] TRUE is.integer(a) ## [1] TRUE c &lt;- 8L is.numeric(c) ## [1] TRUE is.integer(c) ## [1] TRUE typeof(a) ## [1] &quot;integer&quot; is.numeric(a) ## [1] TRUE is.integer(a) ## [1] TRUE Mit c() können eine Reihe von Werten in einer Variabel zugewiesen werden (als vector). Es gibt zudem auch character vectors. vector &lt;- c(10,20,33,42,54,66,77) vector ## [1] 10 20 33 42 54 66 77 vector[5] ## [1] 54 vector[2:4] ## [1] 20 33 42 vector2 &lt;- vector[2:4] Eine Ganzzahl kann explizit mit as.integer() definiert werden. a &lt;- as.integer(7) b &lt;- as.integer(3.14) a ## [1] 7 b ## [1] 3 typeof(a) ## [1] &quot;integer&quot; typeof(b) ## [1] &quot;integer&quot; is.integer(a) ## [1] TRUE is.integer(b) ## [1] TRUE Eine Zeichenkette kann als Zahl eingelesen werden. c &lt;- as.integer(&quot;3.14&quot;) c ## [1] 3 typeof(c) ## [1] &quot;integer&quot; 2.1.1.3 Logische Abfragen Wird auch auch als boolesch (Eng. boolean) bezeichnet. e &lt;- 3 f &lt;- 6 g &lt;- e &gt; f e ## [1] 3 f ## [1] 6 g ## [1] FALSE typeof(g) ## [1] &quot;logical&quot; 2.1.1.4 Logische Operationen sonnig &lt;- TRUE trocken &lt;- FALSE sonnig &amp; !trocken ## [1] TRUE Oft braucht man auch das Gegenteil / die Negation eines Wertes. Dies wird mittels ! erreicht u &lt;- TRUE v &lt;- !u v ## [1] FALSE 2.1.1.5 Zeichenketten Zeichenketten (Eng. character) stellen Text dar s &lt;- as.character(3.14) s ## [1] &quot;3.14&quot; typeof(s) ## [1] &quot;character&quot; Zeichenketten verbinden / zusammenfügen (Eng. concatenate) fname &lt;- &quot;Hans&quot; lname &lt;- &quot;Muster&quot; paste(fname,lname) ## [1] &quot;Hans Muster&quot; fname2 &lt;- &quot;hans&quot; fname == fname2 ## [1] FALSE 2.1.1.6 Factors Mit Factors wird in R eine Sammlung von Zeichenketten bezeichnet, die sich wiederholen, z.B. Wochentage (es gibt nur 7 unterschiedliche Werte für Wochentage). wochentage &lt;- c(&quot;Montag&quot;,&quot;Dienstag&quot;,&quot;Mittwoch&quot;,&quot;Donnerstag&quot;,&quot;Freitag&quot;,&quot;Samstag&quot;,&quot;Sonntag&quot;, &quot;Montag&quot;,&quot;Dienstag&quot;,&quot;Mittwoch&quot;,&quot;Donnerstag&quot;,&quot;Freitag&quot;,&quot;Samstag&quot;,&quot;Sonntag&quot;) typeof(wochentage) ## [1] &quot;character&quot; wochentage_fac &lt;- as.factor(wochentage) wochentage ## [1] &quot;Montag&quot; &quot;Dienstag&quot; &quot;Mittwoch&quot; &quot;Donnerstag&quot; &quot;Freitag&quot; ## [6] &quot;Samstag&quot; &quot;Sonntag&quot; &quot;Montag&quot; &quot;Dienstag&quot; &quot;Mittwoch&quot; ## [11] &quot;Donnerstag&quot; &quot;Freitag&quot; &quot;Samstag&quot; &quot;Sonntag&quot; wochentage_fac ## [1] Montag Dienstag Mittwoch Donnerstag Freitag Samstag ## [7] Sonntag Montag Dienstag Mittwoch Donnerstag Freitag ## [13] Samstag Sonntag ## Levels: Dienstag Donnerstag Freitag Mittwoch Montag Samstag Sonntag Wie man oben sieht, unterscheiden sich character vectors und factors v.a. dadurch, dass letztere über sogenannte levels verfügt. Diese levels entsprechen den Eindeutigen (unique) Werten. levels(wochentage_fac) ## [1] &quot;Dienstag&quot; &quot;Donnerstag&quot; &quot;Freitag&quot; &quot;Mittwoch&quot; &quot;Montag&quot; ## [6] &quot;Samstag&quot; &quot;Sonntag&quot; unique(wochentage) ## [1] &quot;Montag&quot; &quot;Dienstag&quot; &quot;Mittwoch&quot; &quot;Donnerstag&quot; &quot;Freitag&quot; ## [6] &quot;Samstag&quot; &quot;Sonntag&quot; 2.1.1.7 Zeit/Datum Um in R mit Datum/Zeit Datentypen umzugehen, müssen sie als POSIXct eingelesen werden (es gibt alternativ noch POSIXlt, aber diese ignorieren wir mal). Anders als Beispielsweise bei Excel, sollten in R Datum und Uhrzeit immer in einer Spalte gespeichert werden. datum &lt;- &quot;2017-10-01 13:45:10&quot; as.POSIXct(datum) ## [1] &quot;2017-10-01 13:45:10 CEST&quot; Wenn das die Zeichenkette in dem obigen Format (Jahr-Monat-Tag Stunde:Minute:Sekunde) daher kommt, braucht as.POSIXctkeine weiteren Informationen. Sollte das Format von dem aber Abweichen, muss man der Funktion das genaue Schema jedoch mitteilen. Der Syntax dafür kann via ?strptime nachgeschlagen werden. datum &lt;- &quot;01.10.2017 13:45&quot; as.POSIXct(datum,format = &quot;%d.%m.%Y %H:%M&quot;) ## [1] &quot;2017-10-01 13:45:00 CEST&quot; Beachtet, dass in den den obigen Beispiel R automatisch eine Zeitzone angenommen hat (CEST). R geht davon aus, dass die Zeitzone der System Timezone (Sys.timezone()) entspricht. 2.1.2 Data Frames und Conveniance Variabeln Eine data.frame ist die gängigste Art, Tabellarische Daten zu speichern. df &lt;- data.frame( Stadt = c(&quot;Zürich&quot;,&quot;Genf&quot;,&quot;Basel&quot;,&quot;Bern&quot;,&quot;Lausanne&quot;), Einwohner = c(396027,194565,175131,140634,135629), Ankunft = c(&quot;1.1.2017 10:00&quot;,&quot;1.1.2017 14:00&quot;, &quot;1.1.2017 13:00&quot;,&quot;1.1.2017 18:00&quot;,&quot;1.1.2017 21:00&quot;) ) str(df) ## &#39;data.frame&#39;: 5 obs. of 3 variables: ## $ Stadt : Factor w/ 5 levels &quot;Basel&quot;,&quot;Bern&quot;,..: 5 3 1 2 4 ## $ Einwohner: num 396027 194565 175131 140634 135629 ## $ Ankunft : Factor w/ 5 levels &quot;1.1.2017 10:00&quot;,..: 1 3 2 4 5 In der obigen data.frame wurde die Spalte Einwohner als Fliesskommazahl abgespeichert. Dies ist zwar nicht tragisch, aber da wir wissen das es sich hier sicher um Ganzzahlen handelt, können wir das korrigieren. Wichtiger ist aber, dass wir die Ankunftszeit (SpalteAnkunft) von einem Factor in ein Zeitformat (POSIXct) umwandeln. df$Einwohner &lt;- as.integer(df$Einwohner) df$Einwohner ## [1] 396027 194565 175131 140634 135629 df$Ankunft &lt;- as.POSIXct(df$Ankunft, format = &quot;%d.%m.%Y %H:%M&quot;) df$Ankunft ## [1] &quot;2017-01-01 10:00:00 CET&quot; &quot;2017-01-01 14:00:00 CET&quot; ## [3] &quot;2017-01-01 13:00:00 CET&quot; &quot;2017-01-01 18:00:00 CET&quot; ## [5] &quot;2017-01-01 21:00:00 CET&quot; Diese Rohdaten können nun helfen, um Hilfsvariablen (convenience variables) zu erstellen. Z.B. können wir die Städte einteilen in gross, mittel und klein. df$Groesse[df$Einwohner &gt; 300000] &lt;- &quot;gross&quot; df$Groesse[df$Einwohner &lt;= 300000 &amp; df$Einwohner &gt; 150000] &lt;- &quot;mittel&quot; df$Groesse[df$Einwohner &lt;= 150000] &lt;- &quot;klein&quot; Oder aber, die Ankunftszeit kann von der Spalte Ankunftabgeleitet werden. Dazu brauchen wir aber das Package lubridate library(lubridate) df$Ankunft_stunde &lt;- hour(df$Ankunft) 2.1.3 Quellen Dieses Kapitel verwendet folgende Libraries: Spinu, Grolemund, and Wickham (2018) References "],["2-2-übung-a.html", "2.2 Übung A", " 2.2 Übung A R ist ohne Zusatzpackete nicht mehr denkbar. Die allermeisten Packages werden auf CRAN gehostet und können leicht mittels install.packages() installiert werden. Eine sehr wichtige Sammlung von Packages wird von RStudio entwickelt. Unter dem Namen Tidyverse werden eine Reihe von Packages angeboten, den R-Alltag enorm erleichtert. Wir werden später näher auf das Tidy-Universum eingehen, an dieser Stelle können wir die Sammlung einfach mal installieren. install.packages(&quot;tidyverse&quot;) Um ein package in R verwenden zu können, gibt es zwei Möglichkeiten: entweder man lädt es zu Beginn der R-session mittles library(). oder man ruft eine function mit vorangestelltem Packetname sowie zwei Doppelpunkten auf. dplyr::filter() ruft die Funktion filter() des Packets dplyr auf. Letztere Notation ist vor allem dann sinnvoll, wenn sich zwei unterschiedliche Funktionen mit dem gleichen namen in verschiedenen pacakges existieren. filter() existiert als Funktion einersits im package dplyr sowie in stats. Dieses Phänomen nennt man masking. Zu beginn laden wir die nötigen Pakete: 2.2.1 Aufgabe 1 Erstelle eine data.frame mit nachstehenden Daten. Tipps: Eine leere data.frame zu erstellen ist schwieriger als wenn erstellen und befüllen der data.frame in einem Schritt erfolgt R ist dafür gedacht, Spalte für Spalte zu arbeiten (warum?), nicht Reihe für Reihe. Versuche dich an dieses Schema zu halten. Tierart Anzahl Gewicht Geschlecht Beschreibung Fuchs 2 4.4 m Rötlich Bär 5 40.3 f Braun, gross Hase 1 1.1 m klein, mit langen Ohren Elch 3 120.0 m Lange Beine, Schaufelgeweih 2.2.2 Aufgabe 2 Was für Datentypen wurden (in Aufgabe 1) von R automatisch angenommen? Sind diese sinnvoll? Tipp: Nutze dazu str() ## &#39;data.frame&#39;: 4 obs. of 5 variables: ## $ Tierart : Factor w/ 4 levels &quot;Bär&quot;,&quot;Elch&quot;,&quot;Fuchs&quot;,..: 3 1 4 2 ## $ Anzahl : num 2 5 1 3 ## $ Gewicht : num 4.4 40.3 1.1 120 ## $ Geschlecht : Factor w/ 2 levels &quot;f&quot;,&quot;m&quot;: 2 1 2 2 ## $ Beschreibung: Factor w/ 4 levels &quot;Braun, gross&quot;,..: 4 1 2 3 ## [1] &quot;double&quot; 2.2.3 Aufgabe 3 Nutze die Spalte Gewicht um die Tiere in 3 Gewichtskategorien einzuteilen: leicht: &lt; 5kg mittel: 5 - 100 kg schwer: &gt; 100kg Tierart Anzahl Gewicht Geschlecht Beschreibung Gewichtsklasse Fuchs 2 4.4 m Rötlich leicht Bär 5 40.3 f Braun, gross mittel Hase 1 1.1 m klein, mit langen Ohren leicht Elch 3 120.0 m Lange Beine, Schaufelgeweih schwer 2.2.4 Aufgabe 4 Importiere den Datensatz order_52252_data.txt. Es handelt sich dabei um die stündlich gemittelten Temperaturdaten an verschiedenen Standorten in der Schweiz im Zeitraum 2000 - 2005. Wir empfehlen read_table()1 anstelle von read.table(). stn time tre200h0 ABO 2000010100 -2.6 ABO 2000010101 -2.5 ABO 2000010102 -3.1 ABO 2000010103 -2.4 ABO 2000010104 -2.5 ABO 2000010105 -3.0 ABO 2000010106 -3.7 ABO 2000010107 -4.4 ABO 2000010108 -4.1 ABO 2000010109 -4.1 2.2.5 Aufgabe 5 Schau dir die Rückmeldung von read_table()an. Sind die Daten korrekt interpretiert worden? 2.2.6 Aufgabe 6 Die Spalte time ist eine Datum/Zeitangabe im Format JJJJMMTTHH (siehe meta.txt). Damit R dies als Datum-/Zeitangabe erkennt, müssen wir die Spalte in einem R-Format (POSIXct) einlesen und dabei R mitteilen, wie sie aktuell formatiert ist. Lies die Spalte mit as.POSIXct() (oder parse_datetime) ein und spezifiziere sowohl format wie auch tz. Tipps: Wenn keine Zeitzone festgelegt wird, trifft as.POSIXct() eine Annahme (basierend auf Sys.timezone()). In unserem Fall handelt es sich aber um Werte in UTC (siehe meta.txt) as.POSIXcterwartet character: Wenn du eine Fehlermeldung hast die 'origin' must be supplied (o.ä) heisst, hast du der Funktion vermutlich einen Numeric übergeben. ## [1] &quot;2000-01-01 00:00:00 UTC&quot; &quot;2000-01-01 01:00:00 UTC&quot; ## [3] &quot;2000-01-01 02:00:00 UTC&quot; &quot;2000-01-01 03:00:00 UTC&quot; ## [5] &quot;2000-01-01 04:00:00 UTC&quot; &quot;2000-01-01 05:00:00 UTC&quot; ## [7] &quot;2000-01-01 06:00:00 UTC&quot; &quot;2000-01-01 07:00:00 UTC&quot; ## [9] &quot;2000-01-01 08:00:00 UTC&quot; &quot;2000-01-01 09:00:00 UTC&quot; stn time tre200h0 ABO 2000-01-01 00:00:00 -2.6 ABO 2000-01-01 01:00:00 -2.5 ABO 2000-01-01 02:00:00 -3.1 ABO 2000-01-01 03:00:00 -2.4 ABO 2000-01-01 04:00:00 -2.5 ABO 2000-01-01 05:00:00 -3.0 ABO 2000-01-01 06:00:00 -3.7 ABO 2000-01-01 07:00:00 -4.4 ABO 2000-01-01 08:00:00 -4.1 ABO 2000-01-01 09:00:00 -4.1 2.2.7 Aufgabe 7 Erstelle zwei neue Spalten mit Wochentag (Montag, Dienstag, etc) und Kalenderwoche. Verwende dazu die neu erstellte POSIXct-Spalte stn time tre200h0 wochentag kw ABO 2000-01-01 00:00:00 -2.6 Sa. 1 ABO 2000-01-01 01:00:00 -2.5 Sa. 1 ABO 2000-01-01 02:00:00 -3.1 Sa. 1 ABO 2000-01-01 03:00:00 -2.4 Sa. 1 ABO 2000-01-01 04:00:00 -2.5 Sa. 1 ABO 2000-01-01 05:00:00 -3.0 Sa. 1 ABO 2000-01-01 06:00:00 -3.7 Sa. 1 ABO 2000-01-01 07:00:00 -4.4 Sa. 1 ABO 2000-01-01 08:00:00 -4.1 Sa. 1 ABO 2000-01-01 09:00:00 -4.1 Sa. 1 2.2.8 Aufgabe 8 Erstelle eine neue Spalte basierend auf die Temperaturwerte mit der Einteilung kalt (Unter Null Grad) und warm (über Null Grad) stn time tre200h0 wochentag kw temp_kat ABO 2000-01-01 00:00:00 -2.6 Sa. 1 kalt ABO 2000-01-01 01:00:00 -2.5 Sa. 1 kalt ABO 2000-01-01 02:00:00 -3.1 Sa. 1 kalt ABO 2000-01-01 03:00:00 -2.4 Sa. 1 kalt ABO 2000-01-01 04:00:00 -2.5 Sa. 1 kalt ABO 2000-01-01 05:00:00 -3.0 Sa. 1 kalt ABO 2000-01-01 06:00:00 -3.7 Sa. 1 kalt ABO 2000-01-01 07:00:00 -4.4 Sa. 1 kalt ABO 2000-01-01 08:00:00 -4.1 Sa. 1 kalt ABO 2000-01-01 09:00:00 -4.1 Sa. 1 kalt Wickham and Grolemund (2017), Kapitel 8 bzw. http://r4ds.had.co.nz/data-import.html) "],["2-3-uebung-a-loesung.html", "2.3 Uebung A Loesung", " 2.3 Uebung A Loesung R-Script als Download library(tidyverse) # Im Unterschied zu `install.packages()` werden bei `library()` keine Anführungs- # und Schlusszeichen gesetzt. library(lubridate) # Im Unterschied zu install.packages(&quot;tidyverse&quot;) wird bei library(tidyverse) # das package lubridate nicht berücksichtigt # Lösung Aufgabe 1 df &lt;- data_frame( Tierart = c(&quot;Fuchs&quot;,&quot;Bär&quot;,&quot;Hase&quot;,&quot;Elch&quot;), Anzahl = c(2,5,1,3), Gewicht = c(4.4, 40.3,1.1,120), Geschlecht = c(&quot;m&quot;,&quot;f&quot;,&quot;m&quot;,&quot;m&quot;), Beschreibung = c(&quot;Rötlich&quot;,&quot;Braun, gross&quot;, &quot;klein, mit langen Ohren&quot;,&quot;Lange Beine, Schaufelgeweih&quot;) ) # Lösung Aufgabe 2 str(df) # Anzahl wurde als `double` interpretiert, ist aber eigentlich ein `integer`. # Mit data.frame() wurde Beschreibung wurde als `factor` interpretiert, ist # aber eigentlich `character` typeof(df$Anzahl) df$Anzahl &lt;- as.integer(df$Anzahl) df$Beschreibung &lt;- as.character(df$Beschreibung) # Lösung Aufgabe 3 df$Gewichtsklasse[df$Gewicht &gt; 100] &lt;- &quot;schwer&quot; df$Gewichtsklasse[df$Gewicht &lt;= 100 &amp; df$Gewicht &gt; 5] &lt;- &quot;mittel&quot; df$Gewichtsklasse[df$Gewicht &lt;= 5] &lt;- &quot;leicht&quot; # Lösung Aufgabe 4 wetter &lt;- readr::read_table(&quot;09_PrePro1/data/order_52252_data.txt&quot;) # Lösung Aufgabe 5 # Die Spalte &#39;time&#39; wurde als &#39;integer&#39; interpretiert. Dabei handelt es # sich offensichtlich um Zeitangaben. # Lösung Aufgabe 6 # mit readr parse_datetime(as.character(wetter$time[1:10]), format = &quot;%Y%m%d%H&quot;) # mit as.POSIXct() wetter$time &lt;- as.POSIXct(as.character(wetter$time), format = &quot;%Y%m%d%H&quot;,tz = &quot;UTC&quot;) # Lösung Aufgabe 7 wetter$wochentag &lt;- wday(wetter$time,label = T) wetter$kw &lt;- week(wetter$time) # Lösung Aufgabe 8 wetter$temp_kat[wetter$tre200h0&gt;0] &lt;- &quot;warm&quot; wetter$temp_kat[wetter$tre200h0&lt;=0] &lt;- &quot;kalt&quot; "],["2-4-uebung-b.html", "2.4 Uebung B", " 2.4 Uebung B Fahre mit dem Datensatz wetter aus Übung A fort. 2.4.1 Aufgabe 1 Nutze plot() um die Temparaturkurve zu visualisieren. Verwende aber vorher filter() um dich auf eine Station (z.B. ABO) zu beschränken (es handelt sich sonst um zuviele Datenpunkte). Nun schauen wir uns das plotten mit ggplot2 an. Ein simpler Plot wie der in der vorherigen Aufgabe ist in ggplot2 zugegebenermassen etwas komplizierter. ggplot2 wird aber rasch einfacher, wenn die Grafiken komplexer werden. Wir empfehlen deshalb stark, ggplot2 zu verwenden. Schau dir ein paar online Tutorials zu ggplot2 an (siehe2) und reproduziere den obigen Plot mit ggplot2 2.4.2 Aufgabe 2 Spiele mit Hilfe der erwähnten Tutorials mit dem Plot etwas rum. Versuche die x-/y-Achsen zu beschriften sowie einen Titel hinzu zu fügen. 2.4.3 Aufgabe 3 Reduziere den x-Achsenausschnitt auf einen kleineren Zeitraum, beispielsweise einn beliebigen Monat. Verwende dazu lims() zusammen mit as.POSIXct() oder mache ein Subset von deinem Datensatz mit einer convenience-Variabel und filter(). Wickham and Grolemund (2017), Kapitel 1 bzw. http://r4ds.had.co.nz/data-visualisation.html oder hier ein sehr schönes Video: Learn R: An Introduction to ggplot2 "],["2-5-uebung-b-loesung.html", "2.5 Uebung B Loesung", " 2.5 Uebung B Loesung R-Code als Download library(tidyverse) # Lösung Aufgabe 1 wetter_fil &lt;- dplyr::filter(wetter, stn == &quot;ABO&quot;) plot(wetter_fil$time,wetter_fil$tre200h0, type = &quot;l&quot;) p &lt;- ggplot(wetter_fil, aes(time,tre200h0)) + geom_line() p # Lösung Aufgabe 2 p &lt;- p + labs(x = &quot;Datum&quot;, y = &quot;Temperatur&quot;, title = &quot;Stündlich gemittelte Temperaturwerte&quot;) p # Lösung Aufgabe 3 limits &lt;- as.POSIXct(c(&quot;2002-01-01 00:00:00&quot;,&quot;2002-02-01 00:00:00&quot;),tz = &quot;UTC&quot;) p + lims(x = limits) "],["3-prepro2-13-10-2020.html", "Kapitel 3 PrePro2 (13.10.2020)", " Kapitel 3 PrePro2 (13.10.2020) Die Lerneinheit vermittelt zentralste Fertigkeiten zur Vorverarbeitung von strukturierten Daten in der umweltwissenschaftlichen Forschung: Datensätze verbinden (Joins) und umformen (reshape, split-apply-combine). Im Anwendungskontext haben Daten selten von Anfang an diejenige Struktur, welche für die statistische Auswertung oder für die Informationsvisualisierung erforderlich wäre. In dieser Lerneinheit lernen die Studierenden die für diese oft zeitraubenden Preprocessing-Schritte notwendigen Konzepte und R-Werkzeuge kennen und kompetent anzuwenden. "],["3-1-ergaenzungen-zu-prepro-1.html", "3.1 Ergaenzungen zu PrePro 1", " 3.1 Ergaenzungen zu PrePro 1 3.1.1 Integer mit L In R kann eine Zahl mit dem Suffix L explizit als Integer spezifiziert werden. typeof(42) ## [1] &quot;double&quot; typeof(42L) ## [1] &quot;integer&quot; Warum dazu der Buchstabe L verwendet wird ist nirgends offiziell Dokumentiert (zumindest haben wir nichts gefunden). Die gängigste Meinung, die auch von renommierten R-Profis vertreten wird ist, dass damit Long integer abgekürzt wird. 3.1.2 Arbeiten mit RStudio Project Wir empfehlen die Verwendung von Projects innerhalb von RStudio. RStudio legt für jedes Projekt dann einen Ordner an, in welches die Projekt-Datei abgelegt wird (Dateiendung .Rproj). Sollen innerhalb des Projekts dann R-Skripts geladen oder erzeugt werden, werden diese dann auch im angelegten Ordner abgelegt. Mehr zu RStudio Projects findet ihr hier. Das Verwenden von Projects bringt verschiedene Vorteile, wie zum Beispiel: Festlegen der Working Directory ohne die Verwendung des expliziten Pfades (setwd()). Das ist sinnvoll, da sich dieser Pfad ändern kann (Zusammenarbeit mit anderen Usern, Ausführung des Scripts zu einem späteren Zeitpunkt) Automatisches Zwischenspeichern geöffneter Scripts und Wiederherstellung der geöffneten Scripts bei der nächsten Session Festlegen verschiedener projektspezifischer Optionen Verwendung von Versionsverwaltungssystemen (Github oder SVN) 3.1.3 Arbeiten mit factors Wie bereits angedeutet, ist das Arbeiten mit factors etwas gewöhnungsbedürftig. Wir gehen hier auf ein paar Stolpersteine ein. zahlen &lt;- factor(c(&quot;null&quot;,&quot;eins&quot;,&quot;zwei&quot;,&quot;drei&quot;)) zahlen ## [1] null eins zwei drei ## Levels: drei eins null zwei Offensichtlich sollten diese factors geordnet sein, R weiss davon aber nichts. Eine Ordnung kann man mit dem Befehl ordered = T festlegen. Beachtet: ordered = T kann nur bei der Funktion factor() spezifiziert werden, nicht bei as.factor(). Ansonsten sind factor() und as.factor() sehr ähnlich. zahlen &lt;- factor(zahlen,ordered = T) zahlen ## [1] null eins zwei drei ## Levels: drei &lt; eins &lt; null &lt; zwei Beachtet das &lt;-Zeichen zwischen den Levels. Die Zahlen werden nicht in der korrekten Reihenfolge, sondern Alphabetisch geordnet. Die richtige Reihenfolge kann man mit levels = festlegen. zahlen &lt;- factor(zahlen,ordered = T,levels = c(&quot;null&quot;,&quot;eins&quot;,&quot;zwei&quot;,&quot;drei&quot;,&quot;vier&quot;)) zahlen ## [1] null eins zwei drei ## Levels: null &lt; eins &lt; zwei &lt; drei &lt; vier Wie auch schon erwähnt werden factors als character Vektor dargestellt, aber als Integers gespeichert. Das führt zu einem scheinbaren Wiederspruch wenn man den Datentyp auf unterschiedliche Weise abfragt. typeof(zahlen) ## [1] &quot;integer&quot; is.integer(zahlen) ## [1] FALSE Mit typeof() wird eben diese Form der Speicherung abgefragt und deshalb mit integer beantwortet. Da es sich aber nicht um einen eigentlichen Integer Vektor handelt, wird die Frage is.integer() mit FALSE beantwortet. Das ist etwas verwirrend, beruht aber darauf, dass die beiden Funktionen die Frage von unterschiedlichen Perspektiven beantworten. In diesem Fall schafft class() Klarheit: class(zahlen) ## [1] &quot;ordered&quot; &quot;factor&quot; Wirklich verwirrend wird es, wenn factors in numeric umgewandelt werden sollen. zahlen ## [1] null eins zwei drei ## Levels: null &lt; eins &lt; zwei &lt; drei &lt; vier as.integer(zahlen) ## [1] 1 2 3 4 Das die Übersetzung der auf Deutsch ausgeschriebenen Nummern in nummerische Zahlen nicht funktionieren würde, war ja klar. Weniger klar ist es jedoch, wenn die factors bereits aus nummerischen Zahlen bestehen. zahlen2 &lt;- factor(c(&quot;3&quot;,&quot;2&quot;,&quot;1&quot;,&quot;0&quot;)) as.integer(zahlen2) ## [1] 4 3 2 1 In diesem Fall müssen die factors erstmals in character umgewandelt werden. zahlen2 &lt;- factor(c(&quot;3&quot;,&quot;2&quot;,&quot;1&quot;,&quot;0&quot;)) as.integer(as.character(zahlen2)) ## [1] 3 2 1 0 3.1.4 Heikle Annahmen - bessere Alternativen Aus oben beschriebenen Grund ist es auch problematisch, dass data.frame() sowie alle read.* Funktionen (read.table, read.csv etc) immer davon ausgehen, dass strings als factors interpretiert werden sollten. Es gibt in Base R einige Funktionen, welche Annahmen treffen die problematisch sein können. Ein weiteres Beispiel ist die Annahme der Zeitzone und Verwendung von Sommerzeit bei as.POSIXct(). Oft gibt es dafür im Tidyverse alternative Funktionen, in denen diese Probleme besser gelöst sind. Wir empfehlen, wenn immer Möglich die Tidyverse-Alternativen zu verwenden. Beispiele: data_frame() statt data.frame() read_* statt read.* parse_datetime statt as.POSIXct() Beim Import von Daten kann es sinnvoll sein, die Datentypen der Spalten bereits im Importbefehl zu spezifizieren. So vermeidet man die anschliessende Typumwandlung und die damit verbundenen Fehlerquellen. Zudem wird der Importprozess beschleunigt, da R keine Zeit daran verschwenden muss die Datentypen (aufgrund der ersten 1000 Zeilen) zu erraten. library(tidyverse) df1 &lt;- read_table(&quot;09_PrePro1/data/order_52252_data.txt&quot;, col_types = list( col_character(), # Macht aus der 1.Spalte ein character col_datetime(format = &quot;%Y%m%d%H&quot;),# Macht aus der 2.Spalte ein POSIXct col_double() # Macht aus der 3.Spalte ein double ) ) df1 &lt;- read_table(&quot;09_PrePro1/data/order_52252_data.txt&quot;, col_types = list( col_factor(levels = NULL), # Macht aus der 1.Spalte ein factor col_datetime(format = &quot;%Y%m%d%H&quot;),# Macht aus der 2.Spalte ein POSIXct col_double() # Macht aus der 3.Spalte ein double ) ) "],["3-2-demo-tidyverse.html", "3.2 Demo: tidyverse", " 3.2 Demo: tidyverse Demoscript als Download Hier möchten wir euch mit einer Sammlung von Tools vertraut machen, die spezifisch für das Daten prozessieren in Data Science entwickelt wurden. Der Prozess und das Modell ist hier3 schön beschrieben. Die Sammlung von Tools wird unter dem Namen tidyverse vertrieben, welches wir ja schon zu Beginn der ersten Übung installiert und geladen haben. Die Tools erleichtern den Umgang mit Daten ungeheuer und haben sich mittlerweile zu einem must have im Umgang mit Daten in R entwickelt. Wir können Euch nicht sämtliche Möglichkeiten von tidyverse zeigen. Wir fokussieren uns deshalb auf einzelne Komponenten4 und zeigen ein paar Funktionalitäten, die wir oft verwenden und Euch ggf. noch nicht bekannt sind. Wer sich vertieft mit dem Thema auseinandersetzen möchte, der sollte sich unbedingt das Buch Wickham and Grolemund (2017) beschaffen. Eine umfangreiche, aber nicht ganz vollständige Version gibt es online5, das vollständige eBook kann über die Bibliothek bezogen werden6. 3.2.1 Split-Apply-Combine 3.2.1.1 Packete laden library(tidyverse) Mit library(tidyverse) werden nicht alle Packete geladen, die mit install.packages(tidyverse) intalliert wurden (warum?). Unter anderem muss lubridate noch separat geladen werden: library(lubridate) 3.2.1.2 Daten Laden Wir laden die Wetterdaten von der letzten Übung. wetter &lt;- read_table(&quot;09_PrePro1/data/order_52252_data.txt&quot;, col_types = list( col_factor(levels = NULL), col_datetime(format = &quot;%Y%m%d%H&quot;), col_double() ) ) 3.2.1.3 Kennwerte berechnen Wir möchten den Mittelwert aller gemessenen Temperaturwerte berechnen. Dazu könnten wir folgenden Befehl verwenden: mean(wetter$tre200h0, na.rm = TRUE) ## [1] 8.962106 Die Option na.rm = T bedeutet, dass NA Werte von der Berechnung ausgeschlossen werden sollen. Mit der selben Herangehensweise können diverse Werte berechnet werden (z.B. das Maximum (max()), Minimum (min()), Median (median()) u.v.m.). Diese Herangehensweise funktioniert nur dann gut, wenn wir die Kennwerte über alle Beobachtungen (Zeilen) für eine Variable (Spalte) berechnen wollen. Sobald wir die Beobachtungen gruppieren wollen, wird es schwierig. Zum Beispiel, wenn wir die durchschnittliche Temperatur pro Jahr berechnen wollen. 3.2.1.4 Convenience Variablen Um diese Aufgabe zu lösen, muss zuerst das Jahr berechne werden (das Jahr ist die convenience variabel). Hierfür brauchen wir die Funktion year() (von lubridate). Nun kann kann die convenience Variable Jahr erstellt werden. Ohne dpylr wird eine neue Spalte wird folgendermassen hinzugefügt. wetter$year &lt;- year(wetter$time) Mit dplyr (siehe7) sieht der gleiche Befehl folgendermassen aus: wetter &lt;- mutate(wetter,year = year(time)) Der grosse Vorteil von dplyr ist an dieser Stelle noch nicht ersichtlich. Dieser wird aber später klar. 3.2.1.5 Kennwerte nach Gruppen berechnen Jetzt kann man die data.frame mithilfe der Spalte Jahr filtern. mean(wetter$tre200h0[wetter$year == 2000], na.rm = TRUE) ## [1] 9.281542 Dies müssen wir pro Jahr wiederholen, was natürlich sehr umständlich ist, v.a. wenn man eine Vielzahl an Gruppen hat (z.B. Kalenderwochen statt Jahre). Deshalb nutzen wir das package dplyr. Damit geht die Aufgabe (Temperaturmittel pro Jahr berechnen) folgendermassen: summarise(group_by(wetter,year),temp_mittel = mean(tre200h0, na.rm = TRUE)) ## # A tibble: 7 x 2 ## year temp_mittel ## &lt;dbl&gt; &lt;dbl&gt; ## 1 2000 9.28 ## 2 2001 8.76 ## 3 2002 9.30 ## 4 2003 9.48 ## 5 2004 8.64 ## 6 2005 8.31 ## 7 NA NaN 3.2.1.6 Verketten vs. verschachteln Auf Deutsch übersetzt heisst die obige Operation folgendermassen: nimm den Datensatz wetter Bilde Gruppen pro Jahr (group_by(wetter,year)) Berechne das Temperaturmittel (mean(tre200h0)) Diese Übersetzung R-&gt; Deutsch unterscheidet sich vor allem darin, dass die Operation auf Deutsch verkettet ausgesprochen wird (Operation 1-&gt;2-&gt;3) während der Computer verschachtelt liest 3(2(1)). Um R näher an die gesprochene Sprache zu bringen, kann man den %&gt;%-Operator verwenden (siehe8). summarise(group_by(wetter,year),temp_mittel = mean(tre200h0)) # wird zu: wetter %&gt;% #1) nimm den Datensatz &quot;wetter&quot; group_by(year) %&gt;% #2) Bilde Gruppen pro Jahr summarise(temp_mittel = mean(tre200h0)) #3) berechne das Temperaturmittel Dieses Verketten mittels %&gt;% macht den Code einiges schreib- und leserfreundlicher, und wir werden ihn in den nachfolgenden Übungen verwenden. Dabei handelt es sich um das package magrittr, welches mit tidyverse mitgeliefert wird. Zu dplyr und magrittrgibt es etliche Tutorials online (siehe9), deshalb werden wir diese Tools nicht in allen Details erläutern. Nur noch folgenden wichtigen Unterschied zu zwei wichtigen Funktionen in dpylr: mutate() und summarise(). summarise() fasst einen Datensatz zusammen. Dabei reduziert sich die Anzahl Beobachtungen (Zeilen) auf die Anzahl Gruppen (z.B. eine zusammengefasste Beobachtung (Zeile) pro Jahr). Zudem reduziert sich die Anzahl Variablen (Spalten) auf diejenigen, die in der summarise Funktion spezifiziert wurde (z.B. temp_mittel). mit mutate wird ein data.frame vom Umfang her belassen, es werden lediglich zusätzliche Variablen (Spalten) hinzugefügt (siehe Beispiel unten). # Maximal und minimal Temperatur pro Kalenderwoche wetter %&gt;% #1) nimm den Datensatz &quot;wetter&quot; filter(stn == &quot;ABO&quot;) %&gt;% #2) filter auf Station namnes &quot;ABO&quot; mutate(kw = week(time)) %&gt;% #3) erstelle eine neue Spalte &quot;kw&quot; group_by(kw) %&gt;% #4) Nutze die neue Spalte um Guppen zu bilden summarise( temp_max = max(tre200h0, na.rm = TRUE),#5) Berechne das Maximum temp_min = min(tre200h0, na.rm = TRUE) #6) Berechne das Minimum ) ## # A tibble: 53 x 3 ## kw temp_max temp_min ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 11.4 -15.2 ## 2 2 12.9 -15.9 ## 3 3 8.2 -11.3 ## 4 4 9.6 -15.9 ## 5 5 16.9 -17.5 ## 6 6 13.5 -13.1 ## 7 7 12.9 -15.4 ## 8 8 11 -14.4 ## 9 9 12.9 -17.6 ## 10 10 15.4 -16.3 ## # ... with 43 more rows 3.2.1.7 Resultate plotten Mit diesen Tools können wir nun auch eine neue Grafik plotten, ähnlich wie in der Übung 1. Dafür müssen wir die ganzen Operationen aber zuerst in einer Variabel speichern (bis jetzt hat R zwar alles schön berechnet, aber uns nur auf die Konsole ausgegeben). wetter_sry &lt;- wetter %&gt;% mutate( kw = week(time) ) %&gt;% filter(stn == &quot;ABO&quot;) %&gt;% group_by(kw) %&gt;% summarise( temp_max = max(tre200h0), temp_min = min(tre200h0), temp_mean = mean(tre200h0) ) Dieses Mal plotten wir nur mit ggplot2 (siehe10) ggplot() + geom_line(data = wetter_sry, aes(kw,temp_max), colour = &quot;yellow&quot;) + geom_line(data = wetter_sry, aes(kw,temp_mean), colour = &quot;pink&quot;) + geom_line(data = wetter_sry, aes(kw,temp_min), colour = &quot;black&quot;) + labs(y = &quot;temp&quot;) Das sieht schon mal gut aus. Nur, wir mussten pro Linie einen eigene Zeile schreiben (geom_line()) und dieser eine Farbe zuweisen. Bei drei Werten ist das ja ok, aber wie sieht es denn aus wenn es Hunderte sind? Da hat ggplot natürlich eine Lösung, dafür müssen aber alle Werte in einer Spalte daher kommen. Das ist ein häufiges Problem: Wir haben eine breite Tabelle (viele Spalten), bräuchten aber eine lange Tabelle (viele Zeilen). 3.2.2 Reshaping data 3.2.2.1 Breit -&gt; lang Da kommt tidyverse wieder ins Spiel. Die Umformung von Tabellen breit-&gt;lang erfolgt mittels tidyr(siehe11). Auch dieses package funktioniert wunderbar mit piping (%&gt;%). wetter_sry_long &lt;- wetter_sry %&gt;% gather(Key, Value, c(temp_max,temp_min,temp_mean)) Im Befehl gather() braucht es drei Werte: beliebiger Name der neuen Variablen (Spalte) für die Schlüssel: temp_mean, temp_min (ich verwenden den Namen: Key) beliebiger Name der neuen Variablen (Spalte) für die effektiven Werte: 5°C, 10°C (ich verwenden den Namen: Value) Name der (bestehenden) Variablen (Spalten), die zusammen gefasst werden sollten: (hier: temp_max,temp_min,temp_mean) Die ersten 6 Zeilen von wetter_sry: kw temp_max temp_min temp_mean 1 11.4 -15.2 -1.2593254 2 12.9 -15.9 -1.5572421 3 8.2 -11.3 -1.8832341 4 9.6 -15.9 -2.8375000 5 16.9 -17.5 -0.9789683 6 13.5 -13.1 0.4392857 Die ersten 6 Zeilen von wetter_sry_long: kw Key Value 1 temp_max 11.400000 1 temp_min -15.200000 1 temp_mean -1.259325 2 temp_max 12.900000 2 temp_min -15.900000 2 temp_mean -1.557242 Beachte: wetter_sry_long umfasst 159 Beobachtungen (Zeilen), das sind 3 mal soviel wie wetter_sry, da wir ja drei Spalten zusammengefasst haben. nrow(wetter_sry) ## [1] 53 nrow(wetter_sry_long) ## [1] 159 Statt die Variablen (Spalten) zu benennen, die zusammengefasst werden sollten, wäre es in unserem Fall einfacher, die Variablen (Spalten) zu benennen die nicht zusammengefasst werden sollen (kw): wetter_sry_long &lt;- wetter_sry %&gt;% gather(Key, Value, -kw) Nun können wir den obigen Plot viel einfacher erstellen: ggplot(wetter_sry_long, aes(kw,Value, colour = Key)) + geom_line() Beachtet, dass wir gegenüber dem letzten Plot colour nun innerhalb von aes() festlegen und nicht mit einem expliziten Farbwert, sondern mit dem Verweis auf die Spalte key. 3.2.2.2 Lang -&gt; breit Um unsere lange Tabelle wieder zurück in eine breite zu überführen, brauchen wir lediglich einen Befehl (spread): wetter_sry_long %&gt;% spread(Key,Value) ## # A tibble: 53 x 4 ## kw temp_max temp_mean temp_min ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 11.4 -1.26 -15.2 ## 2 2 12.9 -1.56 -15.9 ## 3 3 8.2 -1.88 -11.3 ## 4 4 9.6 -2.84 -15.9 ## 5 5 16.9 -0.979 -17.5 ## 6 6 13.5 0.439 -13.1 ## 7 7 12.9 -2.32 -15.4 ## 8 8 11 -2.84 -14.4 ## 9 9 12.9 -2.20 -17.6 ## 10 10 15.4 0.917 -16.3 ## # ... with 43 more rows 3.2.3 Quellen Dieses Kapitel verwendet folgende Libraries: Spinu, Grolemund, and Wickham (2018), Wickham (2018a), Wickham (2018b), Wickham, François, et al. (2018), Henry and Wickham (2018), Wickham, Hester, and Francois (2017), Wickham and Henry (2018), Müller and Wickham (2018), Wickham, Chang, et al. (2018), Wickham (2017) References "],["3-3-uebung-a.html", "3.3 Uebung A", " 3.3 Uebung A 3.3.1 Aufgabe 1 Lade die Wetterdaten aus der letzten Übung. 3.3.2 Aufgabe 2 Bereinige den Datensatz. Entferne z.B. alle Zeilen, bei dem der Stationsnahme oder Temperaturwerte fehlen 3.3.3 Aufgabe 3 Überführe die lange Tabelle über in eine breite. Dabei sollte jede Station eine eigene Spalte enthalten (key), gefüllt mit den Temperaturwerten (value). Speichere diese Tabelle in einer neuen Variabel. 3.3.4 Aufgabe 4 Importiere die Datei order_52252_legend.csv (z.B. mit read_delim). Hinweis: Wenn Umlaute und Sonderzeichen nicht korrekt dargestellt werden (z.B. in Genève), hat das vermutlich mit der Zeichencodierung zu tun. Das File ist aktuell in ANSI Codiert, welche für gewisse Betriebssysteme / R-Versionen ein Problem darstellt. Um das Problem zu umgehen muss man das File mit einem Editor öffnen (Windows Editor oder Notepad++, Mac: TextEdit) und mit einer neuen Codierung (z.B UTF-8) abspeichern. Danach kann die Codierung spezifitiert werden (bei read_delim(): mitlocale = locale(encoding = UTF-8)`) 3.3.5 Aufgabe 5 Die x-/y-Koordinaten sind aktuell in einer Spalte erfasst. Um mit den Koordinaten sinnvoll arbeiten zu können, brauchen wir die Koordinaten getrennt. Trenne die x und y Koordinaten aus der Spalte Koordinaten (Tipp: nutze dafür tidyr::separate()). 3.3.6 Aufgabe 6 Nun wollen wir den Datensatz wettermit den Informationen aus wetter_legendeanreichern. Uns interessiert aber nur das Stationskürzel, der Name, die x/y Koordinaten sowie die Meereshöhe. Lösche die nicht benötigten Spalten (oder selektiere die benötigten Spalten). Tipp: Nutze select() von dplyr 3.3.7 Aufgabe 7 Nun ist der Datensatz wetter_legendegenügend vorbereitet. Jetzt kann er mit dem Datensatz wetter verbunden werden. Überlege dir, welcher Join dafür sinnvoll ist und mit welchem Attribut wir joinen können. Nutze die Join-Möglichkeiten von dplyr (Hilfe via ?dplyr::join) um die Datensätze wetter und wetter_legendezu verbinden. 3.3.8 Aufgabe 8 Berechne die Durchschnittstemperatur pro Station. Nutze dabei dplyr::summarise() und wenn möglich %&gt;%. Speichere das Resultat in einer neuen Variabel. 3.3.9 Aufgabe 9 Nun wollen wir das Resultat aus Aufgabe 7 nutzen, um die Durchschnittstemperatur der Meereshöhe gegenüber zu stellen. Dummerweise ging das Attribut Meereshoehe bei der summarise() Operation verloren (da bei summarise() alle Spalten weg fallen, die nicht in group_by() definiert wurden). Um die Spalte Meereshoehe beizubehalten, muss sie also unter group_by() aufgelistet werden. Wiederhole Übung 7 und siehe zu, dass die Meereshöhe beibehalten wird. Stelle danach in einem Scatterplot (wenn möglich mit ggplot()) die Meereshöhe der Durchschnittstemperatur gegenüber. "],["3-4-uebung-a-loesung-1.html", "3.4 Uebung A: Loesung", " 3.4 Uebung A: Loesung R-Code als Download library(tidyverse) library(lubridate) library(stringr) # Lösung Aufgabe 1 wetter &lt;- read_table(&quot;09_PrePro1/data/order_52252_data.txt&quot;, col_types = list( col_factor(levels = NULL), col_datetime(format = &quot;%Y%m%d%H&quot;), col_double() ) ) # Lösung Aufgabe 2 wetter &lt;- wetter %&gt;% filter(!is.na(stn)) %&gt;% filter(!is.na(tre200h0)) # Lösung Aufgabe 3 wetter_spread &lt;- spread(wetter, stn,tre200h0) # Lösung Aufgabe 4 wetter_legende &lt;- read_delim(&quot;09_PrePro1/data/order_52252_legend.csv&quot;,delim = &quot;;&quot;, locale = locale(encoding = &quot;UTF-8&quot;)) # Lösung Aufgabe 5 koordinaten &lt;- str_split_fixed(wetter_legende$Koordinaten, &quot;/&quot;, 2) colnames(koordinaten) &lt;- c(&quot;x&quot;,&quot;y&quot;) wetter_legende &lt;- cbind(wetter_legende,koordinaten) # Lösung Aufgabe 6 wetter_legende &lt;- dplyr::select(wetter_legende, stn, Name, x,y,Meereshoehe) # Lösung Aufgabe 7 wetter &lt;- left_join(wetter,wetter_legende,by = &quot;stn&quot;) # Jointyp: Left-Join auf &#39;wetter&#39;, da uns nur die Stationen im Datensatz &#39;wetter&#39; interessieren. # Attribut: &quot;stn&quot; # Lösung Aufgabe 8 wetter_sry &lt;- wetter %&gt;% group_by(stn) %&gt;% summarise(temp_mean = mean(tre200h0)) # Lösung Aufgabe 9 wetter_sry &lt;- wetter %&gt;% group_by(stn,Meereshoehe) %&gt;% summarise(temp_mean = mean(tre200h0)) # Achtung: wenn mehrere Argumente in group_by() definiert werden führt das # üblicherweise zu Untergruppen. In unserem Fall hat jede Station nur EINE # Meereshöhe, deshalb wird die Zahl der Gruppen nicht erhöht. ggplot(wetter_sry, aes(temp_mean,Meereshoehe)) + geom_point() "],["3-5-uebung-b-1.html", "3.5 Uebung B", " 3.5 Uebung B 3.5.1 Aufgabe 1 Gegeben sind die Daten von drei Sensoren (sensor1.csv, sensor2.csv, sensor3.csv). Lade die Datensätze runter und lese sie ein. 3.5.2 Aufgabe 2 Füge die drei Tabellen zu einer zusammen. Dazu kannst du entweder die Spalten (Variablen) mittels join() oder die Zeilen (Beobachtungen) mittels rbind() zusammen kleben. Überführe zudem die Spalte Datetime in ein POSIXct-Format. Das ursprüngliche Format lautet:DDMMYYYY_HHMM 3.5.3 Aufgabe 3 Importiere die Datei sensor_1_fail.csv in R. sensor_fail.csv hat eine Variabel SensorStatus: 1 bedeutet der Sensor misst, 0 bedeutet der Sensor miss nicht. Fälschlicherweise wurde auch dann der Messwert Temp = 0 erfasst, wenn Sensorstatus = 0. Richtig wäre hier NA (not available). Korrigiere den Datensatz entsprechend. 3.5.4 Aufgabe 4 Warum spielt das es eine Rolle, ob 0 oder NA erfasst wird? Vergleiche dazu die Mittlere Temperatur / Feuchtigkeit vor und nach der Korrektur. "],["3-6-uebung-b-loesung-1.html", "3.6 Uebung B: Loesung", " 3.6 Uebung B: Loesung R-Code als Download library(tidyverse) library(lubridate) library(stringr) # Lösung Aufgabe 1 sensor1 &lt;- read_delim(&quot;10_PrePro2/data/sensor1.csv&quot;,&quot;;&quot;) sensor2 &lt;- read_delim(&quot;10_PrePro2/data/sensor2.csv&quot;,&quot;;&quot;) sensor3 &lt;- read_delim(&quot;10_PrePro2/data/sensor3.csv&quot;,&quot;;&quot;) # Lösung Aufgabe 2 (Var 1: Spalten [Variabeln] zusammen &#39;kleben&#39;) sensor_all &lt;- sensor1 %&gt;% rename(sensor1 = Temp) %&gt;% # Spalte &quot;Temp&quot; in &quot;sensor1&quot; umbenennen full_join(sensor2,by = &quot;Datetime&quot;) %&gt;% rename(sensor2 = Temp) %&gt;% full_join(sensor3, by = &quot;Datetime&quot;) %&gt;% rename(sensor3 = Temp) %&gt;% mutate(Datetime = as.POSIXct(Datetime,format = &quot;%d%m%Y_%H%M&quot;)) # Lösung Aufgabe 2 (Var 2: Zeilen [Beobachtungen] zusammen &#39;kleben) sensor1$sensor &lt;- &quot;sensor1&quot; sensor2$sensor &lt;- &quot;sensor2&quot; sensor3$sensor &lt;- &quot;sensor3&quot; sensor_all &lt;- rbind(sensor1,sensor2,sensor3) sensor_all &lt;- sensor_all %&gt;% mutate( Datetime = as.POSIXct(Datetime,format = &quot;%d%m%Y_%H%M&quot;) ) %&gt;% spread(sensor, Temp) # Lösung Aufgabe 3 sensor_fail &lt;- read_delim(&quot;10_PrePro2/data/sensor_fail.csv&quot;, delim = &quot;;&quot;) # Lösungsweg 1 sensor_fail$Datetime &lt;- as.POSIXct(sensor_fail$Datetime,format = &quot;%d%m%Y_%H%M&quot;) sensor_fail$`Hum_%`[sensor_fail$SensorStatus == 0] &lt;- NA sensor_fail$Temp[sensor_fail$SensorStatus == 0] &lt;- NA # Lösungsweg 2 sensor_fail &lt;- read_delim(&quot;10_PrePro2/data/sensor_fail.csv&quot;, delim = &quot;;&quot;) sensor_fail_corr &lt;- sensor_fail %&gt;% mutate( Datetime = as.POSIXct(Datetime,format = &quot;%d%m%Y_%H%M&quot;) ) %&gt;% rename(Humidity = `Hum_%`) %&gt;% # Weil R &quot;%&quot; in Headers nicht mag gather(key,val, c(Temp, Humidity)) %&gt;% mutate( val = ifelse(SensorStatus == 0,NA,val) ) %&gt;% spread(key,val) # Lösung Aufgabe 4 # Mittelwerte der unkorrigierten Sensordaten (`NA` als `0`) mean(sensor_fail$Temp) mean(sensor_fail$`Hum_%`) # Mittelwerte der korrigierten Sensordaten (`NA` als `NA`). Hier müssen wir die Option # `na.rm = T` (Remove NA = T) wählen, denn `mean()` (und ähnliche Funktionen) retourieren # immer `NA`, sobald ein **einzelner** Wert in der Reihe `NA`ist. mean(sensor_fail_corr$Temp, na.rm = T) mean(sensor_fail_corr$Humidity, na.rm = T) "]]
