[
  {
    "path": "infovis/InfoVis1-Demo-EDA/",
    "title": "Demo EDA",
    "description": {},
    "author": [],
    "date": "2021-10-20",
    "categories": [
      "InfoVis1"
    ],
    "contents": "\n\nR-Code\n\n\n\nlibrary(tidyverse)\nlibrary(scales)\n\n# create some data about age and height of people\npeople <- data.frame(\n  ID = c(1:30),\n  \n  age = c(5.0, 7.0, 6.5 ,9.0, 8.0, 5.0, 8.6, 7.5, 9.0, 6.0,\n          63.5 ,65.7, 57.6, 98.6, 76.5, 78.0, 93.4, 77.5, 256.6, 512.3,\n          15.5, 18.6, 18.5, 22.8, 28.5, 39.5, 55.9, 50.3, 31.9, 41.3),\n  \n  height = c(0.85, 0.93, 1.1, 1.25, 1.33, 1.17, 1.32, 0.82, 0.89, 1.13,\n             1.62, 1.87, 1.67, 1.76, 1.56, 1.71, 1.65, 1.55, 1.87, 1.69,\n             1.49, 1.68, 1.41, 1.55, 1.84, 1.69, 0.85, 1.65, 1.94, 1.80),\n  \n  weight = c(45.5, 54.3, 76.5, 60.4, 43.4, 36.4, 50.3, 27.8, 34.7, 47.6,\n             84.3, 90.4, 76.5, 55.6, 54.3, 83.2, 80.7, 55.6, 87.6, 69.5,\n             48.0, 55.6, 47.6, 60.5, 54.3, 59.5, 34.5, 55.4, 100.4, 110.3)\n)\n\n\n\n# build a scatterplot for a first inspection\nggplot(people, aes(x=age, y=height)) + geom_point() + scale_y_continuous(limits=c(0.75, 2.0))\n\n\n\n# Go to help page: http://docs.ggplot2.org/current/ -> Search for icon of fit-line\n# http://docs.ggplot2.org/current/geom_smooth.html\n\n# build a scatterplot for a first inspection, with regression line\nggplot(people, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"loess\", fill='lightblue', size=0.5, alpha=0.5)\n\n\n\n?stem\n\n# stem and leaf plot\nstem(people$height)\n\n\n\n  The decimal point is 1 digit(s) to the left of the |\n\n   8 | 25593\n  10 | 037\n  12 | 523\n  14 | 19556\n  16 | 255789916\n  18 | 04774\n\nstem(people$height, scale=2)\n\n\n\n  The decimal point is 1 digit(s) to the left of the |\n\n   8 | 2559\n   9 | 3\n  10 | \n  11 | 037\n  12 | 5\n  13 | 23\n  14 | 19\n  15 | 556\n  16 | 2557899\n  17 | 16\n  18 | 0477\n  19 | 4\n\n# explore the two variables with box-whiskerplots\nsummary(people$age)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   5.00    8.70   30.20   59.14   65.15  512.30 \n\nboxplot(people$age)\n\n\n\nsummary(people$height)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.820   1.190   1.555   1.455   1.690   1.940 \n\nboxplot(people$height)\n\n\n\n# boxplot(people$height) why twice the same\n\n\n# explore data with a histgram\nggplot(people, aes(x=age)) + \n  geom_histogram(stat=\"bin\", fill='green', binwidth=20)  \n\n\n\ndensity(x = people$height)\n\n\n\nCall:\n    density.default(x = people$height)\n\nData: people$height (30 obs.);  Bandwidth 'bw' = 0.1576\n\n       x                y           \n Min.   :0.3472   Min.   :0.001593  \n 1st Qu.:0.8636   1st Qu.:0.102953  \n Median :1.3800   Median :0.510601  \n Mean   :1.3800   Mean   :0.483553  \n 3rd Qu.:1.8964   3rd Qu.:0.722660  \n Max.   :2.4128   Max.   :1.216350  \n\n# re-expression: use log or sqrt axes\n#\n# Find here guideline about scaling axes \n# http://www.cookbook-r.com/Graphs/Axes_(ggplot2)/\n# http://docs.ggplot2.org/0.9.3.1/scale_continuous.html\n\n\n# logarithmic axis: respond to skewness in the data, e.g. log10 \nggplot(people, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5) +\n  scale_x_log10()\n\n\n\n# logarithmic axis: show multiplicative factors, e.g. log2\nggplot(people, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5) +\n  scale_x_continuous(trans = log2_trans(),\n                   breaks = trans_breaks(\"log2\", function(x) 2^x),\n                   labels = trans_format(\"log2\", math_format(2^.x)))\n\n\n\n# outliers: Remove very small and very old people\npeopleTemp <- filter(people, ID != 27) # Diese Person war zu klein.\npeopleClean <- filter(peopleTemp, age < 100) # Fehler in der Erhebung des Alters\n\n# re-explore cleaned data with a histogram\nggplot(peopleClean, aes(x=age)) + \n  geom_histogram(stat=\"bin\", fill='#6baed6', binwidth=10)\n\n\n\nggplot(peopleClean, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5)\n\n\n\n# with custom binwidth\nggplot(peopleClean, aes(x=age)) + \n  geom_histogram(stat=\"bin\", fill='#6baed6', binwidth=10) + \n  theme_bw() # specifying the theme\n\n\n\n# quadratic axis\nggplot(peopleClean, aes(x=age, y=height)) + \n  geom_point() + scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5) + scale_x_sqrt()\n\n\n\n# filter \"teenies\": No trend\nkids <- filter(peopleClean, age < 15)\n\nggplot(kids, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5)\n\n\n\n# filter \"teenies\": No trend\noldies <- filter(peopleClean, age > 55)\n\nggplot(oldies, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5)\n\n\n\n# Onwards towards multidimensional data\n\n# Finally, make a scatterplot matrix\npairs(peopleClean[,2:4], panel=panel.smooth)\n\npairs(peopleClean[,2:4], panel=panel.smooth)\n\n\n\n# Or as a bubble chart\npeopleClean$radius <- sqrt( peopleClean$weight/ pi )\nsymbols(peopleClean$age, peopleClean$height, circles=peopleClean$radius)\n\nsymbols(peopleClean$age, peopleClean$height, circles=peopleClean$radius)\n\n\n\n\n\n\n\n",
    "preview": "infovis/InfoVis1-Demo-EDA/distill-preview.png",
    "last_modified": "2021-10-20T08:48:43+02:00",
    "input_file": "Demo-EDA.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "infovis/InfoVis1-Demo-ggplot/",
    "title": "Demo ggplot2",
    "description": {},
    "author": [],
    "date": "2021-10-20",
    "categories": [
      "InfoVis1"
    ],
    "contents": "\n\nR-Code\n\n\n\nlibrary(readr)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\n\n\n\nAls erstes laden wir den Temperaturdatensatz ein. Es handelt sich dabei um eine leicht modifizierte Variante der Daten aus PrePro1 und 2.\n\n\n# Wir können den Datensatz direkt über den URL einladen oder aber ihr nutzt den \n# URL um den Datensatz lokal bei euch abzuspeichern und wie gewohnt einzulesen\ntemperature <- read_csv(\"https://github.com/ResearchMethods-ZHAW/datasets/raw/main/infovis/temperature_SHA_ZER.csv\")\n\n\n\n\ntime\nSHA\nZER\n2000-01-01 00:00:00\n0.2\n-8.8\n2000-01-01 01:00:00\n0.3\n-8.7\n2000-01-01 02:00:00\n0.3\n-9.0\n2000-01-01 03:00:00\n0.3\n-8.7\n2000-01-01 04:00:00\n0.4\n-8.5\n2000-01-01 05:00:00\n0.5\n-8.4\n\nUm in “base-R” einen Scatterplot zu erstellen wo Datum der Temperatur gegenübersteht, gehen wir wie folgt vor:\n\n\nplot(temperature$time, temperature$SHA, type = \"l\", col = \"red\")\nlines(temperature$time, temperature$ZER, col = \"blue\")\n\n\n\n\nIn ggplot sieht das etwas anders und auf den ersten Blick etwas komplizierter aus: Ein plot wird durch den Befehl ggplot() initiiert. Hier wird einerseits der Datensatz festgelegt, auf dem der Plot beruht (data =), sowie die Variablen innerhalb des Datensatzes, die Einfluss auf den Plot ausüben (mapping = aes()).\n\n\n# Datensatz: \"temperature\" | Beeinflussende Variabeln: \"time\" und \"temp\"\nggplot(data = temperature, mapping = aes(time,SHA))             \n\n\n\n\nWeiter braucht es mindestens ein “Layer” der beschreibt, wie die Daten dargestellt werden sollen (z.B. geom_point()). Anders als bei “Piping” (%>%) wird ein Layer mit + hinzugefügt.\n\n\nggplot(data = temperature, mapping = aes(time,SHA)) +         \n  # Layer: \"geom_point\" entspricht Punkten in einem Scatterplot \n  geom_point()                                    \n\n\n\n\nDa ggplot die Eingaben in der Reihenfolge data = und dann mapping =erwartet, können wir diese Spezifizierungen auch weglassen.\n\n\nggplot(temperature, aes(time,SHA)) +\n  geom_point()\n\n\n\nWie wir in PrePro 2 bereits erwähnt haben, ist ggplot2 auf long tables ausgelegt. Wir überführen deshalb an dieser Stelle die breite in eine lange Tabelle:\n\n\ntemperature_long <- pivot_longer(temperature, -time, names_to = \"station\", values_to = \"temp\")\n\n\n\nNun wollen wir die unterschiedlichen Stationen unterschiedlich einfärben. Da wir Variablen definieren wollen, welche Einfluss auf die Grafik haben sollen, gehört diese Information in aes().\n\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_point()\n\n\n\n\nWir können noch einen Layer mit Linien hinzufügen:\n\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_point()+\n  geom_line()\n\n\n\n\nWeiter können wir die Achsen beschriften und einen Titel hinzufügen. Zudem lasse ich die Punkte (geom_point()) nun weg, da mir diese nicht gefallen.\n\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(x = \"Zeit\",\n       y = \"Temperatur in Grad C°\", \n       title = \"Temperaturdaten Schweiz\",\n       subtitle = \"2001 bis 2002\")\n\n\n\n\nMan kann auch Einfluss auf die x-/y-Achsen nehmen. Dabei muss man zuerst festlegen, was für ein Achsentyp der Plot hat (vorher hat ggplot eine Annahme auf der Basis der Daten getroffen).\nBei unserer y-Achse handelt es sich um numerische Daten, ggplot nennt diese: scale_y_continuous(). Unter ggplot2.tidyverse.org findet man noch andere x/y-Achsentypen (scale_x_irgenwas bzw. scale_y_irgendwas).\n\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(x = \"Zeit\",\n       y = \"Temperatur in Grad C°\", \n       title = \"Temperaturdaten Schweiz\",\n       subtitle = \"2001 bis 2002\") +    \n  scale_y_continuous(limits = c(-30,30))    # y-Achsenabschnitt bestimmen\n\n\n\n\nDas gleiche Spiel kann man für die y-Achse betreiben. Bei unserer y-Achse handelt es sich ja um unsere POSIXct Daten. ggplot nennt diese: scale_x_datetime().\n\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(x = \"Zeit\",\n       y = \"Temperatur in Grad C°\", \n       title = \"Temperaturdaten Schweiz\",\n       subtitle = \"2001 bis 2002\") +    \n  scale_y_continuous(limits = c(-30,30)) +\n  scale_x_datetime(date_breaks = \"3 months\", \n                   date_labels = \"%b\")\n\n\n\n\nMit theme verändert man das allgmeine Layout der Plots. Beispielsweise kann man mit theme_classic() ggplot-Grafiken etwas weniger “Poppig” erscheinen lassen: so sind sie besser für Bachelor- / Masterarbeiten sowie Publikationen geeignet. theme_classic() kann man indiviudell pro Plot anwenden, oder für die aktuelle Session global setzen (s.u.)\nIndividuell pro Plot:\n\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(x = \"Zeit\",\n       y = \"Temperatur in Grad C°\", \n       title = \"Temperaturdaten Schweiz\",\n       subtitle = \"2001 bis 2002\") +    \n  scale_y_continuous(limits = c(-30,30)) +\n  scale_x_datetime(date_breaks = \"3 months\", \n                   date_labels = \"%b\") +\n  theme_classic()\n\n\n\n\nGlobal (für alle nachfolgenden Plots der aktuellen Session):\n\n\ntheme_set(theme_classic())\n\n\n\nSehr praktisch sind auch die Funktionen für “Small multiples”. Dies erreicht man mit facet_wrap() (oder facet_grid(), mehr dazu später). Man muss mit einem Tilde-Symbol “~” nur festlegen, welche Variable für das Aufteilen des Plots in kleinere Subplots verantwortlich sein soll.\n\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(x = \"Zeit\",\n       y = \"Temperatur in Grad C°\", \n       title = \"Temperaturdaten Schweiz\",\n       subtitle = \"2001 bis 2002\") +    \n  scale_y_continuous(limits = c(-30,30)) +\n  scale_x_datetime(date_breaks = \"3 months\", \n                   date_labels = \"%b\") +\n  facet_wrap(station~.)\n\n\n\n\nAuch facet_wrap kann man auf seine Bedürfnisse anpassen. Da wir 24 Stationen haben möchte ich lieber 3 pro Zeile, damit es schön aufgeht. Dies erreiche ich mit ncol = 3.\nZudem brauchen wir die Legende nicht mehr, da der Stationsnamen über jedem Facet steht. Ich setze deshalb theme(legend.position=\"none\")\n\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(x = \"Zeit\",\n       y = \"Temperatur in Grad C°\", \n       title = \"Temperaturdaten Schweiz\",\n       subtitle = \"2001 bis 2002\") +  \n  scale_y_continuous(limits = c(-30,30)) +\n  scale_x_datetime(date_breaks = \"3 months\", \n                   date_labels = \"%b\") +\n  facet_wrap(~station,ncol = 1) +\n  theme(legend.position=\"none\")\n\n\n\n\nGenau wie data.frames und andere Objekte, kann man einen ganzen Plot auch in einer Variabel speichern. Dies kann nützlich sein um einen Plot zu exportieren (als png, jpg usw.) oder sukzessive erweitern wie in diesem Beispiel.\n\n\np <- ggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(x = \"Zeit\",\n       y = \"Temperatur in Grad C°\", \n       title = \"Temperaturdaten Schweiz\",\n       subtitle = \"2001 bis 2002\") +\n  scale_y_continuous(limits = c(-30,30)) +\n  scale_x_datetime(date_breaks = \"3 months\", \n                   date_labels = \"%b\") +\n  facet_wrap(~station,ncol = 1)\n  # ich habe an dieser Stelle theme(legend.position=\"none\") entfernt\n\n\n\nFolgendermassen kann ich den Plot als png-File abspeichern (ohne Angabe von “plot =” wird einfach der letzte Plot gespeichert)\n\n\nggsave(filename = \"plot.png\",plot = p)\n\n\n\n.. und so kann ich einen bestehenden Plot (in einer Variabel) mit einem Layer / einer Option erweitern\n\n\np +\n  theme(legend.position=\"none\")\n\n\n\nWie üblich wurde diese Änderung nicht gespeichert, sondern nur das Resultat davon ausgeben. Wenn die Änderung in meinem Plot (in der Variabel) abspeichern will, muss ich die Variabel überschreiben:\n\n\np <- p +\n  theme(legend.position=\"none\")\n\n\n\nMit geom_smooth() kann ggplot eine Trendlinie auf der Baiss von Punktdaten berechnen. Die zugrunde liegende statistische Methode kann selbst gewählt werden (ohne Angabe verwendet ggplot bei < 1’000 Messungen stats::loess, ansonsten mgcv::gam)\n\n\np <- p +\n  geom_smooth(colour = \"black\")\n\np\n\n\n\n\n\n\n\n",
    "preview": "infovis/InfoVis1-Demo-ggplot/distill-preview.png",
    "last_modified": "2021-10-20T09:07:56+02:00",
    "input_file": "Demo-ggplot.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "infovis/InfoVis1-Uebung/",
    "title": "Übung",
    "description": {},
    "author": [],
    "date": "2021-10-20",
    "categories": [
      "InfoVis1"
    ],
    "contents": "\nIn dieser Übung geht es darum, die Grafiken aus dem Blog-post Kovic (2014) zu rekonstruieren. Schau dir die Grafiken in dem Blogpost durch. Freundlicherweise wurden im Blogbeitrag die ggplot2 Standardeinstellungen benutzt, was die Rekonstruktion relativ einfach macht. Die Links im Text verweisen auf die Originalgrafik, die eingebetteten Plots sind meine eigenen Rekonstruktionen.\nImportiere als erstes den Datensatz initiative_masseneinwanderung_kanton.csv (dieser ist auch auf der Blog-Seite verfügbar).\n\n\n\nAufgabe 1\nRekonstruiere Grafik 1 (Kovic 2014). Erstelle dazu einen Scatterplot wo der Ausländeranteil der Kantone dem Ja-Anteil gegenüber gestellt wird. Speichere den Plot einer Variabel plot1.\nnutze ggplot(kanton, aes(auslanderanteil, ja_anteil)) um den ggplot zu initiieren. Füge danach ein einen Punkte Layer hinzu (geom_point())\nnutze coord_fixed() um die beiden Achsen in ein fixes Verhältnis zu setzen (1:1).\nOptional:\nsetze die Achsen Start- und Endwerte mittels lims() oder scale_y_continuous bzw. scale_x_continuous.\nSetze analog Kovic (2014) die breaks (0.0, 0.1…0.7) manuell\n\nRekonstruktion:\n\n\n\nAufgabe 2\nRekonstruiere Grafik 2. Erweitere dazu plot1 mit einer Trendlinie.\n\n\n\nAufgabe 3\nImportiere die Gemeindedaten initiative_masseneinwanderung_gemeinde.csv. Rekonstruiere danach Grafik 3 indem du den Ausländeranteil aller Gemeinden dem Ja-Stimmen-Anteil gegenüber. Speichere den Plot als plot2\n\n\n\nAufgabe 4\nRekonstruiere Grafik 4 indem plot2 mit einer Trendlinie erweitert wird.\n\n\n\nAufgabe 5\nRekonstruiere Grafik 5 indem plot2 mit facetting erweitert wird. Die Facets sollen die einzelnen Kantone sein. Speichere den Plot als plot3.\n\n\n\nAufgabe 6\nRekonstruiere Grafik 6 indem plot3 mit einer Trendlinie erweitert wird.\nRekonstruktion:\n\n\n\nAufgabe 7\nRekonstruiere Grafik 7 indem plot2mit facetting erweitert wird. Die Facets sollen nun den Grössen-Quantilen entsprechen. Speichere den Plot unter plot4.\nRekonstruktion:\n\n\n\nAufgabe 8\nRekonstruiere Grafik 8 indem plot4 mit einer Trendlinie ausgestattet wird.\n\n\n\nAufgabe 9 (Optional, fortgeschritten)\nRekonstruiere die Korrelationstabelle.\nTipp: - Nutze group_by() und summarise() - Nutze cor.test() um den Korrelationskoeffizienten sowie den p-Wert zu erhalten. - Mit $estimate und $p.value können die entsprechenden Werte direkt angesprochen werden\nHinweis: aus bisher unerklärlichen Gründen weiche gewisse meiner Werte leicht von den Berechnungen aus Kovic (2014) ab.\n\n\n\n\nkanton\nKorr.Koeffizient\nSignifikanz\nAG\n-0.2362552\n***\nAI\n-0.7828022\n-\nAR\n-0.0892817\n-\nBE\n-0.4422003\n***\nBL\n-0.2919712\n**\nBS\n-0.9935385\n-\nFR\n-0.4217634\n***\nGE\n0.3753004\n*\nGL\n-0.4070120\n-\nGR\n-0.0426607\n-\nJU\n-0.2252540\n-\nLU\n-0.3048455\n**\nNE\n-0.5214180\n***\nNW\n-0.2018174\n-\nOW\n-0.4813090\n-\nSG\n-0.2449093\n*\nSH\n-0.2995527\n-\nSO\n-0.0533442\n-\nSZ\n-0.7259276\n***\nTG\n-0.5522862\n***\nTI\n0.1512509\n-\nUR\n-0.3848167\n-\nVD\n-0.2685301\n***\nVS\n-0.1736954\n*\nZG\n0.0407166\n-\nZH\n-0.2744683\n***\n\n\n\n\nKovic, Marko. 2014. “Je Weniger Ausländer, Desto Mehr Ja-Stimmen? Wirklich?” Tagesanzeiger Datenblog. https://blog.tagesanzeiger.ch/datenblog/index.php/668/je-weniger-auslaender-desto-mehr-ja-stimmen-wirklich.\n\n\n\n\n",
    "preview": "infovis/InfoVis1-Uebung/distill-preview.png",
    "last_modified": "2021-10-20T08:50:48+02:00",
    "input_file": "Uebung.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  }
]
