[
  {
    "path": "infovis/InfoVis1_Abstract/",
    "title": "InfoVis1",
    "description": {},
    "author": [],
    "date": "2021-08-18",
    "categories": [
      "InfoVis1",
      "InfoVis"
    ],
    "contents": "\n\n\n\nInfoVis1 (19.10.2020)\nDie konventionelle schliessende Statistik arbeitet in der Regel konfirmatorisch, sprich aus der bestehenden Theorie heraus werden Hypothesen formuliert, welche sodann durch Experimente geprüft und akzeptiert oder verworfen werden. Die Explorative Datenanalyse (EDA) nimmt dazu eine antagonistische Analyseperspektive ein und will in den Daten zunächst Zusammenhänge aufdecken, welche dann wiederum zur Formulierung von prüfbaren Hypothesen führen kann. Die Einheit stellt dazu den klassischen 5-stufigen EDA-Prozess nach Tukey (1980!) vor. Abschliessend wird dann noch die Brücke geschlagen zur modernen Umsetzung der EDA in Form von Visual Analytics.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-08-18T11:08:57+02:00",
    "input_file": {}
  },
  {
    "path": "infovis/InfoVis1_Demo_EDA/",
    "title": "knitr",
    "description": {},
    "author": [],
    "date": "2021-08-18",
    "categories": [
      "InfoVis1",
      "InfoVis"
    ],
    "contents": "\n\n\n\nEDA Beispiel Vorlesung\nDemoscript als Download\n\n\n\n\nlibrary(tidyverse)\nlibrary(scales)\n\n# create some data about age and height of people\npeople <- data.frame(\n  ID = c(1:30),\n  \n  age = c(5.0, 7.0, 6.5 ,9.0, 8.0, 5.0, 8.6, 7.5, 9.0, 6.0,\n          63.5 ,65.7, 57.6, 98.6, 76.5, 78.0, 93.4, 77.5, 256.6, 512.3,\n          15.5, 18.6, 18.5, 22.8, 28.5, 39.5, 55.9, 50.3, 31.9, 41.3),\n  \n  height = c(0.85, 0.93, 1.1, 1.25, 1.33, 1.17, 1.32, 0.82, 0.89, 1.13,\n             1.62, 1.87, 1.67, 1.76, 1.56, 1.71, 1.65, 1.55, 1.87, 1.69,\n             1.49, 1.68, 1.41, 1.55, 1.84, 1.69, 0.85, 1.65, 1.94, 1.80),\n  \n  weight = c(45.5, 54.3, 76.5, 60.4, 43.4, 36.4, 50.3, 27.8, 34.7, 47.6,\n             84.3, 90.4, 76.5, 55.6, 54.3, 83.2, 80.7, 55.6, 87.6, 69.5,\n             48.0, 55.6, 47.6, 60.5, 54.3, 59.5, 34.5, 55.4, 100.4, 110.3)\n)\n\n\n\n# build a scatterplot for a first inspection\nggplot(people, aes(x=age, y=height)) + geom_point() + scale_y_continuous(limits=c(0.75, 2.0))\n\n\n\n\n# Go to help page: http://docs.ggplot2.org/current/ -> Search for icon of fit-line\n# http://docs.ggplot2.org/current/geom_smooth.html\n\n# build a scatterplot for a first inspection, with regression line\nggplot(people, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"loess\", fill='lightblue', size=0.5, alpha=0.5)\n\n\n\n\n?stem\n\n# stem and leaf plot\nstem(people$height)\n\n\n\n  The decimal point is 1 digit(s) to the left of the |\n\n   8 | 25593\n  10 | 037\n  12 | 523\n  14 | 19556\n  16 | 255789916\n  18 | 04774\n\nstem(people$height, scale=2)\n\n\n\n  The decimal point is 1 digit(s) to the left of the |\n\n   8 | 2559\n   9 | 3\n  10 | \n  11 | 037\n  12 | 5\n  13 | 23\n  14 | 19\n  15 | 556\n  16 | 2557899\n  17 | 16\n  18 | 0477\n  19 | 4\n\n\n# explore the two variables with box-whiskerplots\nsummary(people$age)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   5.00    8.70   30.20   59.14   65.15  512.30 \n\nboxplot(people$age)\n\n\n\n\n\nsummary(people$height)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.820   1.190   1.555   1.455   1.690   1.940 \n\nboxplot(people$height)\n\n\n\n\n# boxplot(people$height) why twice the same\n\n\n# explore data with a histgram\nggplot(people, aes(x=age)) + \n  geom_histogram(stat=\"bin\", fill='green', binwidth=20)  \n\n\n\n\ndensity(x = people$height)\n\n\nError in UseMethod(\"density\"): no applicable method for 'density' applied to an object of class \"c('double', 'numeric')\"\n\n\n\n# re-expression: use log or sqrt axes\n#\n# Find here guideline about scaling axes \n# http://www.cookbook-r.com/Graphs/Axes_(ggplot2)/\n# http://docs.ggplot2.org/0.9.3.1/scale_continuous.html\n\n\n# logarithmic axis: respond to skewness in the data, e.g. log10 \nggplot(people, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5) +\n  scale_x_log10()\n\n\n\n\n# logarithmic axis: show multiplicative factors, e.g. log2\nggplot(people, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5) +\n  scale_x_continuous(trans = log2_trans(),\n                   breaks = trans_breaks(\"log2\", function(x) 2^x),\n                   labels = trans_format(\"log2\", math_format(2^.x)))\n\n\n\n\n\n# outliers: Remove very small and very old people\npeopleTemp <- filter(people, ID != 27) # Diese Person war zu klein.\npeopleClean <- filter(peopleTemp, age < 100) # Fehler in der Erhebung des Alters\n\n# re-explore cleaned data with a histogram\nggplot(peopleClean, aes(x=age)) + \n  geom_histogram(stat=\"bin\", fill='#6baed6', binwidth=10)\n\n\n\n\nggplot(peopleClean, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5)\n\n\n\n\n# with custom binwidth\nggplot(peopleClean, aes(x=age)) + \n  geom_histogram(stat=\"bin\", fill='#6baed6', binwidth=10) + \n  theme_bw() # specifying the theme\n\n\n\n\n\n\n# quadratic axis\nggplot(peopleClean, aes(x=age, y=height)) + \n  geom_point() + scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5) + scale_x_sqrt()\n\n\n\n\n\n\n\n# filter \"teenies\": No trend\nkids <- filter(peopleClean, age < 15)\n\nggplot(kids, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5)\n\n\n\n\n# filter \"teenies\": No trend\noldies <- filter(peopleClean, age > 55)\n\nggplot(oldies, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5)\n\n\n\n\n\n# Onwards towards multidimensional data\n\n# Finally, make a scatterplot matrix\npairs(peopleClean[,2:4], panel=panel.smooth)\n\npairs(peopleClean[,2:4], panel=panel.smooth)\n\n\n\n\n# Or as a bubble chart\npeopleClean$radius <- sqrt( peopleClean$weight/ pi )\nsymbols(peopleClean$age, peopleClean$height, circles=peopleClean$radius)\n\nsymbols(peopleClean$age, peopleClean$height, circles=peopleClean$radius)\n\n\n\n\nQuellen\n\n\n\n\n",
    "preview": "infovis/InfoVis1_Demo_EDA/distill-preview.png",
    "last_modified": "2021-08-18T11:09:07+02:00",
    "input_file": {}
  },
  {
    "path": "infovis/InfoVis1_Uebung_loesung/",
    "title": "Loesung",
    "description": {},
    "author": [],
    "date": "2021-08-18",
    "categories": [
      "InfoVis1",
      "InfoVis"
    ],
    "contents": "\n\n\n\nLoesung\nRCode als Download\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-08-18T11:09:09+02:00",
    "input_file": {}
  },
  {
    "path": "infovis/InfoVis1_Uebung/",
    "title": "Uebung",
    "description": {},
    "author": [],
    "date": "2021-08-18",
    "categories": [
      "InfoVis1",
      "InfoVis"
    ],
    "contents": "\n\n\n\nUebung\nIn dieser Übung geht es darum, die Grafiken aus dem Blog-post von Marko Kovic (blog.tagesanzeiger.ch) zu rekonstruieren. Schau dir die Grafiken in dem Blogpost durch. Freundlicherweise hat Herr Kovic meist die ggplot2 Standardeinstellungen benutzt, was die Rekonstruktion relativ einfach macht.\nDie Links im Text verweisen auf die Originalgrafik, die eingebetteten Plots sind meine eigenen Rekonstruktionen. Importiere als erstes den Datensatz initiative_masseneinwanderung_kanton.csv (auf der Blog-Seite erhältlich).\n\nError in library(janitor): there is no package called 'janitor'\n\n\n\n\n\n\nkanton <- read_delim(\"initiative_masseneinwanderung_kanton.csv\",\",\",locale = locale(encoding = \"UTF-8\")) %>%\n  janitor::clean_names() # säubert die Spaltennamen\n\n\nError in loadNamespace(x): there is no package called 'janitor'\n\nAufgabe 1\nRekonstruiere Grafik 1 von Kovic. Erstelle dazu einen Scatterplot wo der Ausländeranteil der Kantone dem Ja-Anteil gegenüber gestellt wird. Speichere den Plot einer Variabel plot1.\nnutze ggplot(kanton, aes(auslanderanteil, ja_anteil)) um den ggplot zu initiieren.Füge danach ein einen Punkte Layer hinzu (geom_point())\nnutze coord_fixed() um die beiden Achsen in ein fixes Verhältnis zu setzen (1:1).\nOptional:\nsetze die Achsen Start- und Endwerte mittels lims() oder scale_y_continuousbzw. scale_x_continuous.\nSetze analog Kovic die breaks (0.0, 0.1…0.7) manuell\n\nRekonstruktion:\n\nError in ggplot(kanton, aes(auslanderanteil, ja_anteil)): object 'kanton' not found\nError in eval(expr, envir, enclos): object 'plot1' not found\n\nAufgabe 2\nRekonstruiere Grafik 2. Erweitere dazu plot1 mit einer Trendlinie.\n\nError in eval(expr, envir, enclos): object 'plot1' not found\n\nAufgabe 3\nImportiere die Gemeindedaten initiative_masseneinwanderung_gemeinde.csv:\n\n\ngemeinde <- read_delim(\"initiative_masseneinwanderung_gemeinde.csv\",\",\",locale = locale(encoding = \"UTF-8\")) %>%\n  janitor::clean_names() # säubert die Spaltennamen\n\n\nError in loadNamespace(x): there is no package called 'janitor'\n\nRekonstruiere Grafik 3. Stelle dazu den Ausländeranteil aller Gemeinden dem Ja-Stimmen-Anteil gegenüber. Speichere den Plot als plot2\n\nError in ggplot(gemeinde, aes(anteil_ausl, anteil_ja)): object 'gemeinde' not found\nError in eval(expr, envir, enclos): object 'plot2' not found\n\nAufgabe 4\nRekonstruiere Grafik 4 indem plot2 mit einer Trendlinie erweitert wird.\n\nError in eval(expr, envir, enclos): object 'plot2' not found\n\nAufgabe 5\nRekonstruiere Grafik 5 indem plot2 mit facetting erweitert wird. Die Facets sollen die einzelnen Kantone sein. Speichere den Plot als plot3.\n\nError in eval(expr, envir, enclos): object 'plot2' not found\nError in eval(expr, envir, enclos): object 'plot3' not found\n\nAufgabe 6\nRekonstruiere Grafik 6 indem plot3 mit einer Trendlinie erweitert wird.\nRekonstruktion:\n\nError in eval(expr, envir, enclos): object 'plot3' not found\n\nAufgabe 7\nRekonstruiere Grafik 7 indem plot2mit facetting erweitert wird. Die Facets sollen nun den Grössen-Quantilen entsprechen. Speichere den Plot unter plot4.\nRekonstruktion:\n\nError in eval(expr, envir, enclos): object 'plot2' not found\nError in eval(expr, envir, enclos): object 'plot4' not found\n\nAufgabe 8\nRekonstruiere Grafik 8 indem plot4 mit einer Trendlinie ausgestattet wird.\n\nError in eval(expr, envir, enclos): object 'plot4' not found\n\nAufgabe 9 (Optional, fortgeschritten)\nRekonstruiere die Korrelationstabelle.\nTipp: - Nutze group_by() und summarise() - Nutze cor.test() um den Korrelationskoeffizienten sowie den p-Wert zu erhalten. - Mit $estimate und $p.value können die entsprechenden Werte direkt angesprochen werden\nHinweis: aus bisher unerklärlichen Gründen weiche gewisse meiner Werte leicht von den Berechnungen des Herrn Kovics ab.\n\nError in select(., -Signifikanz_val): unused argument (-Signifikanz_val)\n\n\nError in knitr::kable(korr_tab): object 'korr_tab' not found\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-08-18T11:09:12+02:00",
    "input_file": {}
  },
  {
    "path": "infovis/InfoVis2_Abstract/",
    "title": "InfoVis2",
    "description": {},
    "author": [],
    "date": "2021-08-18",
    "categories": [
      "InfoVis2",
      "InfoVis"
    ],
    "contents": "\n\n\n\nInfoVis2 (20.10.2020)\nDie Informationsvisualisierung ist eine vielseitige, effektive und effiziente Methode für die explorative Datenanalyse. Während Scatterplots und Histogramme weitherum bekannt sind, bieten weniger bekannte Informationsvisualisierungs-Typen wie etwa Parallelkoordinatenplots, TreeMaps oder Chorddiagramme originelle alternative Darstellungsformen zur visuellen Analyse von Datensätze, welche stets grösser und komplexer werden. Die Studierenden lernen in dieser Lerneinheit eine Reihe von Informationsvisualisierungstypen kennen, lernen diese zielführend zu gestalten und selber zu erstellen.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-08-18T11:09:13+02:00",
    "input_file": {}
  },
  {
    "path": "infovis/InfoVis2_Demo_Debug/",
    "title": "Demo",
    "description": {},
    "author": [],
    "date": "2021-08-18",
    "categories": [
      "InfoVis2",
      "InfoVis"
    ],
    "contents": "\n\n\n\nDemo Debuggin Tipps\n\n\nlibrary(tidyverse)\nlibrary(lubridate)\n\nwetter <- read_table(\"order_52252_data.txt\",\n                     col_types = list(\n                       col_character(),    \n                       col_datetime(format = \"%Y%m%d%H\"),\n                       col_double()\n                       )\n                     )\n\n\nwetter_fil <- wetter %>%\n  mutate(\n    year = year(time),\n    month = month(time)\n  ) %>%\n  filter(year == 2000 & month == 1)\n\n# Datensatz: \"wetter_fil\" | Beeinflussende Variabeln: \"time\" und \"tre200h0\"\n\n\n\n1 Einzelne Zeilen ausführen (Selektieren > run) 2 Einzelne Zeilen ein/auskommentieren: - von Hand - mit Code > Comment/Uncomment line 3 Auf Automatische Formatierung achten: Doppeltes \"\" macht den Rest grün… 4 Errorwarnungen (x) auf Zeilen-Nummer genau lesen 5 Synthax von ?scale_y_continuous() prüfen, was ist die Funktion, was ist das Argument, Bsp. anschauen 6. Synthax auch im Netz noch prüfen, dann sogar über die Bildsuche, und zurück zur entsprechenden Webseite…\n\n\n ggplot(wetter_fil, aes(time,tre200h0, colour = stn)) +\n  geom_point() +\n   geom_line() +\n   labs(x = \"Woche\",\n        y = \"Temperatur in Grad C°\", \n        title = \"Temperaturdaten Schweiz\",\n      subtitle = \"Januar 2000\") \n\n\n\n  #scale_y_continuous(limit = c(\"-30\",\"30\")) \n  #scale_x_datetime(date_breaks = \"1 week\", date_minor_breaks = \"1 day\", date_labels = \"KW%W\") +\n  #facet_wrap(~stn,ncol = 3) +\n  #theme(legend.position=\"none\")\n\n\n\n# ggplot(wetter_fil, aes(time,tre200h0, colour = stn)) +\n#   geom_point() +\n#   geom_line() +\n#   labs(x = \"Woche\",\n#        y = \"Temperatur in Grad C°\",\n#        title = \"Temperaturdaten Schweiz\",\n#        subtitle = \"Januar 2000\") +\n#   scale_y_continuous(limits = c(-30,30)) +\n#   scale_x_datetime(date_breaks = \"1 week\", date_minor_breaks = \"1 day\", date_labels = \"KW%W\") +\n#   facet_wrap(~stn,ncol = 3) +\n#   theme(legend.position=\"none\")\n\n\n\n\n\n\n",
    "preview": "infovis/InfoVis2_Demo_Debug/distill-preview.png",
    "last_modified": "2021-08-18T11:09:20+02:00",
    "input_file": {}
  },
  {
    "path": "infovis/InfoVis2_Uebung_A_loesung/",
    "title": "Uebung",
    "description": {},
    "author": [],
    "date": "2021-08-18",
    "categories": [
      "InfoVis2",
      "InfoVis"
    ],
    "contents": "\n\n\n\nUebung A: Loesung\nRCode als Download\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-08-18T11:09:22+02:00",
    "input_file": {}
  },
  {
    "path": "infovis/InfoVis2_Uebung_A/",
    "title": "knitr",
    "description": {},
    "author": [],
    "date": "2021-08-18",
    "categories": [
      "InfoVis2",
      "InfoVis"
    ],
    "contents": "\n\n\n\nUebung A\n\n\nlibrary(tidyverse)\nlibrary(lubridate)\n\n\n\nLaden den wetter-Datensatz, bereinige ihn wenn nötig (NA-Werte entfernen) und importiere auch den Datensatz order_52252_legend.csv und verbinde die Datensätze mit einem join via dem Stationskürzel.\n\n\n\nwetter <- read_table(\"order_52252_data.txt\",\n                     col_types = list(\n                       col_character(),    \n                       col_datetime(format = \"%Y%m%d%H\"),\n                       col_double()\n                       )\n                     )\n\nwetter <- wetter %>%\n  filter(!is.na(stn)) %>%\n  filter(!is.na(time))\n\nstation_meta <- read_delim(\"order_52252_legend.csv\",\";\")\n\nwetter <- left_join(wetter,station_meta,by = \"stn\")\n\n\n\nAufgabe 1\nErstelle zwei Hilfsspalten (convenience variables) “Jahr” und “Monat”. Filtere auf ein beliebiges Jahr und zwei beliebige Monate. Speichere den gefilterten Datensatz in einer neuen Variablen ab. Verwende diesen Datensatz für alle folgenden Übungen.\n\n\n\nAufgabe 2\nErstelle ein Scatterplot (time vs. tre200h0) wobei die Punkte aufgrund ihrer Meereshöhe eingefärbt werden sollen. Tiefe Werte sollen dabei blau eingefärbt werden und hohe Werte rot. Verkleinere die Punkte um übermässiges Überplotten der Punkten zu vermeiden. Weiter sollen im Abstand von zwei Wochen die Kalenderwochen auf der Achse erscheinen.\nSpeichere den Plot in einer Variabel p ab.\n\n\n\nAufgabe 3\nFüge am obigen Plot (gespeichert als Variabel p) eine schwarze, gestrichelte Trendlinie hinzu und aktualisiere p (p <- p + ...).\n\n\n\nAufgabe 4\nPositioniere die Legende oberhalb des Plots und lege sie quer (nutze dazu theme() mit legend.direction und legend.position). Speichere diese Änderungen in p.\n\n\n\nAufgabe 5 (optional, fortgeschritten)\nFüge den Temperaturwerten auf der y-Ache ein °C hinzu (siehe unten und studiere diesen Tipp zur Hilfe). Speichere den plot in p2.\n\n\n\nAufgabe 6 (optional, fortgeschritten)\nFüge dem Plot eine zweite, korrekt ausgerichtete Achse mit Kelvin oder Farenheit hinzu (siehe sec_axis). Wenn du es vorherigen Übung schon geschafft hast, setze auch hier die Einheit (K oder °F) hinter die Werte auf der Achse.\n\\[ K = °C + 273,15\\] \\[°F = °C × \\frac{9}{5} + 32\\]\n\n\n\nAufgabe 7\nJetzt verlassen wir den scatterplot und machen einen Boxplot mit den Temperaturdaten. Färbe die Boxplots wieder in Abhängigkeit der Meereshöhe ein.\nBeachte den Unterschied zwischen colour = und fill =\nBeachte den Unterschied zwischen facet_wrap() und facet_grid()\nfacet_grid() braucht übrigens noch einen Punkt (.) zur Tilde (~).\nBeachte den Unterschied zwischen “.~” und “~.” bei facet_grid()\nverschiebe nach Bedarf die Legende\n\nError: Problem with `mutate()` column `monat`.\nℹ `monat = month(time, label = T, abbr = F)`.\nx unused arguments (label = T, abbr = F)\nError: At least one layer must contain all faceting variables: `monat`.\n* Plot is missing `monat`\n* Layer 1 is missing `monat`\n\n\nAufgabe 8\nTeile die Stationen in verschiedene Höhenlagen ein (Tieflage [< 450 m], Mittellage [450 - 1000 m] und Hochlage [> 1’000 m]). Vergleiche die Verteilung der Temperaturwerte in den verschiedenen Lagen.\nNutze dazu facet_grid um die Höhenlage dem Monat gegenüber zu stellen (Monat~Lage)\nPasse scales = an damit keine leeren Stellen auf der x-Achse entstehen\nOptional: Verwende den vollen Stationsnamen anstelle des Kürzels und drehe diese ab damit sie sich gegenseitig nicht überschreiben\n\nError: At least one layer must contain all faceting variables: `monat`.\n* Plot is missing `monat`\n* Layer 1 is missing `monat`\n\n\nAufgabe 9\nAls letzter wichtiger Plottyp noch zwei Übungen zum Histogramm. Erstelle ein Histogramm geom_histogram() mit den Temperaturwerten. Färbe Säulen aufgrund ihrer Höhenlage ein und die Begrenzungslinie weiss. Setze die Klassenbreite auf 1 Grad.\n\n\n\nAufgabe 10\nErstelle facets aufgrund der Höhenlage. Setze noch eine Vertikale linie beim Nullpunkt und stelle den x-Achsenabschnit symmetrisch ein (z.B -30 bis + 30°C).\n\n\n\n\n\n\n",
    "preview": "infovis/InfoVis2_Uebung_A/distill-preview.png",
    "last_modified": "2021-08-18T11:09:41+02:00",
    "input_file": {}
  },
  {
    "path": "infovis/InfoVis2_Uebung_B_loesung/",
    "title": "Uebung",
    "description": {},
    "author": [],
    "date": "2021-08-18",
    "categories": [
      "InfoVis2",
      "InfoVis"
    ],
    "contents": "\n\n\n\nUebung B: Loesung\nRCode als Download\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-08-18T11:09:45+02:00",
    "input_file": {}
  },
  {
    "path": "infovis/InfoVis2_Uebung_B/",
    "title": "knitr",
    "description": {},
    "author": [],
    "date": "2021-08-18",
    "categories": [
      "InfoVis2",
      "InfoVis"
    ],
    "contents": "\n\n\n\nUebung B (Optional)\nIn dieser Übung bauen wir einige etwas unübliche Plots aus der Vorlesung nach. Dafür verwenden wir Datensätze, die in R bereits integriert sind. Eine Liste dieser Datensätze findet man hier oder mit der Hilfe ?datasets.\nDazu verwenden wir vor allem das Package plotly welches im Gegensatz zu ggplot2 ein paar zusätzliche Plot-Typen kennt und zudem noch interaktiv ist. Leider scheinen gewisse Browsers (z.B. Firefox) sowie der Viewer Pane mit plotly Mühe zu haben. Deshalb empfehlen wir folgendes:\nÜbungsunterlagen für InfoVis2 in Chrome zu öffnen\nFalls ihr auf dem RStudio Server arbeitet: hier ebenfalls in Chrome arbeiten\nFalls ihr lokal mit RStudio arbeitet: Mit der Option options(viewer=NULL) werden Plots mit dem Standart Browser.\n\nError in library(plotly): there is no package called 'plotly'\nError in library(pander): there is no package called 'pander'\nError in library(webshot): there is no package called 'webshot'\n\n\n\n\nAufgabe 1: Parallel coordinate plots\nErstelle einen parallel coordinate plot. Dafür eignet sich der integrierte Datensatz mtcars:\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\n# Nur nötig, wenn ihr mit einer lokalen Installation von RStudio arbeitet\n# (also nicht auf dem Server).\noptions(viewer=NULL)\n\n\n\n\nParallel Coordinates lassen sich mit nativem ggplot2 nicht herstellen. Es braucht dazu entweder Erweiterungen oder “standalone” Tools. Als “standalone” Tool kann ich plotly stark empfehlen. Plotly verfügt zwar über eine etwas eigenwillige Syntax, bietet dafür über sehr vielseitige zusätzliche Möglichkeiten. Vor allem aber sind sämtliche plotly Grafiken webbasiert und interaktiv.\nHier findet ihr eine Anleitung zur Herstellung eines Parallel Coordinates Plot mit plotly: https://plot.ly/r/parallel-coordinates-plot/\nSo sieht der fertige Plot aus:\n\nError in plot_ly(., type = \"parcoords\", line = list(color = ~mpg, colorscale = list(c(0, : could not find function \"plot_ly\"\n\n\nError in eval(expr, envir, enclos): object 'p' not found\n\nAufgabe 2: Polar Plot mit Biber Daten\nPolar Plots (welche man ebenfalls mit Plotly erstellen kann) eignen sich unter anderem für Daten, die zyklischer Natur sind, wie zum Beispiel zeitlich geprägte Daten (Tages-, Wochen-, oder Jahresrhythmen). Aus den Beispiels-Datensätzen habe ich zwei Datensätze gefunden, die zeitlich geprägt sind:\nbeaver1 und beaver2 AirPassenger\nBeide Datensätze müssen noch etwas umgeformt werden, bevor wir sie für einen Radialplot verwenden können. In Aufgabe 2 verwenden wir die Biber-Datensätze, in der nächsten Aufgabe (3) die Passagier-Daten.\nWenn wir die Daten von beiden Bibern verwenden wollen, müssen wir diese noch zusammenfügen:\n\n\n\n\nbeaver1_new <- beaver1 %>%\n  mutate(beaver = \"nr1\")\n\nbeaver2_new <- beaver2 %>%\n  mutate(beaver = \"nr2\")\n\nbeaver_new <- rbind(beaver1_new,beaver2_new)\n\n\n\nZudem müssen wir die Zeitangabe noch anpassen: Gemäss der Datenbeschreibung handelt es sich bei der Zeitangabe um ein sehr programmier-unfreundliches Format. 3:30 wird als “0330” notiert. Wir müssen diese Zeitangabe, noch in ein Dezimalsystem umwandeln:\n\n\nbeaver_new <- beaver_new %>%\n  mutate(\n    hour_dec = (time/100)%/%1,         # Ganze Stunden (mittels ganzzaliger Division)\n    min_dec = (time/100)%%1/0.6,       # Dezimalminuten (15 min wird zu 0.25, via Modulo)\n    hour_min_dec = hour_dec+min_dec    # Dezimal-Zeitangabe (03:30 wird zu 3.5)\n    ) \n\n\n\nDer Datensatz:\n\nday\ntime\ntemp\nactiv\nbeaver\nhour_dec\nmin_dec\nhour_min_dec\n346\n840\n36.33\n0\nnr1\n8\n0.6666667\n8.666667\n346\n850\n36.34\n0\nnr1\n8\n0.8333333\n8.833333\n346\n900\n36.35\n0\nnr1\n9\n0.0000000\n9.000000\n346\n910\n36.42\n0\nnr1\n9\n0.1666667\n9.166667\n346\n920\n36.55\n0\nnr1\n9\n0.3333333\n9.333333\n346\n930\n36.69\n0\nnr1\n9\n0.5000000\n9.500000\n\nSo sieht der fertige Plot aus. Rekonstruiere dies mit plotly:\n\nError in layout(., radialaxis = list(range = c(35, 39)), angularaxis = list(range = c(0, : unused arguments (radialaxis = list(range = c(35, 39)), angularaxis = list(range = c(0, 24)), orientation = 270, showlegend = F)\n\n\nError in eval(expr, envir, enclos): object 'p' not found\n\nAufgabe 3: Polar Plot mit Passagier-Daten\nAnalog Aufgabe 2, dieses Mal mit dem Datensatz AirPassanger\nAirPassengers kommt in einem Format daher, das ich selbst noch gar nicht kannte. Es sieht zwar aus wie ein data.frame oder eine matrix, ist aber von der Klasse ts.\n\n\nAirPassengers\n\n\n     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n1949 112 118 132 129 121 135 148 148 136 119 104 118\n1950 115 126 141 135 125 149 170 170 158 133 114 140\n1951 145 150 178 163 172 178 199 199 184 162 146 166\n1952 171 180 193 181 183 218 230 242 209 191 172 194\n1953 196 196 236 235 229 243 264 272 237 211 180 201\n1954 204 188 235 227 234 264 302 293 259 229 203 229\n1955 242 233 267 269 270 315 364 347 312 274 237 278\n1956 284 277 317 313 318 374 413 405 355 306 271 306\n1957 315 301 356 348 355 422 465 467 404 347 305 336\n1958 340 318 362 348 363 435 491 505 404 359 310 337\n1959 360 342 406 396 420 472 548 559 463 407 362 405\n1960 417 391 419 461 472 535 622 606 508 461 390 432\n\n\nclass(AirPassengers)\n\n\n[1] \"ts\"\n\nDamit wir den Datensatz verwenden können, müssen wir ihn zuerst in eine matrix umwandeln. Wie das geht habe ich hier erfahren.\n\n\nAirPassengers2 <- tapply(AirPassengers, list(year = floor(time(AirPassengers)), month = month.abb[cycle(AirPassengers)]), c)\n\n\n\nAus der matrix muss noch ein Dataframe her, zudem müssen wir aus der breiten Tabelle eine lange Tabelle machen:\n\n\n\n\nAirPassengers3 <- AirPassengers2 %>%\n  as.data.frame() %>%\n  rownames_to_column(\"year\") %>%\n  gather(month,n,-year) %>%\n  mutate(\n    # ich nutze einen billigen Trick um ausgeschriebene Monate in Nummern umzuwandeln [1]\n    month = factor(month, levels = month.abb,ordered = T),\n    month_numb = as.integer(month),\n    year = factor(year, ordered = T)\n  )\n\n\n# [1] beachtet an dieser Stelle das Verhalten von as.integer() wenn es sich um factors() handelt. Hier wird das Verhalten genutzt, andersweitig kann es einem zum Verhngnis werden. Das Verhalten wir auch hier verdeutlicht:\n# as.integer(as.character(\"500\"))\n# as.integer(as.factor(\"500\"))\n\n\n\nHier der fertige Plot. Rekonstruiere dies mit plotly:\n\nError in layout(., showlegend = T, angularaxis = list(range = c(0, 12)), : unused arguments (showlegend = T, angularaxis = list(range = c(0, 12)), orientation = 270, legend = list(traceorder = \"reversed\"))\n\n\nError in eval(expr, envir, enclos): object 'p' not found\n\nAufgabe 4: 3D Scatterplot\nErstelle einen 3D Scatterplot, ebenfalls mit plotly. Nutze dazu den Datensatz trees. Ein Beispiel für einen 3D Scatterplot findet ihr hier.\n\nError in plot_ly(., x = ~Girth, y = ~Height, z = ~Volume): could not find function \"plot_ly\"\n\n\nError in eval(expr, envir, enclos): object 'p' not found\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-08-18T11:09:47+02:00",
    "input_file": {}
  }
]
