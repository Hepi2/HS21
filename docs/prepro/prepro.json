[
  {
    "path": "prepro/PrePro1_Demo_Datentypen/",
    "title": "Demo Datentypen",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-08-26",
    "categories": [
      "PrePro1",
      "PrePro"
    ],
    "contents": "\r\n\r\nContents\r\nDatentypen\r\nData Frames und Conveniance Variabeln\r\n\r\n\r\n\r\n\r\nR-Code als Download\r\nDatentypen\r\nNumerics\r\nUnter die Kategorie numeric fallen in R zwei Datentypen:\r\ndouble: Gleitkommazahl (z.B. 10.3, 7.3)\r\ninteger: Ganzzahl (z.B. 10, 7)\r\nDoubles\r\nFolgendermassen wird eine Gleitkommazahl einer Variabel zuweisen:\r\n\r\n\r\nx <- 10.3\r\n\r\nx\r\n\r\n\r\n[1] 10.3\r\n\r\ntypeof(x)\r\n\r\n\r\n[1] \"double\"\r\n\r\nStatt <-kann auch = verwendet werden. Dies funktioniert aber nicht in allen Situationen, und ist zudem leicht mit == zu verwechseln.\r\n\r\n\r\ny = 7.3\r\n\r\ny\r\n\r\n\r\n[1] 7.3\r\n\r\nOhne explizite Zuweisung nimmt R immer den Datentyp doublean:\r\n\r\n\r\nz <- 42\r\ntypeof(z)\r\n\r\n\r\n[1] \"double\"\r\n\r\nis.integer(z)\r\n\r\n\r\n[1] FALSE\r\n\r\nis.numeric(z)\r\n\r\n\r\n[1] TRUE\r\n\r\nis.double(z)\r\n\r\n\r\n[1] TRUE\r\n\r\nGanzzahl / Integer\r\nErst wenn man eine Zahl explizit als integer definiert (mit as.integer() oder L), wird sie auch als solches abgespeichert.\r\n\r\n\r\na <- as.integer(z)\r\nis.numeric(a)\r\n\r\n\r\n[1] TRUE\r\n\r\nis.integer(a)\r\n\r\n\r\n[1] TRUE\r\n\r\nc <- 8L\r\nis.numeric(c)\r\n\r\n\r\n[1] TRUE\r\n\r\nis.integer(c)\r\n\r\n\r\n[1] TRUE\r\n\r\n\r\n\r\ntypeof(a)\r\n\r\n\r\n[1] \"integer\"\r\n\r\nis.numeric(a)\r\n\r\n\r\n[1] TRUE\r\n\r\nis.integer(a)\r\n\r\n\r\n[1] TRUE\r\n\r\nMit c() können eine Reihe von Werten in einer Variabel zugewiesen werden (als vector). Es gibt zudem auch character vectors.\r\n\r\n\r\nvector <- c(10,20,33,42,54,66,77)\r\nvector\r\n\r\n\r\n[1] 10 20 33 42 54 66 77\r\n\r\nvector[5]\r\n\r\n\r\n[1] 54\r\n\r\nvector[2:4]\r\n\r\n\r\n[1] 20 33 42\r\n\r\nvector2 <- vector[2:4]\r\n\r\n\r\n\r\nEine Ganzzahl kann explizit mit as.integer() definiert werden.\r\n\r\n\r\na <- as.integer(7)\r\nb <- as.integer(3.14)\r\na\r\n\r\n\r\n[1] 7\r\n\r\nb\r\n\r\n\r\n[1] 3\r\n\r\ntypeof(a)\r\n\r\n\r\n[1] \"integer\"\r\n\r\ntypeof(b)\r\n\r\n\r\n[1] \"integer\"\r\n\r\nis.integer(a)\r\n\r\n\r\n[1] TRUE\r\n\r\nis.integer(b)\r\n\r\n\r\n[1] TRUE\r\n\r\nEine Zeichenkette kann als Zahl eingelesen werden.\r\n\r\n\r\nc <- as.integer(\"3.14\")\r\nc\r\n\r\n\r\n[1] 3\r\n\r\ntypeof(c)\r\n\r\n\r\n[1] \"integer\"\r\n\r\nLogische Abfragen\r\nWird auch auch als boolesch (Eng. boolean) bezeichnet.\r\n\r\n\r\ne <- 3\r\nf <- 6\r\ng <- e > f\r\ne\r\n\r\n\r\n[1] 3\r\n\r\nf\r\n\r\n\r\n[1] 6\r\n\r\ng\r\n\r\n\r\n[1] FALSE\r\n\r\ntypeof(g)\r\n\r\n\r\n[1] \"logical\"\r\n\r\nLogische Operationen\r\n\r\n\r\nsonnig <- TRUE\r\ntrocken <- FALSE\r\n\r\nsonnig & !trocken\r\n\r\n\r\n[1] TRUE\r\n\r\nOft braucht man auch das Gegenteil / die Negation eines Wertes. Dies wird mittels ! erreicht\r\n\r\n\r\nu <- TRUE\r\nv <- !u \r\nv\r\n\r\n\r\n[1] FALSE\r\n\r\nZeichenketten\r\nZeichenketten (Eng. character) stellen Text dar\r\n\r\n\r\ns <- as.character(3.14)\r\ns\r\n\r\n\r\n[1] \"3.14\"\r\n\r\ntypeof(s)\r\n\r\n\r\n[1] \"character\"\r\n\r\nZeichenketten verbinden / zusammenfügen (Eng. concatenate)\r\n\r\n\r\nfname <- \"Hans\"\r\nlname <- \"Muster\"\r\npaste(fname,lname)\r\n\r\n\r\n[1] \"Hans Muster\"\r\n\r\nfname2 <- \"hans\"\r\nfname == fname2\r\n\r\n\r\n[1] FALSE\r\n\r\nFactors\r\nMit Factors wird in R eine Sammlung von Zeichenketten bezeichnet, die sich wiederholen, z.B. Wochentage (es gibt nur 7 unterschiedliche Werte für “Wochentage”).\r\n\r\n\r\nwochentage <- c(\"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\",\"Sonntag\",\r\n                \"Montag\",\"Dienstag\",\"Mittwoch\",\"Donnerstag\",\"Freitag\",\"Samstag\",\"Sonntag\")\r\n\r\ntypeof(wochentage)\r\n\r\n\r\n[1] \"character\"\r\n\r\nwochentage_fac <- as.factor(wochentage)\r\n\r\nwochentage\r\n\r\n\r\n [1] \"Montag\"     \"Dienstag\"   \"Mittwoch\"   \"Donnerstag\" \"Freitag\"   \r\n [6] \"Samstag\"    \"Sonntag\"    \"Montag\"     \"Dienstag\"   \"Mittwoch\"  \r\n[11] \"Donnerstag\" \"Freitag\"    \"Samstag\"    \"Sonntag\"   \r\n\r\nwochentage_fac\r\n\r\n\r\n [1] Montag     Dienstag   Mittwoch   Donnerstag Freitag    Samstag   \r\n [7] Sonntag    Montag     Dienstag   Mittwoch   Donnerstag Freitag   \r\n[13] Samstag    Sonntag   \r\n7 Levels: Dienstag Donnerstag Freitag Mittwoch Montag ... Sonntag\r\n\r\nWie man oben sieht, unterscheiden sich character vectors und factors v.a. dadurch, dass letztere über sogenannte levels verfügt. Diese levels entsprechen den Eindeutigen (unique) Werten.\r\n\r\n\r\nlevels(wochentage_fac)\r\n\r\n\r\n[1] \"Dienstag\"   \"Donnerstag\" \"Freitag\"    \"Mittwoch\"   \"Montag\"    \r\n[6] \"Samstag\"    \"Sonntag\"   \r\n\r\nunique(wochentage)\r\n\r\n\r\n[1] \"Montag\"     \"Dienstag\"   \"Mittwoch\"   \"Donnerstag\" \"Freitag\"   \r\n[6] \"Samstag\"    \"Sonntag\"   \r\n\r\nZudem ist fällt auf, dass die Reihenfolge der Wohentag alphabetisch sortiert ist. Wie diese sortiert werden zeigen wir an einem anderen Beispiel:\r\n\r\n\r\nzahlen <- factor(c(\"null\",\"eins\",\"zwei\",\"drei\"))\r\n\r\nzahlen\r\n\r\n\r\n[1] null eins zwei drei\r\nLevels: drei eins null zwei\r\n\r\nOffensichtlich sollten diese factors geordnet sein, R weiss davon aber nichts. Eine Ordnung kann man mit dem Befehl ordered = T festlegen.\r\nBeachtet: ordered = T kann nur bei der Funktion factor() spezifiziert werden, nicht bei as.factor(). Ansonsten sind factor() und as.factor() sehr ähnlich.\r\n\r\n\r\nzahlen <- factor(zahlen,ordered = T)\r\n\r\nzahlen\r\n\r\n\r\n[1] null eins zwei drei\r\nLevels: drei < eins < null < zwei\r\n\r\nBeachtet das “<”-Zeichen zwischen den Levels. Die Zahlen werden nicht in der korrekten Reihenfolge, sondern Alphabetisch geordnet. Die richtige Reihenfolge kann man mit levels = festlegen.\r\n\r\n\r\nzahlen <- factor(zahlen,ordered = T,levels = c(\"null\",\"eins\",\"zwei\",\"drei\",\"vier\"))\r\n\r\nzahlen\r\n\r\n\r\n[1] null eins zwei drei\r\nLevels: null < eins < zwei < drei < vier\r\n\r\nWie auch schon erwähnt werden factors als character Vektor dargestellt, aber als Integers gespeichert. Das führt zu einem scheinbaren Wiederspruch wenn man den Datentyp auf unterschiedliche Weise abfragt.\r\n\r\n\r\ntypeof(zahlen)\r\n\r\n\r\n[1] \"integer\"\r\n\r\nis.integer(zahlen)\r\n\r\n\r\n[1] FALSE\r\n\r\nMit typeof() wird eben diese Form der Speicherung abgefragt und deshalb mit integer beantwortet. Da es sich aber nicht um einen eigentlichen Integer Vektor handelt, wird die Frage is.integer() mit FALSE beantwortet. Das ist etwas verwirrend, beruht aber darauf, dass die beiden Funktionen die Frage von unterschiedlichen Perspektiven beantworten. In diesem Fall schafft class() Klarheit:\r\n\r\n\r\nclass(zahlen)\r\n\r\n\r\n[1] \"ordered\" \"factor\" \r\n\r\nWirklich verwirrend wird es, wenn factors in numeric umgewandelt werden sollen.\r\n\r\n\r\nzahlen\r\n\r\n\r\n[1] null eins zwei drei\r\nLevels: null < eins < zwei < drei < vier\r\n\r\nas.integer(zahlen)\r\n\r\n\r\n[1] 1 2 3 4\r\n\r\nDas die Übersetzung der auf Deutsch ausgeschriebenen Nummern in nummerische Zahlen nicht funktionieren würde, war ja klar. Weniger klar ist es jedoch, wenn die factors bereits aus nummerischen Zahlen bestehen.\r\n\r\n\r\nzahlen2 <- factor(c(\"3\",\"2\",\"1\",\"0\"))\r\n\r\nas.integer(zahlen2)\r\n\r\n\r\n[1] 4 3 2 1\r\n\r\nIn diesem Fall müssen die factors erstmals in character umgewandelt werden.\r\n\r\n\r\nzahlen2 <- factor(c(\"3\",\"2\",\"1\",\"0\"))\r\n\r\nas.integer(as.character(zahlen2))\r\n\r\n\r\n[1] 3 2 1 0\r\n\r\nZeit/Datum\r\nUm in R mit Datum/Zeit Datentypen umzugehen, müssen sie als POSIXct eingelesen werden (es gibt alternativ noch POSIXlt, aber diese ignorieren wir mal). Anders als Beispielsweise bei Excel, sollten in R Datum und Uhrzeit immer in einer Spalte gespeichert werden.\r\n\r\n\r\ndatum <- \"2017-10-01 13:45:10\"\r\n\r\nas.POSIXct(datum)\r\n\r\n\r\n[1] \"2017-10-01 13:45:10 CEST\"\r\n\r\nWenn das die Zeichenkette in dem obigen Format (Jahr-Monat-Tag Stunde:Minute:Sekunde) daher kommt, braucht as.POSIXctkeine weiteren Informationen. Sollte das Format von dem aber Abweichen, muss man der Funktion das genaue Schema jedoch mitteilen. Der Syntax dafür kann via ?strptime nachgeschlagen werden.\r\n\r\n\r\ndatum <- \"01.10.2017 13:45\"\r\n\r\nas.POSIXct(datum,format = \"%d.%m.%Y %H:%M\")\r\n\r\n\r\n[1] \"2017-10-01 13:45:00 CEST\"\r\n\r\ndatum <- as.POSIXct(datum,format = \"%d.%m.%Y %H:%M\")\r\n\r\n\r\n\r\nBeachtet, dass in den den obigen Beispiel R automatisch eine Zeitzone angenommen hat (CEST). R geht davon aus, dass die Zeitzone der System Timezone (Sys.timezone()) entspricht.\r\n\r\n\r\nstrftime(datum, format = \"%m\")\r\n\r\n\r\n[1] \"10\"\r\n\r\nstrftime(datum, format = \"%b\")\r\n\r\n\r\n[1] \"Okt\"\r\n\r\nstrftime(datum, format = \"%B\")\r\n\r\n\r\n[1] \"Oktober\"\r\n\r\nData Frames und Conveniance Variabeln\r\nEine data.frame ist die gängigste Art, Tabellarische Daten zu speichern.\r\n\r\n\r\ndf <- data.frame(\r\n  Stadt = c(\"Zürich\",\"Genf\",\"Basel\",\"Bern\",\"Lausanne\"),\r\n  Einwohner = c(396027,194565,175131,140634,135629),\r\n  Ankunft = c(\"1.1.2017 10:00\",\"1.1.2017 14:00\",\r\n              \"1.1.2017 13:00\",\"1.1.2017 18:00\",\"1.1.2017 21:00\")\r\n)\r\n\r\nstr(df)\r\n\r\n\r\n'data.frame':   5 obs. of  3 variables:\r\n $ Stadt    : chr  \"Zürich\" \"Genf\" \"Basel\" \"Bern\" ...\r\n $ Einwohner: num  396027 194565 175131 140634 135629\r\n $ Ankunft  : chr  \"1.1.2017 10:00\" \"1.1.2017 14:00\" \"1.1.2017 13:00\" \"1.1.2017 18:00\" ...\r\n\r\nIn der obigen data.frame wurde die Spalte Einwohner als Fliesskommazahl abgespeichert. Dies ist zwar nicht tragisch, aber da wir wissen das es sich hier sicher um Ganzzahlen handelt, können wir das korrigieren. Wichtiger ist aber, dass wir die Ankunftszeit (SpalteAnkunft) von einem Factor in ein Zeitformat (POSIXct) umwandeln.\r\n\r\n\r\ndf$Einwohner <- as.integer(df$Einwohner)\r\n\r\ndf$Einwohner\r\n\r\n\r\n[1] 396027 194565 175131 140634 135629\r\n\r\ndf$Ankunft <- as.POSIXct(df$Ankunft, format = \"%d.%m.%Y %H:%M\")\r\n\r\ndf$Ankunft\r\n\r\n\r\n[1] \"2017-01-01 10:00:00 CET\" \"2017-01-01 14:00:00 CET\"\r\n[3] \"2017-01-01 13:00:00 CET\" \"2017-01-01 18:00:00 CET\"\r\n[5] \"2017-01-01 21:00:00 CET\"\r\n\r\nDiese Rohdaten können nun helfen, um Hilfsvariablen (convenience variables) zu erstellen. Z.B. können wir die Städte einteilen in gross, mittel und klein.\r\n\r\n\r\ndf$Groesse[df$Einwohner > 300000] <- \"gross\"\r\ndf$Groesse[df$Einwohner <= 300000 & df$Einwohner > 150000] <- \"mittel\"\r\ndf$Groesse[df$Einwohner <= 150000] <- \"klein\"\r\n\r\n\r\n\r\nOder aber, die Ankunftszeit kann von der Spalte Ankunftabgeleitet werden. Dazu brauchen wir aber das Package lubridate\r\n\r\n\r\nlibrary(lubridate)\r\n\r\n\r\n\r\n\r\n\r\ndf$Ankunft_stunde <- hour(df$Ankunft)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-09-01T09:14:51+02:00",
    "input_file": {}
  },
  {
    "path": "prepro/PrePro1_Uebung_A/",
    "title": "Uebung A",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-08-19",
    "categories": [
      "PrePro1",
      "PrePro"
    ],
    "contents": "\r\n\r\nContents\r\nArbeiten mit RStudio “Project”\r\nArbeiten mit Libraries / Packages\r\nAufgabe 1\r\nAufgabe 2\r\nAufgabe 3\r\nAufgabe 4\r\nAufgabe 5\r\nAufgabe 6\r\nAufgabe 7\r\nAufgabe 8\r\n\r\nArbeiten mit RStudio “Project”\r\nWir empfehlen die Verwendung von “Projects” innerhalb von RStudio. RStudio legt für jedes Projekt dann einen Ordner an, in welches die Projekt-Datei abgelegt wird (Dateiendung .Rproj). Sollen innerhalb des Projekts dann R-Skripts geladen oder erzeugt werden, werden diese dann auch im angelegten Ordner abgelegt. Mehr zu RStudio Projects findet ihr hier.\r\nDas Verwenden von Projects bringt verschiedene Vorteile, wie zum Beispiel:\r\nFestlegen der Working Directory ohne die Verwendung des expliziten Pfades (setwd()). Das ist sinnvoll, da sich dieser Pfad ändern kann (Zusammenarbeit mit anderen Usern, Ausführung des Scripts zu einem späteren Zeitpunkt)\r\nAutomatisches Zwischenspeichern geöffneter Scripts und Wiederherstellung der geöffneten Scripts bei der nächsten Session\r\nFestlegen verschiedener projektspezifischer Optionen\r\nVerwendung von Versionsverwaltungssystemen (git oder SVN)\r\nArbeiten mit Libraries / Packages\r\nR ist ohne Zusatzpackete nicht mehr denkbar. Die allermeisten Packages werden auf CRAN gehostet und können leicht mittels install.packages() installiert werden. Eine sehr wichtige Sammlung von Packages wird von RStudio entwickelt. Unter dem Namen Tidyverse werden eine Reihe von Packages angeboten, den R-Alltag enorm erleichtert. Wir werden später näher auf das “Tidy”-Universum eingehen, an dieser Stelle können wir die Sammlung einfach mal installieren.\r\ninstall.packages(\"tidyverse\")\r\nUm ein package in R verwenden zu können, gibt es zwei Möglichkeiten:\r\nentweder man lädt es zu Beginn der R-session mittles library(tidyverse) (ohne Anführungs- und Schlusszeichen).\r\noder man ruft eine function mit vorangestelltem Packetname sowie zwei Doppelpunkten auf. dplyr::filter() ruft die Funktion filter() des Packets dplyr auf.\r\nLetztere Notation ist vor allem dann sinnvoll, wenn sich zwei unterschiedliche Funktionen mit dem gleichen namen in verschiedenen pacakges existieren. filter() existiert als Funktion einersits im package dplyr sowie in stats. Dieses Phänomen nennt man “masking”.\r\nZu beginn laden wir die nötigen Pakete:\r\n\r\n\r\n\r\n\r\nTidyverse liefert viele Funktionen, für die es in der normalen R-Umgebung (“base R”) keine wirkliche Alternative gibt. Andere Funktionen sind alternativen zu Base-R Funktionen:\r\ndata_frame() statt data.frame()\r\nread_* statt read.*\r\nparse_datetime statt as.POSIXct()\r\nDiese verhalten sich leicht anders als Base-R Funktionen: Sie treffen weniger Annahmen und sind etwas restriktiver. Wir verwenden oft Tidyverse Funktionen, ihr könnt aber selber entscheiden welche Version ihr benutzt.\r\nAufgabe 1\r\nErstelle eine data.frame mit nachstehenden Daten.\r\nTipps:\r\nEine leere data.frame zu erstellen ist schwieriger als wenn erstellen und befüllen der data.frame in einem Schritt erfolgt\r\nR ist dafür gedacht, Spalte für Spalte zu arbeiten (warum?), nicht Reihe für Reihe. Versuche dich an dieses Schema zu halten.\r\n\r\n\r\n\r\n\r\nTierart\r\nAnzahl\r\nGewicht\r\nGeschlecht\r\nBeschreibung\r\nFuchs\r\n2\r\n4.4\r\nm\r\nRötlich\r\nBär\r\n5\r\n40.3\r\nf\r\nBraun, gross\r\nHase\r\n1\r\n1.1\r\nm\r\nklein, mit langen Ohren\r\nElch\r\n3\r\n120.0\r\nm\r\nLange Beine, Schaufelgeweih\r\n\r\nAufgabe 2\r\nWas für Datentypen wurden (in Aufgabe 1) von R automatisch angenommen? Sind diese sinnvoll?\r\nTipp: Nutze dazu str()\r\n\r\n'data.frame':   4 obs. of  5 variables:\r\n $ Tierart     : chr  \"Fuchs\" \"Bär\" \"Hase\" \"Elch\"\r\n $ Anzahl      : num  2 5 1 3\r\n $ Gewicht     : num  4.4 40.3 1.1 120\r\n $ Geschlecht  : chr  \"m\" \"f\" \"m\" \"m\"\r\n $ Beschreibung: chr  \"Rötlich\" \"Braun, gross\" \"klein, mit langen Ohren\" \"Lange Beine, Schaufelgeweih\"\r\n\r\n\r\n[1] \"double\"\r\n\r\nAufgabe 3\r\nNutze die Spalte Gewicht um die Tiere in 3 Gewichtskategorien einzuteilen:\r\nleicht: < 5kg\r\nmittel: 5 - 100 kg\r\nschwer: > 100kg\r\n\r\n\r\n\r\n\r\nTierart\r\nAnzahl\r\nGewicht\r\nGeschlecht\r\nBeschreibung\r\nGewichtsklasse\r\nFuchs\r\n2\r\n4.4\r\nm\r\nRötlich\r\nleicht\r\nBär\r\n5\r\n40.3\r\nf\r\nBraun, gross\r\nmittel\r\nHase\r\n1\r\n1.1\r\nm\r\nklein, mit langen Ohren\r\nleicht\r\nElch\r\n3\r\n120.0\r\nm\r\nLange Beine, Schaufelgeweih\r\nschwer\r\n\r\nAufgabe 4\r\nImportiere den Datensatz order_52252_data.txt. Es handelt sich dabei um die stündlich gemittelten Temperaturdaten an verschiedenen Standorten in der Schweiz im Zeitraum 2000 - 2005. Wir empfehlen read_table()1 anstelle von read.table().\r\n\r\n\r\n\r\n\r\nstn\r\ntime\r\ntre200h0\r\nABO\r\n2000010100\r\n-2.6\r\nABO\r\n2000010101\r\n-2.5\r\nABO\r\n2000010102\r\n-3.1\r\nABO\r\n2000010103\r\n-2.4\r\nABO\r\n2000010104\r\n-2.5\r\nABO\r\n2000010105\r\n-3.0\r\nABO\r\n2000010106\r\n-3.7\r\nABO\r\n2000010107\r\n-4.4\r\nABO\r\n2000010108\r\n-4.1\r\nABO\r\n2000010109\r\n-4.1\r\n\r\nAufgabe 5\r\nSchau dir die Rückmeldung von read_table()an. Sind die Daten korrekt interpretiert worden?\r\n\r\n\r\n\r\nAufgabe 6\r\nDie Spalte time ist eine Datum/Zeitangabe im Format JJJJMMTTHH (siehe meta.txt). Damit R dies als Datum-/Zeitangabe erkennt, müssen wir die Spalte in einem R-Format (POSIXct) einlesen und dabei R mitteilen, wie sie aktuell formatiert ist. Lies die Spalte mit as.POSIXct() (oder parse_datetime) ein und spezifiziere sowohl format wie auch tz.\r\nTipps:\r\nWenn keine Zeitzone festgelegt wird, trifft as.POSIXct() eine Annahme (basierend auf Sys.timezone()). In unserem Fall handelt es sich aber um Werte in UTC (siehe meta.txt)\r\nas.POSIXcterwartet character: Wenn du eine Fehlermeldung hast die 'origin' must be supplied (o.ä) heisst, hast du der Funktion vermutlich einen Numeric übergeben.\r\n\r\n\r\n\r\n\r\nstn\r\ntime\r\ntre200h0\r\nABO\r\nNA\r\n-2.6\r\nABO\r\nNA\r\n-2.5\r\nABO\r\nNA\r\n-3.1\r\nABO\r\nNA\r\n-2.4\r\nABO\r\nNA\r\n-2.5\r\nABO\r\nNA\r\n-3.0\r\nABO\r\nNA\r\n-3.7\r\nABO\r\nNA\r\n-4.4\r\nABO\r\nNA\r\n-4.1\r\nABO\r\nNA\r\n-4.1\r\n\r\nAufgabe 7\r\nErstelle zwei neue Spalten mit Wochentag (Montag, Dienstag, etc) und Kalenderwoche. Verwende dazu die neu erstellte POSIXct-Spalte\r\n\r\n\r\n\r\n\r\nstn\r\ntime\r\ntre200h0\r\nwochentag\r\nkw\r\nABO\r\nNA\r\n-2.6\r\nNA\r\nNA\r\nABO\r\nNA\r\n-2.5\r\nNA\r\nNA\r\nABO\r\nNA\r\n-3.1\r\nNA\r\nNA\r\nABO\r\nNA\r\n-2.4\r\nNA\r\nNA\r\nABO\r\nNA\r\n-2.5\r\nNA\r\nNA\r\nABO\r\nNA\r\n-3.0\r\nNA\r\nNA\r\nABO\r\nNA\r\n-3.7\r\nNA\r\nNA\r\nABO\r\nNA\r\n-4.4\r\nNA\r\nNA\r\nABO\r\nNA\r\n-4.1\r\nNA\r\nNA\r\nABO\r\nNA\r\n-4.1\r\nNA\r\nNA\r\n\r\nAufgabe 8\r\nErstelle eine neue Spalte basierend auf die Temperaturwerte mit der Einteilung “kalt” (Unter Null Grad) und “warm” (über Null Grad)\r\n\r\n\r\n\r\n\r\nstn\r\ntime\r\ntre200h0\r\nwochentag\r\nkw\r\ntemp_kat\r\nABO\r\nNA\r\n-2.6\r\nNA\r\nNA\r\nkalt\r\nABO\r\nNA\r\n-2.5\r\nNA\r\nNA\r\nkalt\r\nABO\r\nNA\r\n-3.1\r\nNA\r\nNA\r\nkalt\r\nABO\r\nNA\r\n-2.4\r\nNA\r\nNA\r\nkalt\r\nABO\r\nNA\r\n-2.5\r\nNA\r\nNA\r\nkalt\r\nABO\r\nNA\r\n-3.0\r\nNA\r\nNA\r\nkalt\r\nABO\r\nNA\r\n-3.7\r\nNA\r\nNA\r\nkalt\r\nABO\r\nNA\r\n-4.4\r\nNA\r\nNA\r\nkalt\r\nABO\r\nNA\r\n-4.1\r\nNA\r\nNA\r\nkalt\r\nABO\r\nNA\r\n-4.1\r\nNA\r\nNA\r\nkalt\r\n\r\n\r\n@wickham2017, Kapitel 8 bzw. http://r4ds.had.co.nz/data-import.html)↩︎\r\n",
    "preview": {},
    "last_modified": "2021-09-01T09:14:51+02:00",
    "input_file": {}
  },
  {
    "path": "prepro/PrePro1_Uebung_B/",
    "title": "Uebung B",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-08-18",
    "categories": [
      "PrePro1",
      "PrePro"
    ],
    "contents": "\r\n\r\nContents\r\nAufgabe 1\r\nAufgabe 2\r\nAufgabe 3\r\n\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\n\r\n\r\nFahre mit dem Datensatz wetter aus Übung A fort.\r\n\r\n\r\nwetter <- read_table(\"order_52252_data.txt\",\r\n                  col_types = list(\r\n                    col_factor(levels = NULL),    \r\n                    col_datetime(format = \"%Y%m%d%H\"),\r\n                    col_double()\r\n                    )\r\n                  )\r\n\r\n\r\n\r\nAufgabe 1\r\nNutze plot() um die Temparaturkurve zu visualisieren. Verwende aber vorher filter() um dich auf eine Station (z.B. “ABO”) zu beschränken (es handelt sich sonst um zuviele Datenpunkte).\r\n\r\n\r\n# Lösung Aufgabe 1\r\n\r\nwetter_fil <- dplyr::filter(wetter, stn == \"ABO\")\r\n\r\nplot(wetter_fil$time,wetter_fil$tre200h0, type = \"l\")\r\n\r\n\r\n\r\n\r\nNun schauen wir uns das plotten mit ggplot2 an. Ein simpler Plot wie der in der vorherigen Aufgabe ist in ggplot2 zugegebenermassen etwas komplizierter. ggplot2 wird aber rasch einfacher, wenn die Grafiken komplexer werden. Wir empfehlen deshalb stark, ggplot2 zu verwenden.\r\nSchau dir ein paar online Tutorials zu ggplot2 an (siehe 1) und reproduziere den obigen Plot mit ggplot2\r\n\r\n\r\np <- ggplot(wetter_fil, aes(time,tre200h0)) +\r\n  geom_line()\r\n\r\np\r\n\r\n\r\n\r\n\r\nAufgabe 2\r\nSpiele mit Hilfe der erwähnten Tutorials mit dem Plot etwas rum. Versuche die x-/y-Achsen zu beschriften sowie einen Titel hinzu zu fügen.\r\n\r\n\r\n# Lösung Aufgabe 2\r\np <- p +\r\n  labs(x = \"Datum\", y = \"Temperatur\", title = \"Stündlich gemittelte Temperaturwerte\")\r\n\r\np\r\n\r\n\r\n\r\n\r\nAufgabe 3\r\nReduziere den x-Achsenausschnitt auf einen kleineren Zeitraum, beispielsweise einn beliebigen Monat. Verwende dazu lims() zusammen mit as.POSIXct() oder mache ein Subset von deinem Datensatz mit einer convenience-Variabel und filter().\r\n\r\n\r\n# Lösung Aufgabe 3\r\n\r\nlimits <- as.POSIXct(c(\"2002-01-01 00:00:00\",\"2002-02-01 00:00:00\"),tz = \"UTC\")\r\n\r\np +\r\n  lims(x = limits)\r\n\r\n\r\n\r\n\r\n\r\n@wickham2017, Kapitel 1 bzw. http://r4ds.had.co.nz/data-visualisation.html oder hier ein sehr schönes Video: Learn R: An Introduction to ggplot2↩︎\r\n",
    "preview": "prepro/PrePro1_Uebung_B/distill-preview.png",
    "last_modified": "2021-09-01T09:14:51+02:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "prepro/PrePro2_Demo_Tidyverse/",
    "title": "Demo tidyverse",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-08-19",
    "categories": [
      "PrePro2",
      "PrePro"
    ],
    "contents": "\r\n\r\nContents\r\nSplit-Apply-Combine\r\nPackete laden\r\nDaten Laden\r\nKennwerte berechnen\r\nConvenience Variablen\r\nKennwerte nach Gruppen berechnen\r\nVerketten vs. verschachteln\r\nResultate plotten\r\n\r\nReshaping data\r\nBreit -> lang\r\nLang -> breit\r\n\r\n\r\n\r\n\r\n\r\nDemoscript als Download\r\nHier möchten wir euch mit einer Sammlung von Tools vertraut machen, die spezifisch für das Daten prozessieren in Data Science entwickelt wurden. Der Prozess und das Modell ist hier1 schön beschrieben. Die Sammlung von Tools wird unter dem Namen tidyverse vertrieben, welches wir ja schon zu Beginn der ersten Übung installiert und geladen haben. Die Tools erleichtern den Umgang mit Daten ungeheuer und haben sich mittlerweile zu einem “must have” im Umgang mit Daten in R entwickelt.\r\nWir können Euch nicht sämtliche Möglichkeiten von tidyverse zeigen. Wir fokussieren uns deshalb auf einzelne Komponenten2 und zeigen ein paar Funktionalitäten, die wir oft verwenden und Euch ggf. noch nicht bekannt sind. Wer sich vertieft mit dem Thema auseinandersetzen möchte, der sollte sich unbedingt das Buch @wickham2017 beschaffen. Eine umfangreiche, aber nicht ganz vollständige Version gibt es online3, das vollständige eBook kann über die Bibliothek bezogen werden4.\r\nSplit-Apply-Combine\r\nPackete laden\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\n\r\n\r\nMit library(tidyverse) werden nicht alle Packete geladen, die mit install.packages(tidyverse) intalliert wurden (warum?). Unter anderem muss lubridate noch separat geladen werden:\r\n\r\n\r\nlibrary(lubridate) \r\n\r\n\r\n\r\nDaten Laden\r\nWir laden die Wetterdaten von der letzten Übung.\r\n\r\n\r\nwetter <- read_table(\"order_52252_data.txt\",\r\n                  col_types = list(\r\n                    col_factor(levels = NULL),    \r\n                    col_datetime(format = \"%Y%m%d%H\"),\r\n                    col_double()\r\n                    )\r\n                  )\r\n\r\n\r\n\r\nKennwerte berechnen\r\nWir möchten den Mittelwert aller gemessenen Temperaturwerte berechnen. Dazu könnten wir folgenden Befehl verwenden:\r\n\r\n\r\nmean(wetter$tre200h0, na.rm = TRUE) \r\n\r\n\r\n[1] 8.962106\r\n\r\nDie Option na.rm = T bedeutet, dass NA Werte von der Berechnung ausgeschlossen werden sollen.\r\nMit der selben Herangehensweise können diverse Werte berechnet werden (z.B. das Maximum (max()), Minimum (min()), Median (median()) u.v.m.).\r\nDiese Herangehensweise funktioniert nur dann gut, wenn wir die Kennwerte über alle Beobachtungen (Zeilen) für eine Variable (Spalte) berechnen wollen. Sobald wir die Beobachtungen gruppieren wollen, wird es schwierig. Zum Beispiel, wenn wir die durchschnittliche Temperatur pro Jahr berechnen wollen.\r\nConvenience Variablen\r\nUm diese Aufgabe zu lösen, muss zuerst das “Jahr” berechne werden (das Jahr ist die convenience variabel). Hierfür brauchen wir die Funktion year() (von lubridate).\r\nNun kann kann die convenience Variable “Jahr” erstellt werden. Ohne dpylr wird eine neue Spalte wird folgendermassen hinzugefügt.\r\n\r\n\r\nwetter$year <- year(wetter$time)\r\n\r\n\r\n\r\nMit dplyr (siehe 5) sieht der gleiche Befehl folgendermassen aus:\r\n\r\n\r\nwetter <- mutate(wetter,year = year(time))\r\n\r\n\r\n\r\nDer grosse Vorteil von dplyr ist an dieser Stelle noch nicht ersichtlich. Dieser wird aber später klar.\r\nKennwerte nach Gruppen berechnen\r\nJetzt kann man die data.frame mithilfe der Spalte “Jahr” filtern.\r\n\r\n\r\nmean(wetter$tre200h0[wetter$year == 2000], na.rm = TRUE)\r\n\r\n\r\n[1] 9.281542\r\n\r\nDies müssen wir pro Jahr wiederholen, was natürlich sehr umständlich ist, v.a. wenn man eine Vielzahl an Gruppen hat (z.B. Kalenderwochen statt Jahre). Deshalb nutzen wir das package dplyr. Damit geht die Aufgabe (Temperaturmittel pro Jahr berechnen) folgendermassen:\r\n\r\n\r\nsummarise(group_by(wetter,year),temp_mittel = mean(tre200h0, na.rm = TRUE))\r\n\r\n\r\n# A tibble: 7 × 2\r\n   year temp_mittel\r\n  <dbl>       <dbl>\r\n1  2000        9.28\r\n2  2001        8.76\r\n3  2002        9.30\r\n4  2003        9.48\r\n5  2004        8.64\r\n6  2005        8.31\r\n7    NA      NaN   \r\n\r\nVerketten vs. verschachteln\r\nAuf Deutsch übersetzt heisst die obige Operation folgendermassen:\r\nnimm den Datensatz wetter\r\nBilde Gruppen pro Jahr (group_by(wetter,year))\r\nBerechne das Temperaturmittel (mean(tre200h0))\r\n\r\nDiese Übersetzung R-> Deutsch unterscheidet sich vor allem darin, dass die Operation auf Deutsch verkettet ausgesprochen wird (Operation 1->2->3) während der Computer verschachtelt liest 3(2(1)). Um R näher an die gesprochene Sprache zu bringen, kann man den %>%-Operator verwenden (siehe 6).\r\n\r\n\r\nsummarise(group_by(wetter,year),temp_mittel = mean(tre200h0))\r\n\r\n# wird zu:\r\n\r\nwetter %>%                                #1) nimm den Datensatz \"wetter\"\r\n  group_by(year) %>%                      #2) Bilde Gruppen pro Jahr\r\n  summarise(temp_mittel = mean(tre200h0)) #3) berechne das Temperaturmittel \r\n\r\n\r\n\r\nDieses Verketten mittels %>% macht den Code einiges schreib- und leserfreundlicher, und wir werden ihn in den nachfolgenden Übungen verwenden. Dabei handelt es sich um das package magrittr, welches mit tidyverse mitgeliefert wird.\r\nZu dplyr und magrittrgibt es etliche Tutorials online (siehe7), deshalb werden wir diese Tools nicht in allen Details erläutern. Nur noch folgenden wichtigen Unterschied zu zwei wichtigen Funktionen in dpylr: mutate() und summarise().\r\nsummarise() fasst einen Datensatz zusammen. Dabei reduziert sich die Anzahl Beobachtungen (Zeilen) auf die Anzahl Gruppen (z.B. eine zusammengefasste Beobachtung (Zeile) pro Jahr). Zudem reduziert sich die Anzahl Variablen (Spalten) auf diejenigen, die in der “summarise” Funktion spezifiziert wurde (z.B. temp_mittel).\r\nmit mutate wird ein data.frame vom Umfang her belassen, es werden lediglich zusätzliche Variablen (Spalten) hinzugefügt (siehe Beispiel unten).\r\n\r\n\r\n# Maximal und minimal Temperatur pro Kalenderwoche\r\nwetter %>%                              #1) nimm den Datensatz \"wetter\"\r\n  filter(stn == \"ABO\") %>%              #2) filter auf Station namnes \"ABO\"\r\n  mutate(kw = week(time)) %>%       #3) erstelle eine neue Spalte \"kw\"\r\n  group_by(kw) %>%                      #4) Nutze die neue Spalte um Guppen zu bilden\r\n  summarise(\r\n    temp_max = max(tre200h0, na.rm = TRUE),#5) Berechne das Maximum \r\n    temp_min = min(tre200h0, na.rm = TRUE) #6) Berechne das Minimum\r\n    )   \r\n\r\n\r\n# A tibble: 53 × 3\r\n      kw temp_max temp_min\r\n   <dbl>    <dbl>    <dbl>\r\n 1     1     11.4    -15.2\r\n 2     2     12.9    -15.9\r\n 3     3      8.2    -11.3\r\n 4     4      9.6    -15.9\r\n 5     5     16.9    -17.5\r\n 6     6     13.5    -13.1\r\n 7     7     12.9    -15.4\r\n 8     8     11      -14.4\r\n 9     9     12.9    -17.6\r\n10    10     15.4    -16.3\r\n# … with 43 more rows\r\n\r\nResultate plotten\r\nMit diesen Tools können wir nun auch eine neue Grafik plotten, ähnlich wie in der Übung 1. Dafür müssen wir die ganzen Operationen aber zuerst in einer Variabel speichern (bis jetzt hat R zwar alles schön berechnet, aber uns nur auf die Konsole ausgegeben).\r\n\r\n\r\nwetter_sry <- wetter %>%                              \r\n  mutate(\r\n    kw = week(time)\r\n    ) %>%\r\n  filter(stn == \"ABO\") %>%\r\n  group_by(kw) %>%                      \r\n  summarise(\r\n    temp_max = max(tre200h0),               \r\n    temp_min = min(tre200h0),\r\n    temp_mean = mean(tre200h0)\r\n    )  \r\n\r\n\r\n\r\nDieses Mal plotten wir nur mit ggplot2 (siehe 8)\r\n\r\n\r\nggplot() +\r\n  geom_line(data = wetter_sry, aes(kw,temp_max), colour = \"yellow\") +\r\n  geom_line(data = wetter_sry, aes(kw,temp_mean), colour = \"pink\") +\r\n  geom_line(data = wetter_sry, aes(kw,temp_min), colour = \"black\") +\r\n  labs(y = \"temp\")\r\n\r\n\r\n\r\n\r\nDas sieht schon mal gut aus. Nur, wir mussten pro Linie einen eigene Zeile schreiben (geom_line()) und dieser eine Farbe zuweisen. Bei drei Werten ist das ja ok, aber wie sieht es denn aus wenn es Hunderte sind? Da hat ggplot natürlich eine Lösung, dafür müssen aber alle Werte in einer Spalte daher kommen. Das ist ein häufiges Problem: Wir haben eine breite Tabelle (viele Spalten), bräuchten aber eine lange Tabelle (viele Zeilen).\r\nReshaping data\r\nBreit -> lang\r\nDa kommt tidyverse wieder ins Spiel. Die Umformung von Tabellen breit->lang erfolgt mittels tidyr(siehe 9). Auch dieses package funktioniert wunderbar mit piping (%>%).\r\n\r\n\r\nwetter_sry %>%\r\n  pivot_longer(c(temp_max,temp_min,temp_mean))\r\n\r\n\r\n# A tibble: 159 × 3\r\n      kw name       value\r\n   <dbl> <chr>      <dbl>\r\n 1     1 temp_max   11.4 \r\n 2     1 temp_min  -15.2 \r\n 3     1 temp_mean  -1.26\r\n 4     2 temp_max   12.9 \r\n 5     2 temp_min  -15.9 \r\n 6     2 temp_mean  -1.56\r\n 7     3 temp_max    8.2 \r\n 8     3 temp_min  -11.3 \r\n 9     3 temp_mean  -1.88\r\n10     4 temp_max    9.6 \r\n# … with 149 more rows\r\n\r\nIm Befehl pivot_longer() müssen wir festlegen, welche Spalten zusammengefasst werden sollen (hier: temp_max,temp_min,temp_mean). Alternativ (und in diesem Fall auch einfacher), können wir angeben, welche Spalten wir nicht zusammenfassen wollen:\r\n\r\n\r\nwetter_sry %>%\r\n  pivot_longer(-kw)\r\n\r\n\r\n# A tibble: 159 × 3\r\n      kw name       value\r\n   <dbl> <chr>      <dbl>\r\n 1     1 temp_max   11.4 \r\n 2     1 temp_min  -15.2 \r\n 3     1 temp_mean  -1.26\r\n 4     2 temp_max   12.9 \r\n 5     2 temp_min  -15.9 \r\n 6     2 temp_mean  -1.56\r\n 7     3 temp_max    8.2 \r\n 8     3 temp_min  -11.3 \r\n 9     3 temp_mean  -1.88\r\n10     4 temp_max    9.6 \r\n# … with 149 more rows\r\n\r\nWenn wir die Namen neuen Spalten festlegen wollen (anstelle von name und value) erreichen wir dies mit names_to bzw. values_to:\r\n\r\n\r\nwetter_sry_long <- wetter_sry %>%\r\n  pivot_longer(-kw, names_to = \"Messtyp\", values_to = \"Messwert\")\r\n\r\n\r\n\r\nDie ersten 6 Zeilen von wetter_sry_long:\r\n\r\nkw\r\nMesstyp\r\nMesswert\r\n1\r\ntemp_max\r\n11.400000\r\n1\r\ntemp_min\r\n-15.200000\r\n1\r\ntemp_mean\r\n-1.259325\r\n2\r\ntemp_max\r\n12.900000\r\n2\r\ntemp_min\r\n-15.900000\r\n2\r\ntemp_mean\r\n-1.557242\r\n\r\nDie ersten 6 Zeilen von wetter_sry:\r\n\r\nkw\r\ntemp_max\r\ntemp_min\r\ntemp_mean\r\n1\r\n11.4\r\n-15.2\r\n-1.2593254\r\n2\r\n12.9\r\n-15.9\r\n-1.5572421\r\n3\r\n8.2\r\n-11.3\r\n-1.8832341\r\n4\r\n9.6\r\n-15.9\r\n-2.8375000\r\n5\r\n16.9\r\n-17.5\r\n-0.9789683\r\n6\r\n13.5\r\n-13.1\r\n0.4392857\r\n\r\nBeachte: wetter_sry_long umfasst 159 Beobachtungen (Zeilen), das sind 3 mal soviel wie wetter_sry, da wir ja drei Spalten zusammengefasst haben.\r\n\r\n\r\nnrow(wetter_sry)\r\n\r\n\r\n[1] 53\r\n\r\nnrow(wetter_sry_long)\r\n\r\n\r\n[1] 159\r\n\r\n\r\n\r\nggplot(wetter_sry_long, aes(kw,Messwert, colour = Messtyp)) +\r\n  geom_line()\r\n\r\n\r\n\r\n\r\nBeachtet, dass wir gegenüber dem letzten Plot colour nun innerhalb von aes() festlegen und nicht mit einem expliziten Farbwert, sondern mit dem Verweis auf die Spalte key.\r\nLang -> breit\r\nDas Gegenstück zu pivot_longer ist pivot_wider. Mit dieser Funktion können wir eine lange Tabelle in eine breite überführen. Dazu müssen wir in names_from angeben, aus welcher Spalte die neuen Spaltennamen erstellt werden sollen (names_from) und aus welcher Spalte die Werte entstammen sollen (values_from):\r\n\r\n\r\nwetter_sry_long %>%\r\n  pivot_wider(names_from = Messtyp, values_from = Messwert)\r\n\r\n\r\n# A tibble: 53 × 4\r\n      kw temp_max temp_min temp_mean\r\n   <dbl>    <dbl>    <dbl>     <dbl>\r\n 1     1     11.4    -15.2    -1.26 \r\n 2     2     12.9    -15.9    -1.56 \r\n 3     3      8.2    -11.3    -1.88 \r\n 4     4      9.6    -15.9    -2.84 \r\n 5     5     16.9    -17.5    -0.979\r\n 6     6     13.5    -13.1     0.439\r\n 7     7     12.9    -15.4    -2.32 \r\n 8     8     11      -14.4    -2.84 \r\n 9     9     12.9    -17.6    -2.20 \r\n10    10     15.4    -16.3     0.917\r\n# … with 43 more rows\r\n\r\n\r\nhttp://r4ds.had.co.nz/introduction.html#↩︎\r\ndplyr, ggplot2, tidyr, stringr, magrittr, lubridate↩︎\r\nhttp://r4ds.had.co.nz/↩︎\r\nhttps://ebookcentral.proquest.com/lib/zhaw/detail.action?docID=4770093↩︎\r\n@wickham2017, Kapitel 10 / http://r4ds.had.co.nz/transform.html↩︎\r\n@wickham2017, Kapitel 14 / http://r4ds.had.co.nz/pipes.html↩︎\r\n@wickham2017, Kapitel 10 / http://r4ds.had.co.nz/transform.html, oder Hands-on dplyr tutorial..↩︎\r\n@wickham2017, Kapitel 1 / http://r4ds.had.co.nz/data-visualisation.html oder hier ein sehr schönes Video: Learn R: An Introduction to ggplot2↩︎\r\nhttps://r4ds.had.co.nz/tidy-data.html#pivoting↩︎\r\n",
    "preview": "prepro/PrePro2_Demo_Tidyverse/distill-preview.png",
    "last_modified": "2021-09-01T09:14:51+02:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "prepro/PrePro2_Uebung_A/",
    "title": "Uebung A",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-08-18",
    "categories": [
      "PrePro2",
      "PrePro"
    ],
    "contents": "\r\n\r\n\r\n\r\nAufgabe 1\r\nLade die Wetterdaten aus der letzten Übung.\r\nAufgabe 2\r\nBereinige den Datensatz. Entferne z.B. alle Zeilen, bei dem der Stationsnahme oder Temperaturwerte fehlen\r\nAufgabe 3\r\nÜberführe die lange Tabelle über in eine breite. Dabei sollte jede Station eine eigene Spalte enthalten (names_from), gefüllt mit den Temperaturwerten (values_from). Speichere diese Tabelle in einer neuen Variabel.\r\nAufgabe 4\r\nImportiere die Datei order_52252_legend.csv (z.B. mit read_delim).\r\nHinweis: Wenn Umlaute und Sonderzeichen nicht korrekt dargestellt werden (z.B. in Genève), hat das vermutlich mit der Zeichencodierung zu tun. Das File ist aktuell in ‘ANSI’ Codiert, welche für gewisse Betriebssysteme / R-Versionen ein Problem darstellt. Um das Problem zu umgehen muss man das File mit einem Editor öffnen (Windows ‘Editor’ oder ‘Notepad++’, Mac: ‘TextEdit’) und mit einer neuen Codierung (z.B ‘UTF-8’) abspeichern. Danach kann die Codierung spezifitiert werden (bei read_delim(): mitlocale = locale(encoding = “UTF-8”)`)\r\nAufgabe 5\r\nDie x-/y-Koordinaten sind aktuell in einer Spalte erfasst. Um mit den Koordinaten sinnvoll arbeiten zu können, brauchen wir die Koordinaten getrennt. Trenne die x und y Koordinaten aus der Spalte Koordinaten (Tipp: nutze dafür tidyr::separate()).\r\nAufgabe 6\r\nNun wollen wir den Datensatz wettermit den Informationen aus wetter_legendeanreichern. Uns interessiert aber nur das Stationskürzel, der Name, die x/y Koordinaten sowie die Meereshöhe. Lösche die nicht benötigten Spalten (oder selektiere die benötigten Spalten).\r\nTipp: Nutze select() von dplyr\r\nAufgabe 7\r\nNun ist der Datensatz wetter_legendegenügend vorbereitet. Jetzt kann er mit dem Datensatz wetter verbunden werden. Überlege dir, welcher Join dafür sinnvoll ist und mit welchem Attribut wir “joinen” können.\r\nNutze die Join-Möglichkeiten von dplyr (Hilfe via ?dplyr::join) um die Datensätze wetter und wetter_legendezu verbinden.\r\nAufgabe 8\r\nBerechne die Durchschnittstemperatur pro Station. Nutze dabei dplyr::summarise() und wenn möglich %>%. Speichere das Resultat in einer neuen Variabel.\r\nAufgabe 9\r\nNun wollen wir das Resultat aus Aufgabe 7 nutzen, um die Durchschnittstemperatur der Meereshöhe gegenüber zu stellen. Dummerweise ging das Attribut Meereshoehe bei der summarise() Operation verloren (da bei summarise() alle Spalten weg fallen, die nicht in group_by() definiert wurden). Um die Spalte Meereshoehe beizubehalten, muss sie also unter group_by() aufgelistet werden.\r\nWiederhole Übung 7 und siehe zu, dass die Meereshöhe beibehalten wird. Stelle danach in einem Scatterplot (wenn möglich mit ggplot()) die Meereshöhe der Durchschnittstemperatur gegenüber.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-09-01T09:14:52+02:00",
    "input_file": {}
  },
  {
    "path": "prepro/PrePro2_Uebung_B/",
    "title": "Übung B",
    "description": {},
    "author": [
      {
        "name": "Patrick Laube",
        "url": {}
      },
      {
        "name": "Nils Ratnaweera",
        "url": {}
      },
      {
        "name": "Nikolaos Bakogiannis",
        "url": {}
      }
    ],
    "date": "2021-08-19",
    "categories": [
      "PrePro2",
      "PrePro"
    ],
    "contents": "\r\n\r\nContents\r\nAufgabe 1\r\nAufgabe 2\r\nAufgabe 3\r\nAufgabe 4\r\n\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(lubridate)\r\nlibrary(stringr)\r\n\r\n\r\n\r\nAufgabe 1\r\nGegeben sind die Daten von drei Sensoren (sensor1.csv, sensor2.csv, sensor3.csv). Lade die Datensätze runter und lese sie ein.\r\n\r\n\r\n# Lösung Aufgabe 1\r\n\r\nsensor1 <- read_delim(\"sensor1.csv\",\";\")\r\nsensor2 <- read_delim(\"sensor2.csv\",\";\")\r\nsensor3 <- read_delim(\"sensor3.csv\",\";\")\r\n\r\n\r\n\r\nAufgabe 2\r\nErstelle aus den 3 Dataframes eine einzige Dataframe, die aussieht wie unten dargestellt. Dafür musst du:\r\njedem Dataframe eine neue Spalte “Sensor” hinzufügen wo der jeweilige Sensor vermerkt ist\r\ndie drei Dataframes zu einer mittels rbind() zusammenführen\r\ndie Spalte Datetime in ein POSIXct-Format konvertiren (das ursprüngliche Format lautet:DDMMYYYY_HHMM)\r\ndie Tabelle von long zu wide mittels pivot_wider überführen\r\n\r\n\r\n# Lösung Aufgabe 2\r\n\r\nsensor1$sensor <- \"sensor1\"\r\nsensor2$sensor <- \"sensor2\"\r\nsensor3$sensor <- \"sensor3\"\r\n\r\nsensor_all <- rbind(sensor1,sensor2,sensor3)\r\n\r\nsensor_all <- sensor_all %>%\r\n  mutate(\r\n    Datetime = as.POSIXct(Datetime,format = \"%d%m%Y_%H%M\")\r\n  ) %>%\r\n  pivot_wider(names_from = sensor, values_from = Temp)\r\n\r\n\r\n\r\n\r\nDatetime\r\nsensor1\r\nsensor2\r\nsensor3\r\n2017-10-16 18:00:00\r\n23.5\r\n13.5\r\n26.5\r\n2017-10-17 18:00:00\r\n25.4\r\n24.4\r\n24.4\r\n2017-10-18 18:00:00\r\n12.4\r\n22.4\r\n13.4\r\n2017-10-19 18:00:00\r\n5.4\r\n12.4\r\n7.4\r\n2017-10-23 18:00:00\r\n23.5\r\n13.5\r\nNA\r\n2017-10-24 18:00:00\r\n21.3\r\n11.3\r\nNA\r\n2017-10-25 18:00:00\r\n12.4\r\n22.4\r\n15.4\r\n2017-10-26 18:00:00\r\n13.5\r\n13.5\r\n16.5\r\n2017-10-27 18:00:00\r\n5.4\r\n5.4\r\n7.4\r\n2017-10-28 18:00:00\r\n4.4\r\n4.4\r\n4.4\r\n2017-10-29 18:00:00\r\nNA\r\n4.2\r\nNA\r\n2017-10-30 18:00:00\r\nNA\r\n5.4\r\nNA\r\n2017-10-31 18:00:00\r\nNA\r\n12.4\r\nNA\r\n2017-11-01 18:00:00\r\nNA\r\n14.4\r\nNA\r\n2017-11-02 18:00:00\r\nNA\r\n7.4\r\nNA\r\n2017-11-03 18:00:00\r\nNA\r\n4.8\r\nNA\r\n\r\nAufgabe 3\r\nImportiere die Datei sensor_1_fail.csv in R.\r\n\r\n\r\n# Lösung Aufgabe 3\r\n\r\nsensor_fail <- read_delim(\"sensor_fail.csv\", delim = \";\")\r\n\r\n\r\n\r\n\r\nSensor\r\nTemp\r\nHum_%\r\nDatetime\r\nSensorStatus\r\nSen102\r\n0.6\r\n98\r\n16102017_1800\r\n1\r\nSen102\r\n0.3\r\n96\r\n17102017_1800\r\n1\r\nSen102\r\n0.0\r\n87\r\n18102017_1800\r\n1\r\nSen102\r\n0.0\r\n86\r\n19102017_1800\r\n0\r\nSen102\r\n0.0\r\n98\r\n23102017_1800\r\n0\r\nSen102\r\n0.0\r\n98\r\n24102017_1800\r\n0\r\nSen102\r\n0.0\r\n96\r\n25102017_1800\r\n1\r\nSen103\r\n-0.3\r\n87\r\n26102017_1800\r\n1\r\nSen103\r\n-0.7\r\n98\r\n27102017_1800\r\n1\r\nSen103\r\n-1.2\r\n98\r\n28102017_1800\r\n1\r\n\r\nsensor_fail.csv hat eine Variabel SensorStatus: 1 bedeutet der Sensor misst, 0 bedeutet der Sensor miss nicht. Fälschlicherweise wurde auch dann der Messwert Temp = 0 erfasst, wenn Sensorstatus = 0. Richtig wäre hier NA (not available). Korrigiere den Datensatz entsprechend.\r\n\r\n\r\n# Lösungsweg 1\r\nsensor_fail$Datetime <- as.POSIXct(sensor_fail$Datetime,format = \"%d%m%Y_%H%M\")\r\n\r\nsensor_fail$`Hum_%`[sensor_fail$SensorStatus == 0] <- NA\r\nsensor_fail$Temp[sensor_fail$SensorStatus == 0] <- NA\r\n\r\n\r\n\r\nAufgabe 4\r\nWarum spielt das es eine Rolle, ob 0 oder NA erfasst wird? Berechne die Mittlere der Temperatur / Feuchtigkeit nach der Korrektur.\r\n\r\n\r\n# Lösung Aufgabe 4\r\n\r\n# Mittelwerte der korrigierten Sensordaten: mit na.rm = TRUE werden NA-Werte aus der Berechnung entfernt. \r\n# Ansonsten würden sie als 0 in die Berechnung einfliessen und diese verfälschen.\r\nmean(sensor_fail$Temp, na.rm = TRUE)\r\n\r\n\r\n[1] -0.1857143\r\n\r\nmean(sensor_fail$`Hum_%`, na.rm = TRUE)\r\n\r\n\r\n[1] 94.28571\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-09-01T09:14:52+02:00",
    "input_file": {}
  }
]
