[
  {
    "path": "fallstudien/BE_S_1_Einleitung/",
    "title": "KW40: Einführung",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-09-08",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nEinleitung\r\nHintergrund\r\nDas rund 1100 ha grosse Naturschutzgebiet Wildnispark Zürich Sihlwald, welches im periurbanen Raum südlich von Zürich liegt, gilt seit dem 1. Januar 2010 als erster national anerkannter Naturerlebnispark. Er ist Teil des Wildnisparks Zürich. Seine Rolle als Naherholungsgebiet für die Stadt Zürich ist von grosser Bedeutung.\r\nIm Perimeter gelten verschiedene Regeln. So darf z. B. nur auf bestimmten Wegen mit den Velo gefahren und Hunde müssen an der Leine geführt werden. Damit soll im Schutzgebiet die Balance zwischen Schutz und Nutzen bewahrt werden, denn einerseits sollen die Besuchenden den Wald erleben dürfen, andererseits soll sich dieser, in der Kernzone, frei entwicklen dürfen.\r\n\r\n\r\n\r\nDamit diese Balance erreicht werden kann, muss das Management auf solide, empirisch erhobene Daten zur Natur und zu den Besuchenden zurückgreifen können. Das Besuchermonitoring deckt den zweiten Teil dieser notwendigen Daten ab.\r\nIm Wildnispark Zürich sind dazu mehrere automatische Zählstellen in Betrieb. Die Zählstellen erfassen stundenweise Besuchende. Einige Zählstellen erfassen richtungsgetrennt und / oder können zwischen verschiedenen Nutzergruppen wie Personen, die zu Fuss gehen, und Velofahrenden unterscheiden.\r\nIm Rahmen des Moduls Research Methods werden in der Fallstudie Profil S mehrere dieser automatischen Zählstellen genauer untersucht. Die Daten, welche im Besitz des WPZ sind, wurden bereits kalibriert. Das heisst, Zählungen während Wartungsarbeiten, bei Felhbetrieb o.ä. wurden bereits ausgeschlossen. Dies ist eine Zeitintensive Arbeit und wir dürfen hier mit einem wahren, sauber aufbereiteten “Datenschatz” arbeiten.\r\nPerimeter des Wildnispark Zürichs mit den ungefähren Standorten von drei ausgewählten automatischen Zählstellen.\r\n\r\n\r\n\r\n\r\nHinweis:\r\nDie Zähler 2011 und 502 erfassen sowohl Fussgänger:innen als auch Fahrräder. Die Erfassung erfolgt Richtungsgetrennt.\r\nDer Zähler 204 kann nicht zwischen Nutzungsarten unterscheiden; er erfasst alle Passagen auf den Hochwachtturm als Fussgänger:innen. Der Sensror hat keine Richtungserkennung und die Besuchenden werden jeweils 2x gezählt, einmal beim Aufstieg und einmal beim Abstieg. Das ist im Kalibrierunsgfaktor berücksichtigt, die Kalibrierte Zahl gibt also die Anzahl der Turmbesuche an.\r\nDer Wildnispark wertet die Zahlen auf verschiedene Weise aus. So sind z. B. Jahresgänge (an welchen Monaten herrscht besonders viel Betrieb) und Nutzungszahlen bekannt. Vertiefte Auswertungen, die beispielsweise den Zusammenhang zwischen Besuchszahlen und dem Wetter untersuchen, werden nicht gemacht, da dies die Kapazitäten übersteigen würde.\r\nUnsere Analysen in diesem Modul helfen dem Management, ein besseres Verständnis zum Verhalten der Besuchenden zu erlangen und bilden Grundlagen für Managemententscheide in der Praxis.\r\nZiele\r\nIn dieser Fallstudie zeigen wir, welche Einfluss der Lockdown während der Covid19-Pandemie im Frühjahr 2020 sowie jener im Winter 2020/2021 auf die täglichen Besuchszahlen im Wildnispark Zürich hatte.\r\nErgänzend beschreiben wir den Zusammenhang der Besuchszahlen mit verschiedenen Wetterparametern. Die Hypothese lautet, je mehr Sonnenstunden und je höher die Temperatur, desto mehr Besuchende sind im Untersuchungsgebiet unterwegs; je mehr Niederschlag gemessen wird, desto weniger Besuchende werden gezählt.\r\nDa neben dem Wetter aber auch saisonale Muster, wie z.B. Schulferien, einen grossen Einfluss auf Besuchszahlen haben können, ziehen wir diese und weitere Parameter (Wochentage, Kalenderwoche, Jahr) ebenfalls in die Auswertung ein.\r\nDiese kombinierte, statistisch schliesssende, Betrachtung erlaubt uns Aussagen darüber, ob “nur” aufgrund des schönen Frühlings 2021 mehr Menschen in Wald unterwegs waren, oder ob der Lockdown tatsächlich einen so deutlich positiven Einfluss auf die Besuche hatte.\r\nGrundlagen\r\nZur Verfügung stehen:\r\ndie stündlichen, richtungsgetrennten Zählungen von Fussgänger:innen und Velos an drei Zählstellen\r\nMeteodaten (Temperatur, Sonnenscheindauer, Niederschlagssumme)\r\nR-Skripte mit Hinweisen zur Auswertung\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_1_Einleitung/Perimeter.png",
    "last_modified": "2021-09-08T11:30:13+02:00",
    "input_file": "Einleitung.knit.md",
    "preview_width": 2001,
    "preview_height": 1051
  },
  {
    "path": "fallstudien/BE_S_2_Felderhebung/",
    "title": "KW40 - KW42: Felderhebung Grüntal",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-09-08",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nEinführung und Installation\r\nEs gibt eine Vielzahl an möglichen Methoden zur Erfassung der Besucherzahlen. Automatische Zählgeräte bieten die Möglichkeit lange und durchgehende Zeitreihen zu erfassen. Diese müssen aber natürlich auch ausgewertet werden. Hier erhaltet ihr erste Inputs dazu.\r\n\r\n\r\n\r\nZiele\r\nDie Studierenden können das eingesetzte Gerät installieren und kennen die Vor- und Nachteile verschiedener Methoden.\r\nSie können die Daten auslesen und explorativ analysieren.\r\nGrundlagen\r\nDie Geräte werden innerhalb der auf Abbildung 1 gekennzeichneten Standorte platziert. Damit soll überprüft werden, wie stark frequentiert die Waldränder der ökologisch aufgewerteten Seeparzelle sind.\r\n\r\n\r\n\r\nDatenschutz ist ein wichtiges Thema. Die Besuchenden werden über den Zweck der Kameras informiert, die Daten nach der Bearbeitung wieder gelöscht und nicht weitergegeben.\r\n\r\n\r\n\r\nNun geht es ins Feld uns die Geräte werden installiert.\r\nAuswertung\r\nAUFGABE ab dem 12.10.2021\r\nNachdem die Kameras für zwei Wochen im Einsatz standen, werden die Daten ausgelesen, die Sichtungen in Excel festgehalten und die explorativen Analysen durchgeführt.\r\nBereits beim Detektieren der Sichtungen muss einem klar sein, was man auswerten möchte. Nur so können die relevanten Variablen erfasst werden.\r\nIm Rahmen dieser Felderhebung erhaltet ihr von Adrian eine Excel-Vorlage zur Erfassung der Sichtungen.\r\nSobald alle Sichtungen erfasst sind, geht es ins R!\r\nDatenanalyse in R\r\nVorbereitungen\r\nFuer diese Aufgabe benoetigen wir folgende Bibliotheken:\r\n\r\n\r\n# Benoetigte Bibliotheken ####\r\nlibrary(tidyverse) # Data wrangling und piping\r\nlibrary(lubridate) # Arbeiten mit Datumsformaten\r\nlibrary(data.table)# schnelles Dateneinlesen\r\n\r\n\r\n\r\nLese nun zuerst den bereitsgestellen, respektiven den selbst erstellten Datensatz (csv) mithilfe von fread() oder read.csv() ein und nennt ihn cam.\r\nPruefe die Daten. Wurden sie richtig eingelesen? Wie sieht die Struktur der Daten aus?\r\nTipp: Brauch zum pruefen den Befehl str() sowie head().\r\nAufgabe 1: Datentypen\r\nViele Befehle zum Einlesen erkennen die Datentypen automatisch. Bei Faktoren funktioniert das aber nicht (sie sind ja eigentlich einfach Text und R weiss nicht, was wir damit wollen).\r\nAuch das Datum muss vielfach manuell definiert werden (hier muessen wir R sagen, wie das Format dieses aussieht).\r\n\r\n\r\ncam <- cam %>% \r\n  mutate(Datum = as.Date(Datum, format = \"%d.%m.%Y\"))%>%\r\n  mutate(Kamerastandort = factor(Kamerastandort))%>%\r\n  ...\r\n\r\n\r\n\r\nDefiniert nun die restlichen (relevanten) Variablen als Faktor.\r\nAufgabe 2: Datensatz trennen\r\nUnser Datensatz enthaellt die Angeben zu ost und west. Wir wollen die Auswertungen aber pro Standort machen.\r\nTrennt den Datensatz aufgrund des Standorts. Nutzt dazu filter().\r\n\r\n\r\nost <- filter(DATENSATZ, SPALTENNAME == \"Attribut\")\r\nwest <- ...\r\n\r\n\r\n\r\nAufgabe 3: Verteilung pruefen\r\nBei explorativen Analysen macht es immer Sinn sich die Verteilung der Daten anzuschauen. Pruefe daher die Verteilung pro Datensatz mittels Histogram und Scatterplot.\r\nBeim Histogram sollen nur die Menschen angezeigt und die 0er ausgeschlossen werden. Das kann mit folgendem Code erreicht werden:\r\n\r\n\r\nhist(west$Anzahl[west$Art==\"Mensch\" &\r\n                  !west$Anzahl==0], # das \"!\" bedeutet \"nicht gleich\"\r\n     breaks = 10)                   # wie viele Balken brauchen wir im Histogram?\r\n\r\n\r\n\r\nBeim Scatterplot soll auf der x-Achse das Datum stehen, auf der y-Achse die Anzahl der Personen. Auch hier wollen wir keine Wildtiere im Plot.\r\nAufgabe 3: Daten ausschliessen\r\nFuer die weiteren Analysen schliessen wir die Wildtiere komplett aus.\r\nNutzt dazu wiederum den Befehl filter() und ueberschreibt die Datensaetze ost und west.\r\nDennoch wolle wir auch wissen, welche Tiere auf dem Areal (ost und west zusammen, also df cam) unterwegs sind.\r\nDafuer gibts einen separaten Datensatz namens Tiere. Nutzt dazu den Befehl filter().\r\nAufgabe 4: Explorative Analysen\r\nBerechnet zuerst die totale Anzahl Menschen / Standort mit sum(DATENSATZ$SPALTENNAME).\r\nGruppieren und summieren:\r\nBerechnet nun die Anzahl Menschen pro Aktivität sowie die Anzahl Begleittier pro Kategorie pro Standort.\r\nUntenstehender Code eigent sich dazu ganz gut:\r\n\r\n\r\nAkt_Ost <- ost %>%\r\n  group_by(Aktivitaet)%>%      # Hier sagen wir nach was wir gruppieren \r\n  summarise (n = n()) %>%      # und dann sagen wir, dass R zusammenfassen soll und zwar die Anzahl\r\n  mutate(freq = n / sum(n))%>% # und dann soll und R das prozentuale Verhaeltniss berechnen\r\n  arrange(desc(n))             # und dann das ganze absteigend sortieren\r\n\r\n\r\n\r\nNun soll noch berechnet werden, wie viele unterschiedliche Wildtiere auf dem ganzen Areal gezaehlt wurden.\r\nRecycelt dazu obenstenenden Code.\r\nAufgabe 5: Visualisieren\r\nVerteilung der Aktivitäten als Pie Chart\r\nZuerst eine Palette mit 5 Farben definieren:\r\n\r\n\r\npal <- hcl.colors(5, palette = \"heat\")\r\n\r\n\r\n\r\nDann als Kreisdiagramm plotten.\r\n\r\n\r\npie(Akt_West$n, labels = c(\"Anderes\", \"Biker\", \"Landwirtschaft\", \"Spaziergaenger\", \"unbestimmbar\"),\r\n    main = \"Prozentuales Verhaeltnis West\",\r\n    col = pal) \r\n\r\n\r\n\r\n\r\nFRAGE: eignen sich Pie Charts überhaupt für solche Darstellungen? Wie könnten die Aktivitäten auch noch dargestellt werden? Welches sind eure eigenen Ideen zur Visualisierung?\r\nBegleittier als Bar Chart\r\n\r\n\r\n# Begleittier als Bar Chart ####\r\nggplot(Begleit_ost,                      # hier den Datensatz spezifizieren\r\n       mapping=aes(x=Begleittier, y = n))+ # Absolute Anzahl darstellen\r\n  geom_col(width=0.9,position = \"dodge\")+# hier sage ich, dass ich ein Balkendiagramm will\r\n  labs(x=\"Begleittier\", y= \"Anzahl\")+    # Achsenbeschriftung setzen\r\n  theme_classic(base_size = 15)+         # Und zu guter letzt: Stil definieren\r\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) # sowie Achsenbeschr.ausrichten\r\n\r\n\r\n\r\n\r\nUnd schliesslich: Wildtier als Bar Chart Stellt hier auf der y-Achse die Anzahl nicht total sondern relativ (in Prozent) dar.\r\n\r\n\r\n\r\nBei Bedraf koennen die selben Plots fuer den zweiten Standort gemacht werden.\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_2_Felderhebung/gruental.jpg",
    "last_modified": "2021-09-08T11:37:22+02:00",
    "input_file": "Felderhebung.knit.md"
  },
  {
    "path": "fallstudien/BE_S_2_Felderhebung_Loesung/",
    "title": "KW42: Musterloesung Felderhebung Grüntal",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-09-08",
    "categories": [
      "Biodiversity & Ecosystems (S) Musterloesung"
    ],
    "contents": "\r\n\r\n\r\n\r\n\r\n\r\n#.###############################################################################################\r\n# Besuchermonitoring Grüntal - Auswertung der Besucherzahlen ####\r\n# Modul Research Methods, HS20. Adrian Hochreutener ####\r\n#.################################################################################################\r\n#.##############################################################################################\r\n# METADATA UND DEFINITIONEN ####\r\n#.################################################################################################\r\n# Ordnerstruktur ####\r\n# Im Ordner in dem das R-Projekt abgelegt ist muessen folgende Unterordner bestehen:\r\n# - Skripts\r\n# - Felderhebungen (Rohdaten hier ablegen)\r\n# - Results\r\n# Benoetigte Bibliotheken ####\r\nlibrary(tidyverse) # Data wrangling und piping\r\nlibrary(lubridate) # Arbeiten mit Datumsformaten\r\nlibrary(data.table)# schnelles Dateneinlesen\r\n\r\n#.###############################################################################################\r\n# 1. DATENIMPORT #####\r\n#.###############################################################################################\r\n\r\n# 1.1 Einlesen ####\r\n# lese die Daten mithilfe von data.table ein. Je nach Bedarf muss der Speicherort sowie der\r\n# Dateiname angepasst werden\r\ncam <- fread(\"DummyData.csv\")\r\n\r\n\r\n\r\n\r\n\r\n#.###############################################################################################\r\n# 2. VORBEREITUNG DER DATEN #####\r\n#.###############################################################################################\r\n\r\n# 2.1 erstes Sichten und anpassen der Datentypen ####\r\nstr(cam)\r\n\r\n\r\nClasses 'data.table' and 'data.frame':  100 obs. of  11 variables:\r\n $ Person_Auswertung: chr  \"Bsp\" \"Bsp\" \"Bsp\" \"Bsp\" ...\r\n $ Kamerastandort   : chr  \"ost\" \"ost\" \"ost\" \"ost\" ...\r\n $ ID_Foto          : chr  \"bsp_001\" \"bsp_002\" \"bsp_003\" \"bsp_004\" ...\r\n $ Datum            : chr  \"08.10.2020\" \"07.10.2020\" \"06.10.2020\" \"09.10.2020\" ...\r\n $ Stunde           : int  3 0 16 24 17 23 14 7 5 23 ...\r\n $ Art              : chr  \"Mensch\" \"Wildtier\" \"Wildtier\" \"Wildtier\" ...\r\n $ Anzahl           : int  3 4 1 6 7 10 2 6 9 6 ...\r\n $ Richtung         : chr  \"Bergauf\" \"Bergauf\" \"Bergauf\" \"Bergab\" ...\r\n $ Aktivitaet       : chr  \"Spaziergaenger\" \"0\" \"0\" \"0\" ...\r\n $ Begleittier      : chr  \"Hund_ohne_Leine\" \"0\" \"0\" \"0\" ...\r\n $ Wildtier         : chr  \"0\" \"Hase\" \"Hase\" \"Hase\" ...\r\n - attr(*, \".internal.selfref\")=<externalptr> \r\n\r\nhead(cam)\r\n\r\n\r\n   Person_Auswertung Kamerastandort ID_Foto      Datum Stunde\r\n1:               Bsp            ost bsp_001 08.10.2020      3\r\n2:               Bsp            ost bsp_002 07.10.2020      0\r\n3:               Bsp            ost bsp_003 06.10.2020     16\r\n4:               Bsp            ost bsp_004 09.10.2020     24\r\n5:               Bsp            ost bsp_005 07.10.2020     17\r\n6:               Bsp            ost bsp_006 12.10.2020     23\r\n        Art Anzahl Richtung     Aktivitaet     Begleittier Wildtier\r\n1:   Mensch      3  Bergauf Spaziergaenger Hund_ohne_Leine        0\r\n2: Wildtier      4  Bergauf              0               0     Hase\r\n3: Wildtier      1  Bergauf              0               0     Hase\r\n4: Wildtier      6   Bergab              0               0     Hase\r\n5: Wildtier      7  Bergauf              0               0    Fuchs\r\n6:   Mensch     10  Bergauf   Unbestimmbar         Anderes        0\r\ncam <- cam %>% \r\n  mutate(Datum = as.Date(Datum, format = \"%d.%m.%Y\"))%>%\r\n  mutate(Kamerastandort = factor(Kamerastandort))%>%\r\n  mutate(Art = factor(Art))%>%\r\n  mutate(Richtung = factor(Richtung))%>%\r\n  mutate(Aktivität = factor(Aktivitaet))%>%\r\n  mutate(Begleittier = factor(Begleittier))%>%\r\n  mutate(Wildtier = factor(Wildtier))\r\n\r\n# Datensatz trennen ####\r\n# Kamera ost und West sind noch in einem Datensatz.\r\n# Wir betrachten jeden Standort einzeln --> trennen aufgrund Name Standort\r\nost <- filter(cam, Kamerastandort == \"ost\")\r\nwest <- filter(cam, Kamerastandort == \"west\")\r\n\r\n# 2.3 Verteilung pruefen ####\r\n# mittels Histogram \r\n# bei explorativen Analysen macht es immer Sinn sich die Verteilung der Daten anzuschauen\r\nhist(ost$Anzahl[ost$Art==\"Mensch\" &# wir sind vorerst nur an den Menschen interessiert\r\n                  !ost$Anzahl==0], # hier schliesse ich die Nuller aus der Visualisierung aus\r\n     breaks = 10) \r\n\r\nhist(west$Anzahl[west$Art==\"Mensch\" &\r\n                  !west$Anzahl==0], \r\n     breaks = 10) \r\n\r\n\r\n\r\n# 2.4 mittels Scatterplot ####\r\nplot(x=ost$Datum[ost$Art==\"Mensch\" &\r\n                   !ost$Anzahl==0], \r\n     y=ost$Anzahl[ost$Art==\"Mensch\" &\r\n                    !ost$Anzahl==0], \r\n     xlab = \"Datum\")\r\n\r\n\r\n\r\nplot(x=west$Datum[west$Art==\"Mensch\" &\r\n                   !west$Anzahl==0], \r\n     y=west$Anzahl[west$Art==\"Mensch\" &\r\n                    !west$Anzahl==0], \r\n     xlab = \"Datum\")\r\n\r\n\r\n\r\n# Filter ####\r\n# fuer die weiteren Analysen schliessen wir die Wildtiere komplett aus\r\nost <- filter(ost, Art == \"Mensch\")\r\nwest <- filter(west, Art == \"Mensch\")\r\n\r\n# Dennoch wolle wir auch wissen, welche Tiere auf dem Areal unterwegs sind\r\n# Dafuer gibts einen separaten Datensatz\r\nTiere <- filter(cam, cam$Art == \"Wildtier\")\r\n\r\n\r\n\r\n\r\n\r\n#.##############################################################################################\r\n# 3. ANALYSE #####\r\n#.###############################################################################################\r\n\r\n# Fuer die Analyse Eigenschaften Datensatz anschauen\r\nsummary(ost)\r\n\r\n\r\n Person_Auswertung  Kamerastandort   ID_Foto         \r\n Length:26          ost :26        Length:26         \r\n Class :character   west: 0        Class :character  \r\n Mode  :character                  Mode  :character  \r\n                                                     \r\n                                                     \r\n                                                     \r\n     Datum                Stunde            Art         Anzahl      \r\n Min.   :2020-10-06   Min.   : 0.00   Mensch  :26   Min.   : 1.000  \r\n 1st Qu.:2020-10-07   1st Qu.: 6.25   Wildtier: 0   1st Qu.: 3.000  \r\n Median :2020-10-08   Median :14.00                 Median : 6.000  \r\n Mean   :2020-10-08   Mean   :13.04                 Mean   : 5.308  \r\n 3rd Qu.:2020-10-10   3rd Qu.:20.75                 3rd Qu.: 6.000  \r\n Max.   :2020-10-12   Max.   :23.00                 Max.   :10.000  \r\n         Richtung   Aktivitaet                 Begleittier\r\n Bergab      : 7   Length:26          0              :8   \r\n Bergauf     :15   Class :character   Anderes        :6   \r\n Unbestimmbar: 4   Mode  :character   Hund_angeleint :9   \r\n                                      Hund_ohne_Leine:3   \r\n                                                          \r\n                                                          \r\n    Wildtier           Aktivität\r\n 0      :26   0             :0  \r\n Anderes: 0   Anderes       :8  \r\n Fuchs  : 0   Biker         :3  \r\n Hase   : 0   Landwirtschaft:3  \r\n Reh    : 0   Spaziergaenger:7  \r\n              Unbestimmbar  :5  \r\n\r\nsummary(west)\r\n\r\n\r\n Person_Auswertung  Kamerastandort   ID_Foto         \r\n Length:28          ost : 0        Length:28         \r\n Class :character   west:28        Class :character  \r\n Mode  :character                  Mode  :character  \r\n                                                     \r\n                                                     \r\n                                                     \r\n     Datum                Stunde            Art         Anzahl     \r\n Min.   :2020-10-06   Min.   : 1.00   Mensch  :28   Min.   :0.000  \r\n 1st Qu.:2020-10-07   1st Qu.: 6.75   Wildtier: 0   1st Qu.:1.750  \r\n Median :2020-10-09   Median :11.00                 Median :3.500  \r\n Mean   :2020-10-09   Mean   :12.07                 Mean   :4.143  \r\n 3rd Qu.:2020-10-11   3rd Qu.:16.75                 3rd Qu.:7.250  \r\n Max.   :2020-10-12   Max.   :24.00                 Max.   :9.000  \r\n         Richtung   Aktivitaet                 Begleittier\r\n Bergab      :11   Length:28          0              :5   \r\n Bergauf     : 8   Class :character   Anderes        :8   \r\n Unbestimmbar: 9   Mode  :character   Hund_angeleint :8   \r\n                                      Hund_ohne_Leine:7   \r\n                                                          \r\n                                                          \r\n    Wildtier           Aktivität\r\n 0      :28   0             :0  \r\n Anderes: 0   Anderes       :5  \r\n Fuchs  : 0   Biker         :8  \r\n Hase   : 0   Landwirtschaft:2  \r\n Reh    : 0   Spaziergaenger:5  \r\n              Unbestimmbar  :8  \r\n# Anzahl Total / standort ####\r\nAnzahl_Ost <- sum(ost$Anzahl)\r\nAnzahl_West <- sum(west$Anzahl)\r\n\r\n# Meiste Aktivitaet ####\r\nAkt_Ost <- ost %>%\r\n  group_by(Aktivität)%>%       # Hier sagen wir nach was wir gruppieren \r\n  summarise (n = n()) %>%      # und dann sagen wir, dass R zusammenfassen soll und zwar die Anzahl\r\n  mutate(freq = n / sum(n))%>% # und dann soll und R das prozentuale Verhaeltniss berechnen\r\n  arrange(desc(n))             # und dann das ganze absteigend sortieren\r\n\r\n# das ganze wiederholen wir fuer den zweiten Standort\r\n# Jetzt kommt die grosse Staerke von R. \r\n# Wir haben den Code zur Berechnung der Anzahl pro Gruppe bereits geschrieben.\r\n# fuer die folgenden Auswertungen koennen wir ihn einfach \"recyceln\"\r\n Akt_West<- west %>%\r\n  group_by(Aktivität)%>%\r\n  summarise (n = n()) %>%\r\n  mutate(freq = n / sum(n))%>%\r\n  arrange(desc(n))\r\n\r\nAktivitaet_West <- west %>%\r\n  group_by(Aktivität)%>%\r\n  summarise (n = n()) %>%\r\n  mutate(freq = n / sum(n))%>%\r\n  arrange(desc(n))\r\n\r\n# Begleittier\r\nBegleit_ost <- ost %>%\r\n  group_by(Begleittier)%>%\r\n  summarise (n = n()) %>%\r\n  mutate(freq = n / sum(n))%>%\r\n  arrange(desc(n))\r\n# uns interessiert es nicht, wie viele Leute kein Begleittier dabei hatten\r\nBegleit_ost <- filter(Begleit_ost, !Begleittier == \"0\")\r\n\r\nBegleit_west <- west %>%\r\n  group_by(Begleittier)%>%\r\n  summarise (n = n()) %>%\r\n  mutate(freq = n / sum(n))%>%\r\n  arrange(desc(n))\r\n\r\nBegleit_west <- filter(Begleit_west, !Begleittier == \"0\")\r\n\r\n# Wildtier\r\nWildtier <- Tiere %>%\r\n  group_by(Wildtier)%>%\r\n  summarise (n = n()) %>%\r\n  mutate(freq = n / sum(n))%>%\r\n  arrange(desc(n))\r\n\r\n\r\n\r\n#.###############################################################################################\r\n# 4. VISUALISIERUNG #####\r\n#.###############################################################################################\r\n\r\n# Verteilung der Aktivitaeten als Pie Chart ####\r\n# Zuerst eine Palette mit 5 Farben definieren\r\npal <- hcl.colors(5, palette = \"heat\")\r\n# Dann als Kreisdiagramm plotten\r\npie(Akt_West$n, labels = c(\"Anderes\", \"Biker\", \"Landwirtschaft\", \"Spaziergaenger\", \"unbestimmbar\"),\r\n    main = \"Prozentuales Verhaeltnis West\",\r\n    col = pal) \r\n\r\n\r\n\r\n# Begleittier als Bar Chart ####\r\nggplot(Begleit_ost,                      # hier den Datensatz spezifizieren\r\n       mapping=aes(x=Begleittier, y = n))+ # Absolute Anzahl darstellen\r\n  geom_col(width=0.9,position = \"dodge\")+# hier sage ich, dass ich ein Balkendiagramm will\r\n  labs(x=\"Begleittier\", y= \"Anzahl\")+    # Achsenbeschriftung setzen\r\n  theme_classic(base_size = 15)+         # Und zu guter letzt: Stil definieren\r\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) # sowie Achsenbeschr.ausrichten\r\n\r\n\r\n\r\n# Wildtier als Bar Chart ####\r\nggplot(Wildtier, mapping=aes(x=Wildtier, y=freq*100))+ # kann auch prozentual dargestellt werden\r\n  geom_col(width=0.9,position = \"dodge\")+\r\n  labs(x=\"Begleittier\", y= \"Prozent [%]\")+\r\n  theme_classic(base_size = 15)+\r\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))\r\n\r\n\r\n\r\n# Bei Bedraf koennen die selben Plots fuer den zweiten Standort gemacht werden.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_2_Felderhebung_Loesung/Musterloesung_Felderhebung_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2021-09-08T12:54:55+02:00",
    "input_file": "Musterloesung_Felderhebung.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "fallstudien/BE_S_3_Aufgabenstellung/",
    "title": "KW 43: Aufgabenstellung Wildnispark",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-09-08",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nAbschlussbericht über die multivariate Analyse\r\nZiele\r\nBisher habt ihr euch mit dem Untersuchungsgebiet beschäftigt und habt selbst ein (kleines) Besuchermonitoring durchgeführt. Das Besuchermonitoring Grüntal ist nun abgeschlossen und wir beschäftigen uns voll und ganz mit dem Wildnispark Zürich.\r\nIm Rahmen dessen programmieren wir multivariate Modelle, welche den Zusammenhang zwischen der Anzahl Besuchenden und verschiedenen Einflussfaktoren (Lockdown, Wetter, Ferien, Wochentag, Kalenderwoche) beschreiben. Dank ihnen können wir sagen, wie die Besucher:innen auf die untersuchten Faktoren reagieren (siehe dazu [Einleitung], Ziele).\r\nKonkret sollen folgende Fragestellungen beantwortet werden:\r\n\r\nWelchen Einfluss haben neben den Lockdowns auch die Wetterparameter (Sonnenscheindauer, Tageshöchsttemperatur, Niederschlagssumme) sowie der Wochentag, die Ferien, die Kalenderwoche und das Jahr auf die Besuchszahlen?\r\nDabei interessiert uns besonders, wie stark die jeweiligen Einflüsse sind, welche Effektrichtungen beobachtbar sind und welche der untersuchten Parameter signifikant sind.\r\nKönnen deutliche Unterschiede zwischen den “normalen”, vor-Covid19-Jahren und danach bei Tages-, Wochen-, und / oder Saisongang sowie den wichtigsten, deskriptiven Kennzahlen gefunden werden?\r\n\r\nJede Gruppe wertet ausschliesslich Daten eines Zählers aus. Sprecht miteinander ab, wer welchen Zähler behandelt. Jeder Zähler soll nur von einer Gruppe ausgewertet werden!\r\nFür euren Zähler stehen eventuell Zahlen zu Fussgänger:innen und Velos zur Verfügung. Entscheidet euch in diesem Fall selbst, ob ihr Fussgänger:innen ODER Velos auswerten wollt. Die anderen Daten dürft ihr vernachläsigen.\r\nIm Bericht sollen die Informationen und Erfahrungen aus dem gesamten Verlauf der Fallstudie in geeigneter Weise einfliessen. Bezüglich der Felderhebung erwarten wir keine Angaben.\r\n\r\n\r\n\r\nErwartungen\r\nStruktur / Aufbau\r\nFragestellung (siehe oben; die Fragestellung ist vorgegeben, darf aber natürlich für den Bericht geschärft und optimal formuliert und konkretisiert werden.)\r\nMethoden (kurzes Kapitel mit den statistischen Analysen)\r\nResultate (deskriptive Statistik, multivariates Modell; kurzer Fliesstext sowie die notwendigen Tabellen und eine Auswahl möglichst informativer Grafiken)\r\nDiskussion (Diskussion der deskriptiven Analysen und der Modellergebnisse; dieser Abschnitt sollte die eigenen Resultate auch im Zusammenhang mit aktueller Fachliteratur reflektieren.)\r\nLiteraturverzeichnis (Tipp: Das Literaturverzeichnis sollte vollständig sein, sowie formal korrekt und einheitlich daherkommen. Wir erwarten speziell in der Diskussion eine Abstützung auf aktuelle Fachliteratur. Auf Moodle haben wir Euch eine Auswahl relevanter Papers bereitgestellt.)\r\nAnhang (für alle Auswertungen relevanter R-Code in geeigneter Form)\r\nGesamtumfang max. 7500 Zeichen (inkl. Leerzeichen; exkl. Einleitung, Tabellen, Literaturverzeichnis und Anhang)\r\nAbgabe am 8.1.2022 auf Moodle oder per Mail an hoce@zhaw.ch\r\nBewertungskriterien\r\nIst die Methode klar und verständlich formuliert?\r\nSind die deskriptiven Analysen klar beschrieben und geeignet visualisiert?\r\nIst die Variablenselektion klar beschrieben, plausibel und nachvollziehbar?\r\nSind die Modellresultate in Text- und Tabellenform korrekt beschrieben und geeignet visualisiert?\r\nIst die Diskussion klar formuliert und inhaltlich schlüssig?\r\nWie gut ist die Diskussion auf relevante und aktuelle Fachliteratur abgestützt?\r\nZusätzliche bewerten wir die inhaltliche Dichte der Arbeit und die formale Qualität (Sprache, Struktur, Aufbau, Darstellung, Literaturverzeichnis, Umgang mit Literatur im Text)\r\nZusammensetzung der Fallstudiennote:\r\nFallstudie-Leistungsnachweis 1 - Forschungsplan: 30%\r\nFallstudie-Leistungsnachweis 2 - Multivariate Analyse: 70%\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_3_Aufgabenstellung/Aufbau_Fallstudie_Profil_S.png",
    "last_modified": "2021-09-08T11:27:32+02:00",
    "input_file": "Aufgabenstellung.knit.md",
    "preview_width": 1429,
    "preview_height": 903
  },
  {
    "path": "fallstudien/BE_S_4_Projektierung/",
    "title": "KW 43: R Projekt vorbereiten",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-09-08",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nArbeiten mit Projekten\r\nVor den eigentlichen Auswertungen muessen einige Vorbereitungen unternommen werden. Die Zeit, die man hier investiert, wird in der späteren Projektphase um ein Mehrfaches eingespart. R Studio ist vereinfacht das Arbeiten mit R enorm.\r\n\r\n\r\n\r\nIch empfehle generell mit Projekten zu arbeiten, da diese sehr einfach ausgetauscht (auf verschiedene Rechner) und somit auch reproduziert werden koennen. Wichtig ist, dass es keine absoluten Arbeitspfade sondern nur relative gibt. Der Datenimport (und -export) kann mithilfe dieser relativen Pfade stark vereinfacht werden. –> Kurz gesagt: Projekte helfen alles am richtigen Ort zu behalten (mehr zur Arbeit mit Projekten: https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects).\r\nErstellt an einem passenden Speicherort ein neues Projekt mit einem treffenden Namen:\r\n–> File / New Project\r\nAufgabe 1: Projektaufbau\r\nNutzt fuer allen Text, welcher nicht im Code integriert ist, das Symbol #. Wenn ihr den Text als Titel definieren wollt, so dass er in der UEbersicht erscheint, muessen vor dem Wort # und nach dem Wort #### eingefuegt werden.\r\n\r\n\r\n# Texte, vor denen ein # und nach denen #### stehen, sind Titel\r\n# Texte, vor denen ein # steht, erklaeren den Ablauf\r\n# Zeilen ohne vorangehendes # sind Operationen\r\n\r\n# Wenn man rechts neben \"Source\" und links neben \"Environment\" klickt \r\n# (oder CTRL + SHIFT + O --> Show document Outline), \r\n# oeffnet sich die UEbersicht zu den UEberschriften\r\n\r\n\r\n\r\nTipp:\r\nAlt + - = <-\r\nCtrl + Shift + M = %>%\r\nCtrl + Shift + C = # vor der ausgewaehlten Zeile\r\nZuerst immer den Titel des Projekts sowie den Autor/ die Autorin des Skripts nennen. Hier soll auch die Herkunft der Daten ersichtlich sein und falls externe Daten verwendet werden, sollte geklaert werden, wer Dateneigentuemer ist (Wildnispark und Meteo Schweiz).\r\nIm Skript soll immer die Ordnerstruktur des Projekts genannt werden. So kann der Arbeitsvorgang auf verschiedenen Rechnern einfach reproduziert werden (ich verwende hier ein Projektornder mit den Unterordnern skripts, data, results und results_compare).\r\nBeschreibt zudem folgendes die verwendete Meteodaten (siehe dazu Metadata Meteodaten, –> order_XXX_legend.txt)\r\nEin Skript soll in R eigentlich immer (mehr oder weniger) nach dem selbem Schema aufgebaut sein. Dieses Schema enthaellt (nach den bereits erwaehnten Definitionen) 4 Kapitel:\r\nMetadaten und Definitionen\r\nDatenimport,\r\nVorbereitung,\r\nDeskriptive Analyse und Visualisierung und\r\nMultifaktorielle Analyse und Visualisierung.\r\nBereitet euer Sktipt mit diesen Kapitel vor.\r\n\r\n\r\n#.################################################################################################ Einfluss von COVID19 auf das Naherholungsverhalten in WPZ ####\r\n# Fallstudie Modul Research Methods, HS21. Autor/in ####\r\n#.################################################################################################\r\n#.###############################################################################################\r\n# METADATA UND DEFINITIONEN ####\r\n#.################################################################################################\r\n# Datenherkunft ####\r\n# ...\r\n\r\n#.###############################################################################################\r\n# 1. DATENIMPORT #####\r\n#.###############################################################################################\r\n\r\n\r\n\r\nAufgabe 2: Laden der Bibliotheken\r\nGeplottet wird mit ggplot, daher wird tidyverse geladen. Diese Bibliothek ergaenzt BASE R in vielerlei Hinsicht uns ist eigentlich fast immer nötig. Da wir es bei Besucherdaten immer mit einem zeitlichen Bezug zu tun haben, benoetigen wir eine passende Bibliothek. Ich arbeite mit lubridate, POSIXct waere natuerlich auch moeglich. Base R bietet verschiedene Funktionen um Daten einzulesen. data.table ergaenzt diese Basisfunktionen sehr gut. ggpubr brauchen wir für das Darstellen von mehreren verschiedenen Plots in nur einem. PerformanceAnalytics, MuMIn, AICcmodavg, fitdistrplus, lme4 und sjPlot werden fuer die spaeteren multivariaten Analysen benoetigt. Die Modellguete werden wir mittels lattice, blmeco und lattice pruefen.\r\nLadet nun also die benoetigten Bibliotheken.\r\nAllenfalls muessen diese zuerst mit install.packages(“NAME”) installiert werden.\r\n\r\n\r\n# Benoetigte Bibliotheken ####\r\nlibrary(tidyverse) # Data wrangling und piping\r\nlibrary(lubridate) # Arbeiten mit Datumsformaten\r\nlibrary(data.table)# schnelles Dateneinlesen\r\nlibrary(ggpubr)    # to arrange multiple plots in one graph\r\nlibrary(PerformanceAnalytics) # Plotte Korrelationsmatrix\r\nlibrary(MuMIn)     # Multi-Model Inference\r\nlibrary(AICcmodavg)# Modellaverageing\r\nlibrary(fitdistrplus)# Prueft die Verteilung in Daten\r\nlibrary(lme4)      # Multivariate Modelle\r\nlibrary(blmeco)    # Bayesian data analysis using linear models\r\nlibrary(sjPlot)    # Plotten von Modellergebnissen (tab_model)\r\nlibrary(lattice)   # einfaches plotten von Zusammenhängen zwischen Variablen\r\n\r\n\r\n\r\nAufgabe 3: Zeitliche Definitionen\r\nDefiniert den zeitlichen Horizont, also Start sowie Ende der Untersuchungen. Bezieht in eure Auswertungen den gesamten verfügbaren Zeitraum ein.\r\nDafür müsst ihr in die Rohdaten eures Zählers schauen. Am einfachsten direkt in der .csv Datei.\r\n\r\n\r\ndepo_start <- as.Date(\"YYYY-MM-DD\")\r\ndepo_end <- ...\r\n\r\n\r\n\r\nWichtiger Teil unserer Auswertungen ist der Einfluss des Lockdown auf das Besuchsverhalten. Wir muessen also Start und Ende der beiden Lockdowns in der Schweiz definieren:\r\n\r\n\r\nlock_1_start_2020 <- as.Date(\"2020-03-16\")\r\nlock_1_end_2020 <- as.Date(\"2020-05-11\")\r\n\r\nlock_2_start_2021 <- as.Date(\"2020-12-22\")\r\nlock_2_end_2021 <- as.Date(\"2021-03-01\")\r\n\r\n\r\n\r\nEbenfalls muessen die erste und letzte Kalenderwoche der Untersuchungsfrist definiert werden. Diese werden bei wochenweisen Analysen ausgeklammert da sie i.d.R. unvollstaendig sind (das ist ein spaeterer Arbeitsschritt). Geht wie oben vor. Tipp: der Befehl week() liefert euch die Kalenderwoche.\r\nFerienzeiten koennen einen grossen Einfluss auf das Besueraufkommen haben. Die relevanten Ferienzeitraeume (in meinem Beispiel ab 2019, je nach dem müsst ihr das anpassen) muessen daher bekannt sein. Zur Definition der Ferien kann z.B. folgend vorgegangen werden:\r\n\r\n\r\n# (https://www.schulferien.org/schweiz/ferien/2020/)\r\nFruehlingsferien_2019_start <- as.Date(\"2019-04-13\")\r\nFruehlingsferien_2019_ende <- as.Date(\"2019-04-28\")\r\nSommerferien_2019_start <- as.Date(\"2019-07-6\")\r\nSommerferien_2019_ende <- as.Date(\"2019-08-18\")\r\nHerbstferien_2019_start <- as.Date(\"2019-10-05\")\r\nHerbstferien_2019_ende <- as.Date(\"2019-10-20\")\r\nWinterferien_2019_start <- as.Date(\"2019-12-21\")\r\nWinterferien_2019_ende <- as.Date(\"2020-01-02\")\r\n\r\nFruehlingsferien_2020_start <- as.Date(\"2020-04-11\")\r\nFruehlingsferien_2020_ende <- as.Date(\"2020-04-26\")\r\nSommerferien_2020_start <- as.Date(\"2020-07-11\")\r\nSommerferien_2020_ende <- as.Date(\"2020-08-16\")\r\nHerbstferien_2020_start <- as.Date(\"2020-10-03\")\r\nHerbstferien_2020_ende <- as.Date(\"2020-10-18\")\r\nWinterferien_2020_start <- as.Date(\"2020-12-19\")\r\nWinterferien_2020_ende <- as.Date(\"2021-01-03\")\r\n\r\nFruehlingsferien_2021_start <- as.Date(\"2021-04-24\")\r\nFruehlingsferien_2021_ende <- as.Date(\"2021-05-09\")\r\nSommerferien_2021_start <- as.Date(\"2021-07-17\")\r\n\r\n\r\n\r\nNun sind alle Vorbereitungen gemacht, die Projektstruktur aufgebaut und die eigentliche Arbeit kann beginnen.\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_4_Projektierung/the-r-project-for-statistical-computing.png",
    "last_modified": "2021-09-08T11:41:53+02:00",
    "input_file": "Projektierung.knit.md",
    "preview_width": 797,
    "preview_height": 298
  },
  {
    "path": "fallstudien/BE_S_5_Import_Vorverabeitung/",
    "title": "KW 43: Import und Datenvorverarbeitung",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-09-08",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nAufgabe 1: Datenimport\r\nDie Projektstruktur steht. Nun können die Daten eingelesen und die nötigen Datentypen definiert werden. Das tidyverse-Universum ist dazu ganz zentral.\r\n\r\n\r\n\r\nDie Zaehldaten des Wildnispark Zürich wurden vorgaengig bereinigt. Z.B. wurden Stundenwerte entfernt, an denen am Zaehler Wartungsarbeiten stattgefunden haben. Das macht es fuer uns einfach, denn wir koennen die Daten ohne vorgaengige Bereinigung einfach einlesen.\r\nLest die Zaehlaten ein und sichtet den Datensatz.\r\n\r\n\r\ndepo <- read_csv(\"./HIER RELATIVEN DATEIPFAD EINGEBEN\") \r\n# Je nach Bedarf muss der Speicherort sowie der Dateiname angepasst werden\r\n\r\n\r\n\r\nHinweis zu den Daten: Im Stundenformat zeigen die Werte um 11:00 die Zähldaten zwischen 11:00 und 12:00.\r\n1a)\r\nIm Datensatz des Wildnisparks sind Datum und Uhrzeit in einer Spalte. Diese muessen getrennt werden. Ich schlage hier den Ansatz des piping vor. Damit koennen in einem “Rutsch” mehrere Operationen ausgefuehrt werden.\r\nEbenfalls muss das Datum als solches definiert werden. Welches Format hat es (format = \"\")?\r\nSchliesslich schneiden wir den Datensatz auf die Untersuchungsdauer zu.\r\n\r\n\r\nstr(depo)\r\ndepo <- depo %>%\r\n  mutate(Datum_Uhrzeit = as.character(DatumUhrzeit)) %>%\r\n  separate(Datum_Uhrzeit, into = c(\"Datum\", \"Zeit\"), sep = \" \")%>% # mit seperate() trennt man\r\n                                                                   # 1 Spalte in 2.\r\n  mutate(Datum = as.Date(Datum, format = \"HIER DATUMSFORMAT\")) %>% # hier wird Text zum Datumsformat\r\n  # Schneide das df auf den gewuenschten Zeitraum zu\r\n  filter(Datum >= depo_start, Datum <=  depo_end) # das Komma hat die gleiche Funktion wie ein &\r\n\r\n\r\n\r\n1b)\r\nIhr könnt selbst wählen, ob ihr Fussgänger:innen oder Velos untersuchen wollt.\r\nEntfernt die überflüssigen Spalten aus dem Datensatz.\r\n1c)\r\nBerechnen des Totals (IN + OUT), da dieses in den Daten nicht vorhanden ist (wiederum mit piping).\r\nTipp: Wenn man R sagt: “addiere mir Spalte x mit Spalte y”, dann macht R das fuer alle Zeilen in diesen zwei Spalten. Wenn man nun noch sagt: “speichere mir das Ergebnis dieser Addition in einer neuen Spalte namens Total”, dann hat man die Aufgabe bereits geloest. Arbeitet mit mutate()).\r\nEntfernt nun alle NA-Werte mit na.omit().\r\n2a)\r\nLest die Meteodaten ein und speichert sie unter meteo.\r\n2b)\r\nAuch hier muessen die Datentypen manuell gesetzt werden.\r\nTipp: Das Datum wird als Integer erkannt. Zuerst muss es in Text umgewaldelt werden aus dem dann das eigentliche Datum herausgelesen werden kann. Das ist muehsam - darum hier der Code.\r\n\r\n\r\nmeteo <- transform(meteo, time = as.Date(as.character(time), \"%Y%m%d\"))\r\n\r\n\r\n\r\nHinweis Was ist eigentlich Niederschlag:\r\nhttps://www.meteoschweiz.admin.ch/home/wetter/wetterbegriffe/niederschlag.html\r\nWerden den anderen Spalten die richtigen Typen zugewiesen? Falls nicht, ändert die Datentypen.\r\nNun schneiden wir den Datensatz auf die Untersuchungsdauer zu.\r\n2c)\r\nJetzt muessen auch hier alle nicht verfuegbare Werte (NA’s) herausgefiltert werden.\r\nTipp: Entweder geht das mit na.omit() oder, etwas konservativer, koennen mit filter() die Spalten genauer definiert werden. Mit folgendem Codeblock koennen z.B. alle Werte gefiltert werden, die in der Spalte stn nicht gleich NA sind (es werden also die Werte behalten, die vorhanden sind). Der Code muss für die anderen relevanten Spalten noch ergaenzt werden.\r\n\r\n\r\nmeteo <- meteo %>%\r\n  filter(!is.na(stn))%>%\r\n  ...%>%\r\n  ...\r\n\r\n\r\n\r\nPrueft nun, wie die Struktur des data.frame (df) aussieht und ob alle NA Werte entfernt wurden. Stimmen alle Datentypen?\r\nAufgabe 3: Datenvorverarbeitung (Mutationen)\r\n3a)\r\nJetzt fügen wir wahnsinnig viele Convinience Variabeln hinzu. Wir brauchen:\r\nWochentag, der Befehl dazu ist weekdays()\r\nTipp: R sortiert die Levels aplhabetisch. Da das in unserem Fall aber sehr unpraktisch ist, müssen die Levels manuell bestimmt werden\r\n\r\n\r\n  ...\r\n  mutate(Wochentag = base::factor(Wochentag, \r\n                            levels = c(\"Montag\", \"Dienstag\", \"Mittwoch\", \r\n                                       \"Donnerstag\", \"Freitag\", \"Samstag\", \"Sonntag\")))\r\n  ...\r\n\r\n\r\n\r\nIst es ein Werktag oder Wochenende?\r\n\r\n\r\n  ...\r\n  mutate(Wochenende = if_else(Wochentag == \"Montag\" | Wochentag == \"Dienstag\" | \r\n                           Wochentag == \"Mittwoch\" | Wochentag == \"Donnerstag\" | \r\n                           Wochentag == \"Freitag\", \"Werktag\", \"Wochenende\"))\r\n  ...\r\n\r\n\r\n\r\nFrage: Was bedeuten die | (zu erstellen mit AltGr + 7)? Welches ist das if Argument, welches das else?\r\nKalenderwoche: week()\r\nMonat: month()\r\nJahr: year()\r\nVor oder nach COVID?\r\n\r\n\r\n  ...\r\n  mutate(COVID = if_else(Datum >= lock_1_start_2020, \"covid\", \"normal\"))\r\n\r\n\r\n\r\nLockdown\r\nTipp: ich mache das nachgelagert, da ich die Erfahrung hatte, dass zu viele Operationen in einem Schritt auch schon mal etwas durcheinander erzeugen koennen. Hinweis II: Wir packen die beiden Lockdowns in eine Spalte –> long ist schöner als wide.\r\n\r\n\r\ndepo <- depo %>% \r\nmutate(Lockdown = if_else(Datum >= lock_1_start_2020 & Datum <= lock_1_end_2020,\r\n                          \"Lockdown_1\",\r\n                          if_else(Datum >= lock_2_start_2021 & Datum <= lock_2_end_2021,\r\n                                  \"Lockdown_2\", \"0\"))) \r\n# hat das gepklappt?!\r\nunique(depo$Lockdown)\r\n\r\n\r\n\r\nFrage: Welches ist das if Argument, welches das else?\r\nÄndert die Datentypen der Spalten Wochenende, KW, Lockdown sowie COVID zu factor.\r\n3b)\r\nNun soll noch die volle Stunde als Integer im Datensatz stehen. Diese Angabe muss etwas muehsam aus den Daten gezogen werden (darum hier der fertige Code dazu):\r\n\r\n\r\ndepo$Stunde <- as.numeric(format(as.POSIXct(depo$Zeit,format=\"%H:%M\"),\"%H\"))\r\n\r\n\r\n\r\n3c)\r\nDie Daten wurden durch den WPZ kalibriert. Wir runden sie fuer unserer Analysen auf Ganzzahlen (unser Modell kann z. B. nicht mit Kommazahlen in der ahbängigen Variable umgehen).\r\nDefinieren sie sicherheitshalber als Ganzzahl (Integer)\r\nMacht das für IN, OUT und Total.\r\n\r\n\r\ndepo$... <- round(..., digits = 0)\r\ndepo$... <- as.integer(...)\r\n\r\n\r\n\r\nAufgabe 4: Aggregierung der Stundendaten\r\n4a)\r\nUnsere Daten liegen im Stundenformat vor. Fuer einige Auswertungen muessen wir aber auf ganze Tage zurueckgreifen koennen.\r\nDie Stundendaten muessen zu ganzen Tagen aggregiert werden. Macht das wiederum mit piping. Berechnet die Summen pro Nutzergruppe und Richtung pro Tag.\r\nTipp: Wenn man die Convinience Variablen als grouping variable einspeisst, dann werden sie in das neue df uebernommen und muessen nicht nochmals hinzugefuegt werden\r\n\r\ndepo_d <- depo %>% \r\n  group_by(VARIABLE1, VARIABLE2, ...) %>%   # Gruppieren nach den Variablen\r\n  summarise(Total = sum(Fuss_IN + Fuss_OUT),# Berechnen der gewünschten Werte\r\n            Fuss_IN = sum(Fuss_IN),\r\n            ...\r\n\r\n4b)\r\nAggregiere die Stundenwerte nach dem Jahr und Monat.\r\nTipp: Braucht wiederum group_by() und summarise(). Nun brauchen wir nur noch das Total, keine Richtungstrennung mehr.\r\nFügt den neu erstellten df eine Spalte mit Jahr und Monat hinzu. Das ist etwas mühsam, darum hier der fertige Code dazu:\r\n\r\n\r\n# sortiere das df aufsteigend (nur das es sicher stimmt)\r\ndepo_m <- as.data.frame(depo_m)\r\ndepo_m[\r\n  with(depo_m, order(Jahr, Monat)),]\r\n# mache dann aus Jahr und Monat faktoren\r\ndepo_m <- depo_m %>% \r\n  mutate(Jahr = as.factor(Jahr)) %>% \r\n  mutate(Monat = as.factor(Monat)) %>% \r\n  mutate(Ym = paste(Jahr, Monat)) %>% # und mache eine neue Spalte, in der Jahr und\r\n  mutate(Ym= factor(Ym, levels=unique(Ym))) # Monat in zusammen sind\r\n\r\n\r\n\r\nNun sind alle Daten vorbereitet. Der naechste Schritt ist die Analyse.\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_5_Import_Vorverabeitung/tidyverse.png",
    "last_modified": "2021-09-08T11:39:32+02:00",
    "input_file": "Import_Vorverarbeitung.knit.md",
    "preview_width": 718,
    "preview_height": 424
  },
  {
    "path": "fallstudien/BE_S_5_Import_Vorverarbeitung_Loesung/",
    "title": "KW 43: Musterloesung Import und Datenvorverarbeitung ",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-09-08",
    "categories": [
      "Biodiversity & Ecosystems (S) Musterloesung"
    ],
    "contents": "\r\n\r\n\r\n\r\nAufgabe 1: Zähldaten\r\n\r\n\r\n#.################################################################################################\r\n# 1. DATENIMPORT #####\r\n#.################################################################################################\r\n\r\n# Beim Daten einlesen koennen sogleich die Datentypen und erste Bereinigungen vorgenommen werden\r\n\r\n# 1.1 Zaehldaten ####\r\n# Die Zaehldaten des Wildnispark wurden vorgaengig bereinigt. z.B. wurden Stundenwerte \r\n# entfernt, an denen am Zaehler Wartungsarbeiten stattgefunden haben.\r\n\r\n# lese die Daten mithilfe der Bibliothek data.table ein (alternative zu read_csv und dergleichen). \r\n# Je nach Bedarf muss der Speicherort sowie der Dateiname angepasst werden\r\ndepo <- fread(\"211_sihlwaldstrasse_2017_2021.csv\")\r\n\r\n# Hinweis zu den Daten:\r\n# In hourly analysis format, the data at 11:00 am corresponds to the counts saved between \r\n# 11:00 am and 12:00 am.\r\n\r\n# Anpassen der Datentypen und erstes Sichten\r\nstr(depo)\r\n\r\ndepo <- depo %>%\r\n  mutate(Datum_Uhrzeit = as.character(DatumUhrzeit)) %>%\r\n  separate(Datum_Uhrzeit, into = c(\"Datum\", \"Zeit\"), sep = \" \")%>%\r\n  mutate(Datum = as.Date(Datum, format = \"%d.%m.%Y\")) %>% \r\n  # Schneide das df auf den gewuenschten Zeitraum zu\r\n  filter(Datum >= depo_start, Datum <=  depo_end) # das Komma hat die gleiche Funktion wie ein &\r\n\r\n# In dieser Auswertung werden nur Velos betrachtet!\r\ndepo <- depo[,-c(1,4,5), drop=FALSE] # mit diesem Befehl lassen wir Spalten \"fallen\", \r\n                                     # aendern aber nichts an der Form des data.frames\r\n\r\n# Berechnen des Totals, da dieses in den Daten nicht vorhanden ist\r\ndepo <- depo%>%\r\n  mutate(Total = Fuss_IN + Fuss_OUT)\r\n\r\n# Entferne die NA's in dem df.\r\ndepo <- na.omit(depo)\r\n\r\n\r\n\r\nAufgabe 2: Meteodaten\r\n\r\n\r\n# 1.2 Meteodaten ####\r\n# Einlesen\r\nmeteo <- fread(\"order_97149_data.txt\")\r\n\r\n# Datentypen setzen\r\n# Das Datum wird als Integer erkannt. Zuerst muss es in Text umgewaldelt werden aus dem dann\r\n# das eigentliche Datum herausgelesen werden kann\r\nmeteo <- transform(meteo, time = as.Date(as.character(time), \"%Y%m%d\"))\r\n\r\n# Die eigentlichen Messwerte sind alle nummerisch\r\nmeteo <- meteo%>%\r\n  mutate(tre200jx = as.numeric(tre200jx))%>%\r\n  mutate(rre150j0 = as.numeric(rre150j0))%>%\r\n  mutate(sremaxdv = as.numeric(sremaxdv)) %>% \r\n  filter(time >= depo_start, time <=  depo_end) # schneide dann auf Untersuchungsdauer\r\n\r\n# Was ist eigentlich Niederschlag:\r\n# https://www.meteoschweiz.admin.ch/home/wetter/wetterbegriffe/niederschlag.html\r\n\r\n# Filtere Werte mit NA\r\nmeteo <- meteo %>%\r\n  filter(!is.na(stn)) %>%\r\n  filter(!is.na(time))%>%\r\n  filter(!is.na(tre200jx))%>%\r\n  filter(!is.na(rre150j0))%>%\r\n  filter(!is.na(sremaxdv))\r\n# Pruefe ob alles funktioniert hat\r\nstr(meteo)\r\nsum(is.na(meteo)) # zeigt die Anzahl NA's im data.frame an\r\n\r\n\r\n\r\nAufgabe 3: Datenvorverarbeitung (Mutationen)\r\n\r\n\r\n#.################################################################################################\r\n# 2. VORBEREITUNG DER DATEN #####\r\n#.################################################################################################\r\n\r\n# 2.1 Convinience Variablen ####\r\n# fuege dem Dataframe (df) die Wochentage hinzu\r\ndepo <- depo %>% \r\n  mutate(Wochentag = weekdays(Datum)) %>% \r\n  # R sortiert die Levels aplhabetisch. Da das in unserem Fall aber sehr unpraktisch ist,\r\n  # muessen die Levels manuell manuell bestimmt werden\r\n  mutate(Wochentag = base::factor(Wochentag, \r\n                            levels = c(\"Montag\", \"Dienstag\", \"Mittwoch\", \r\n                                       \"Donnerstag\", \"Freitag\", \"Samstag\", \"Sonntag\"))) %>% \r\n  # Werktag oder Wochenende hinzufuegen\r\n  mutate(Wochenende = if_else(Wochentag == \"Montag\" | Wochentag == \"Dienstag\" | \r\n                           Wochentag == \"Mittwoch\" | Wochentag == \"Donnerstag\" | \r\n                           Wochentag == \"Freitag\", \"Werktag\", \"Wochenende\"))%>%\r\n  #Kalenderwoche hinzufuegen\r\n  mutate(KW= week(Datum))%>%\r\n  # monat und Jahr\r\n  mutate(Monat = month(Datum)) %>% \r\n  mutate(Jahr = year(Datum)) %>% \r\n  # vor oder danach?\r\n  mutate(COVID = if_else(Datum >= lock_1_start_2020, \"covid\", \"normal\"))\r\n\r\n#Lockdown \r\n# Hinweis: ich mache das nachgelagert, da ich die Erfahrung hatte, dass zu viele \r\n# Operationen in einem Schritt auch schon mal durcheinander erzeugen koennen.\r\n# Hinweis II: Wir packen die beiden Lockdowns in eine Spalte --> long ist schoener als wide\r\ndepo <- depo %>% \r\nmutate(Lockdown = if_else(Datum >= lock_1_start_2020 & Datum <= lock_1_end_2020,\r\n                          \"Lockdown_1\",\r\n                          if_else(Datum >= lock_2_start_2021 & Datum <= lock_2_end_2021,\r\n                                  \"Lockdown_2\", \"0\"))) \r\n# hat das gepklappt?!\r\nunique(depo$Lockdown)\r\n\r\n# aendere die Datentypen\r\ndepo <- depo %>% \r\n  mutate(Wochenende = as.factor(Wochenende)) %>% \r\n  mutate(KW = factor(KW)) %>% \r\n  mutate(Lockdown = as.factor(Lockdown)) %>% \r\n  # mit factor() koennen die levels direkt einfach selbst definiert werden.\r\n  # wichtig: speizfizieren, dass aus R base, ansonsten kommt es zu einem \r\n  # mix-up mit anderen packages\r\n  mutate(COVID = base::factor(COVID, levels = c(\"normal\", \"covid\")))\r\nstr(depo)\r\n  \r\n# Fuer einige Auswertungen muss auf die Stunden als nummerischer Wert zurueckgegriffen werden\r\ndepo$Stunde <- as.numeric(format(as.POSIXct(depo$Zeit,format=\"%H:%M\"),\"%H\"))\r\n\r\n# Die Daten wurden kalibriert. Wir runden sie fuer unserer Analysen auf Ganzzahlen\r\ndepo$Total <- round(depo$Total, digits = 0)\r\ndepo$Fuss_IN <- round(depo$Fuss_IN, digits = 0)\r\ndepo$Fuss_OUT <- round(depo$Fuss_OUT, digits = 0)\r\n\r\n\r\n\r\nAufgabe 4: Aggregierung der Stundendaten\r\n\r\n\r\n# 2.3 Aggregierung der Stundendaten zu ganzen Tagen ####\r\n# Zur Berechnung von Kennwerten ist es hilfreich, wenn neben den Stundendaten auch auf Ganztagesdaten\r\n# zurueckgegriffen werden kann\r\n# hier werden also pro Nutzergruppe und Richtung die Stundenwerte pro Tag aufsummiert\r\ndepo_d <- depo %>% \r\n  group_by(Datum, Wochentag, Wochenende, KW, Monat, Jahr, Lockdown, COVID) %>% \r\n  summarise(Total = sum(Fuss_IN + Fuss_OUT), \r\n            Fuss_IN = sum(Fuss_IN),\r\n            Fuss_OUT = sum(Fuss_OUT)) \r\n# Wenn man die Convinience Variablen als grouping variable einspeisst, dann werden sie in \r\n# das neue df uebernommen und muessen nicht nochmals hinzugefuegt werden\r\n\r\n# pruefe das df\r\nhead(depo_d)\r\n\r\n# Gruppiere die Werte nach Monat\r\ndepo_m <- depo %>% \r\n  group_by(Jahr, Monat) %>% \r\n  summarise(Total = sum(Total)) \r\n# sortiere das df aufsteigend (nur das es sicher stimmt)\r\ndepo_m <- as.data.frame(depo_m)\r\ndepo_m[\r\n  with(depo_m, order(Jahr, Monat)),]\r\n# mache dann aus Jahr und Monat faktoren\r\ndepo_m <- depo_m %>% \r\n  mutate(Jahr = as.factor(Jahr)) %>% \r\n  mutate(Monat = as.factor(Monat)) %>% \r\n  mutate(Ym = paste(Jahr, Monat)) %>% # und mache eine neue Spalte, in der Jahr und\r\n  mutate(Ym= factor(Ym, levels=unique(Ym))) # Monat in zusammen sind\r\n\r\n# Beispiele pruefen der Daten:\r\n\r\n# Verteilung mittels Histogram pruefen\r\nhist(depo$Total[!depo$Total==0] , breaks = 100) \r\n\r\n\r\n\r\n# hier schliesse ich die Nuller aus der Visualisierung aus\r\n\r\n# Verteilung mittels Scatterplot pruefen\r\nplot(x=depo$Datum, y=depo$Total)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_5_Import_Vorverarbeitung_Loesung/Musterloesung_Import_Vorverarbeitung_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2021-09-08T13:01:41+02:00",
    "input_file": "Musterloesung_Import_Vorverarbeitung.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  }
]
