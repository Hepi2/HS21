[
  {
    "path": "fallstudien/BE_N_1_Aufgabe3_Datenverarbeitung/",
    "title": "KW42: Daten(vor)verarbeitung",
    "description": {},
    "author": [
      {
        "name": "Beni Sigrist",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "Biodiversity & Ecosystems (N)"
    ],
    "contents": "\r\nProjektaufbau RStudio-Projekte\r\nVor den eigentlichen Auswertungen muessen einige vorbereitende Arbeiten unternommen werden. Die Zeit, die man hier investiert, wird in der spaeteren Projektphase um ein vielfaches eingespart. Im Skript soll die Ordnerstruktur des Projekts genannt werden, damit der Arbeitsvorgang auf verschiedenen Rechnern reproduzierbar ist.\r\nArbeitet mit Projekten, da diese sehr einfach ausgetauscht und somit auch reproduziert werden koennen; es gibt keine absoluten Arbeitspfade sondern nur relative. Der Datenimport (und auch der Export) kann mithilfe dieser relativen Pfaden stark vereinfacht werden. Projekte helfen alles am richtigen Ort zu behalten. (mehr zur Arbeit mit Projekten: https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects)\r\nAufbau von R-Skripten\r\nIm Kopf des Skripts zuerst immer den Titel des Projekts sowie die Autor:innen des Skripts nennen. Hier soll auch die Herkunft der Daten ersichtlich sein und falls externe Daten verwendet werden, sollte geklaert werden, wer die Datenherrschaft hat (Rehdaten: Forschungsgruppe WILMA).\r\n\r\n\r\n#.##################################################################################\r\n# Daten(vor)verarbeitung Fallstudie WPZ  ####\r\n# Modul Research Methods, HS21. Autor/in ####\r\n#.##################################################################################\r\n\r\n# Beschreibt zudem folgendes:\r\n# • Ordnerstruktur (ich verwende hier den Projektordner mit den Unterordnern Skripts, \r\n# Feldaufnahmen, Data, Results, Plots)\r\n# • Verwendete Daten\r\n\r\n# Ein Skript soll in R eigentlich immer nach dem selbem Schema aufgebaut sein. \r\n# Dieses Schema beinhaltet (nach dem bereits erwaehnten Kopf des Skripts) 4 Kapitel: \r\n\r\n\r\n\r\n1. Datenimport\r\n2. Datenvorverarbeitung\r\n3. Analyse\r\n4. Visualisierung\r\nBereitet euer Skript also nach dieser Struktur vor. Nutzt fuer den Text, welcher nicht Code ist, vor dem Text das Symbol #. Wenn ihr den Text als Titel definieren wollt, der die grobe Struktur des Skripts absteckt, baut in wie in folgendem Beispiel auf:\r\n\r\n\r\n#.###################################################################################\r\n# METADATA ####\r\n#.###################################################################################\r\n# Datenherkunft ####\r\n# ...\r\n\r\n#.###################################################################################\r\n# 1. DATENIMPORT ####\r\n#.###################################################################################\r\n\r\n\r\n\r\nlibraries laden: hier tidyverse\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\n\r\n\r\nHerunterladen der Daten der Feldaufnahmen von Moodle (Aufgabe3_Feldaufnahmen_alle_Gruppen.zip), Einlesen, Sichtung der Datensaetze und der Datentypen\r\n\r\n\r\n# Die Datensätze aller Teams müssen erst noch in CSVs umgewandelt werden, bevor sie \r\n# eingelesen werden können \r\n\r\ndf_team1 <- read_delim(\"Felderhebung Waldstruktur_TEAM_1_türkis.csv\", \r\n                       delim = \";\")\r\n\r\ndf_team2 <- read_delim(\"Felderhebung_Team_2.csv\", delim = \";\")\r\n# Achtung! Beim Datensatz des Teams 2 ist eine zusaetzliche Zeile eingefuegt, die\r\n# das Einlesen erschwert.\r\n# Ausserdem gibt es bei den Zeilen DG Rubus, DG Strauchschicht und DG Baumschicht ein  \r\n# Problem mit dem Datentyp resp. den Zahlen.\r\n\r\ndf_team3 <- read_delim(\"ReMe_Felderhebung_Gruppe3.csv\", delim = \";\")\r\n# Achtung! Hier ist beim Einlesen etwas falsch gelaufen. \r\n\r\ndf_team4 <- read_delim(\"Felderhebung_Waldstruktur_Team_4.csv\", \r\n                       delim = \";\")\r\n\r\ndf_team5 <- read_delim(\"Felderhebung_Waldstruktur_Team5.csv\", \r\n                       delim = \";\")\r\n# Achtung! Beim Umwandeln in das CSV muss hier die Titelzeile entfernt werden damit\r\n# das Einlesen reibungslos funktioniert\r\n\r\ndf_team6 <- read_delim(\"Aufnahmen_Landforst_HS21_Gruppe_6.csv\", \r\n                       delim = \";\")\r\n\r\n\r\n# hier koennen die Probekreise mit den Angaben zur Anzahl Rehlokalisationen und der \r\n# LIDAR-basierten Ableitung der Waldstruktur eingelesen werden\r\n\r\ndf_reh <- read_delim(\"Aufgabe3_Reh_Waldstruktur_211014.csv\", delim = \";\")\r\nstr(df_reh)\r\n\r\n\r\n# Die eingelesenen Datensaetze anschauen und versuchen zu einem Gesamtdatensatz  \r\n# verbinden. Ist der Output zufriedenstellend?\r\n\r\ndf_gesamt <- bind_rows(df_team1, df_team2, df_team3, df_team4, df_team5, df_team6)\r\nstr(df_gesamt)\r\n\r\n\r\n\r\nAufgabe 1:\r\n1.1 Einfuegen zusaetzliche Spalte pro Datensatz mit der Gruppenzugehoerigkeit (Team1-6)\r\n1.2 Spaltenumbenennung damit die Bezeichungen in allen Datensaetzen gleich sind und der Gesamtdatensatz zusammengefuegt werden kann\r\n–> Befehle mutate und rename, mit pipes (%>%) in einem Schritt moeglich\r\nAufgabe 2:\r\nZusammenfuehren der Teildatensaetze zu einem Datensatz\r\nAufgabe 3:\r\nVerbinden (join) des Datensatzes der Felderhebungen mit dem Datensatz der Rehe.\r\nZiel: ein Datensatz mit allen Kreisen der Felderhebung, angereichert mit den Umweltvariablen Understory und Overstory aus den LIDAR-Daten (DG_us, DG_os) aus dem Rehdatensatz.\r\n–> Welche Art von join? Welche Spalten zum Verbinden (by = ?) der Datensaetze\r\nAufgabe 4:\r\nScatterplot der korrespondondierenden Umweltvariablen aus den Felderhebungen gegen die Umweltvariablen aus den LIDAR-Daten erstellen (zusaetzlich Einfaerben der Gruppen und Regressionslinie darueberlegen).\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-11-02T10:58:58+01:00",
    "input_file": {}
  },
  {
    "path": "fallstudien/BE_N_1_Aufgabe3_Datenverarbeitung_Loesung/",
    "title": "KW42 Daten(vor)verarbeitung - Loesung",
    "description": {},
    "author": [
      {
        "name": "Beni Sigrist",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "Biodiversity & Ecosystems (N) Musterloesung"
    ],
    "contents": "\r\nProjektaufbau RStudio-Projekte\r\nVor den eigentlichen Auswertungen muessen einige vorbereitende Arbeiten unternommen werden. Die Zeit, die man hier investiert, wird in der spaeteren Projektphase um ein vielfaches eingespart. Im Skript soll die Ordnerstruktur des Projekts genannt werden, damit der Arbeitsvorgang auf verschiedenen Rechnern reproduzierbar ist.\r\nArbeitet mit Projekten, da diese sehr einfach ausgetauscht und somit auch reproduziert werden koennen; es gibt keine absoluten Arbeitspfade sondern nur relative. Der Datenimport (und auch der Export) kann mithilfe dieser relativen Pfaden stark vereinfacht werden. Projekte helfen alles am richtigen Ort zu behalten. (mehr zur Arbeit mit Projekten: https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects)\r\nAufbau von R-Skripten\r\nIm Kopf des Skripts zuerst immer den Titel des Projekts sowie die Autor:innen des Skripts nennen. Hier soll auch die Herkunft der Daten ersichtlich sein und falls externe Daten verwendet werden, sollte geklaert werden, wer die Datenherrschaft hat (Rehdaten: Forschungsgruppe WILMA).\r\n\r\n\r\n#.##################################################################################\r\n# Daten(vor)verarbeitung Fallstudie WPZ  ####\r\n# Modul Research Methods, HS21. Autor/in ####\r\n#.##################################################################################\r\n\r\n# Beschreibt zudem folgendes:\r\n# • Ordnerstruktur (ich verwende hier den Projektordner mit den Unterordnern Skripts, \r\n# Feldaufnahmen, Data, Results, Plots)\r\n# • Verwendete Daten\r\n\r\n# Ein Skript soll in R eigentlich immer nach dem selbem Schema aufgebaut sein. \r\n# Dieses Schema beinhaltet (nach dem bereits erwaehnten Kopf des Skripts) 4 Kapitel: \r\n\r\n\r\n\r\n1. Datenimport\r\n2. Datenvorverarbeitung\r\n3. Analyse\r\n4. Visualisierung\r\nBereitet euer Skript also nach dieser Struktur vor. Nutzt fuer den Text, welcher nicht Code ist, vor dem Text das Symbol #. Wenn ihr den Text als Titel definieren wollt, der die grobe Struktur des Skripts absteckt, baut in wie in folgendem Beispiel auf:\r\n\r\n\r\n#.###################################################################################\r\n# METADATA ####\r\n#.###################################################################################\r\n# Datenherkunft ####\r\n# ...\r\n\r\n#.###################################################################################\r\n# 1. DATENIMPORT ####\r\n#.###################################################################################\r\n\r\n\r\n\r\nlibraries laden: hier tidyverse\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\n\r\n\r\nHerunterladen der Daten der Feldaufnahme von Moodle, Einlesen, Sichtung der Datensaetze und der Datentypen\r\n\r\n\r\n# Die Datensätze aller Teams müssen erst noch in CSVs umgewandelt werden, bevor sie \r\n# eingelesen werden können \r\n\r\ndf_team1 <- read_delim(\"Felderhebung Waldstruktur_TEAM_1_türkis.csv\", \r\n                       delim = \";\")\r\n\r\ndf_team2 <- read_delim(\"Felderhebung_Team_2.csv\", delim = \";\")\r\n# Achtung! Beim Datensatz des Teams 2 ist eine zusaetzliche Zeile eingefuegt, die\r\n# das Einlesen erschwert. --> loeschen\r\n# Ausserdem gibt es bei den Zeilen DG Rubus, DG Strauchschicht und DG Baumschicht ein  \r\n# Problem mit dem Datentyp resp. den Zahlen. \r\n# --> manuell in Excel , suchen und mit . ersetzen\r\n\r\ndf_team3 <- read_delim(\"ReMe_Felderhebung_Gruppe3.csv\", delim = \",\")\r\n# Achtung! Hier ist beim Einlesen etwas falsch gelaufen. --> \",\" statt \";\"\r\n\r\ndf_team4 <- read_delim(\"Felderhebung_Waldstruktur_Team_4.csv\", \r\n                       delim = \";\")\r\n\r\ndf_team5 <- read_delim(\"Felderhebung_Waldstruktur_Team5.csv\", \r\n                       delim = \";\")\r\n# Achtung! Beim Umwandeln in das CSV muss hier die Titelzeile entfernt werden damit\r\n# das Einlesen reibungslos funktioniert\r\n\r\ndf_team6 <- read_delim(\"Aufnahmen_Landforst_HS21_Gruppe_6.csv\", \r\n                       delim = \";\")\r\n\r\n\r\n# hier koennen die Probekreise mit den Angaben zur Anzahl Rehlokalisationen und der \r\n# LIDAR-basierten Ableitung der Waldstruktur eingelesen werden\r\n\r\ndf_reh <- read_delim(\"Aufgabe3_Reh_Waldstruktur_211014.csv\", delim = \";\")\r\nstr(df_reh)\r\n\r\n\r\n# Die eingelesenen Datensaetze anschauen und versuchen zu einem Gesamtdatensatz  \r\n# verbinden. Ist der Output zufriedenstellend?\r\n\r\ndf_gesamt <- bind_rows(df_team1, df_team2, df_team3, df_team4, df_team5, df_team6)\r\nstr(df_gesamt)\r\n\r\n\r\n\r\nAufgabe 1:\r\n1.1 Einfuegen zusaetzliche Spalte pro Datensatz mit der Gruppenzugehoerigkeit (Team1-6)\r\n1.2 Spaltenumbenennung damit die Bezeichungen in allen Datensaetzen gleich sind und der Gesamtdatensatz zusammengefuegt werden kann\r\n–> Befehle mutate und rename, mit pipes (%>%) in einem Schritt moeglich\r\n\r\n\r\n#.#################################################################################\r\n# 2. DATENVORVERARBEITUNG #####\r\n#.#################################################################################\r\n\r\n\r\ndf_team1 <- df_team1 %>%\r\n  mutate(team = \"team1\") %>%\r\n  rename(KreisID = \"Kreis (r=12.5)\",\r\n         X = \"x\",\r\n         Y = \"y\",\r\n         DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\r\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\r\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")\r\n\r\n\r\ndf_team2 <- df_team2 %>%\r\n  mutate(team = \"team2\") %>%\r\n  rename(KreisID = \"Kreis (r 12.5m)\",\r\n         DG_Rubus = \"DG Rubus sp. [%]\",\r\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\r\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")\r\n\r\ndf_team3 <- df_team3 %>%\r\n  mutate(team = \"team3\") %>%\r\n  rename(KreisID = \"Kreis (r 12.5m)\",\r\n         DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\r\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\r\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")\r\n\r\n\r\ndf_team4 <- df_team4 %>%\r\n  mutate(team = \"team4\") %>%\r\n  rename(KreisID = \"Kreis\",\r\n         DG_Rubus = \"Deckungsgrad Rubus sp.\",\r\n         DG_Strauchschicht = \"DG Strauchschicht\",\r\n         DG_Baumschicht = \"DG Baumschicht\")\r\n\r\ndf_team5 <- df_team5 %>%\r\n  mutate(team = \"team5\") %>%\r\n  rename(KreisID = \"Kreis (r12.5)\",\r\n         DG_Rubus = \"Deckungsgrad Rubus sp.[%]\",\r\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\r\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")\r\n\r\ndf_team6 <- df_team6 %>%\r\n  mutate(team = \"team6\") %>%\r\n  rename(KreisID = \"Kreis (r 12.5m)\",\r\n         DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\r\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\r\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")\r\n\r\n\r\n\r\nAufgabe 2:\r\nZusammenfuehren der Teildatensaetze zu einem Datensatz\r\n\r\n\r\ndf_gesamt <- bind_rows(df_team1, df_team2, df_team3, df_team4, df_team5, df_team6)\r\n\r\n\r\n\r\nAufgabe 3:\r\nVerbinden (join) des Datensatzes der Felderhebungen mit dem Datensatz der Rehe.\r\nZiel: ein Datensatz mit allen Kreisen der Felderhebung, angereichert mit den Umweltvariablen Understory und Overstory aus den LIDAR-Daten (DG_us, DG_os) aus dem Rehdatensatz.\r\n–> Welche Art von join? Welche Spalten zum Verbinden (by = ?) der Datensaetze\r\n\r\n\r\ndf_with_LIDAR <- left_join(df_gesamt,df_reh, by = c(\"X\" = \"x\", \"Y\" = \"y\"))\r\n\r\n\r\n\r\nAufgabe 4:\r\nScatterplot der korrespondondierenden Umweltvariablen aus den Felderhebungen gegen die Umweltvariablen aus den LIDAR-Daten erstellen (zusaetzlich Einfaerben der Gruppen und Regressionslinie darueberlegen).\r\n\r\n\r\n#.#####################################################################################\r\n# 4. VISUALISERUNG #####\r\n#.#####################################################################################\r\n\r\nggplot(df_with_LIDAR, aes(DG_us, DG_Strauchschicht, color = team)) + geom_point() + \r\n  stat_smooth(method = \"lm\")\r\n\r\n\r\n\r\nwrite_delim(df_with_LIDAR, \"df_with_lidar.csv\", delim = \";\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_N_1_Aufgabe3_Datenverarbeitung_Loesung/BE_N_Aufgabe3_Datenverarbeitung_Loesung_files/figure-html5/unnamed-chunk-8-1.png",
    "last_modified": "2021-11-02T10:58:28+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "fallstudien/BE_N_2_Aufgabe3_Berechnung_Homeranges/",
    "title": "KW43: Homeranges",
    "description": {},
    "author": [
      {
        "name": "Beni Sigrist",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "Biodiversity & Ecosystems (N)"
    ],
    "contents": "\r\nBerechung der Home-Ranges der Rehe\r\nBenötigte Libraries laden\r\n\r\n\r\nipak <- function(pkg){\r\nnew.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\r\nif (length(new.pkg))\r\ninstall.packages(new.pkg, dependencies = TRUE)\r\nsapply(pkg, require, character.only = TRUE)\r\n}\r\npackages <- c(\"sf\", \"raster\", \"tidyverse\", \"adehabitatHR\", \"maptools\", \"sp\", \r\n              \"ggspatial\", \"rgeos\", \"rgdal\")\r\nipak(packages)\r\n\r\n\r\n\r\nEinlesen des Gesamtdatensatzes von Moodle, Sichtung des Datensatzes und der Datentypen\r\n\r\n\r\nRehe <- read_delim(\"Aufgabe3_Homeranges_Rehe_landforst_20211014.csv\", delim = \";\")\r\n\r\nstr(Rehe)\r\n\r\n\r\n\r\nAufgabe 1: In Datensatz Rehe eine neue Spalte mit Datum und Zeit in einer Spalte kreieren. Beim Format hat sich ein Fehler eingeschlichen. Findet ihr ihn?\r\n\r\n\r\nRehe <- Rehe %>%\r\n  mutate(UTC_DateTime = as.POSIXct(paste(UTC_Date, UTC_Time), \r\n                                   format = \"%Y-%m-%d %H:%M:%S\"))\r\n\r\n\r\n\r\nHier einige Zeilen Code, um eine HomeRange zu berechnen.\r\nAufgabe 2: Herumschrauben an den Einstellungen von:\r\n- href (in der Funktion kernelUD)\r\n- an der Ausdehung, resp. prozentualer Anteil Punkte in der HR (Funktion getverticeshr)\r\n–> Ziel: eine Karte erstellen mit der Visualiserung mindestens einer HR\r\n\r\n\r\nx <- Rehe$X[Rehe$TierID== \"RE13\"]    \r\ny <- Rehe$Y[Rehe$TierID== \"RE13\"]\r\nxy <- data.frame(cbind (x, y, rep(1, length(x))))       \r\ncoordinates(xy)<-c(\"x\",\"y\")                             \r\nproj4string(xy)<-CRS(\"+init=epsg:21781\")  \r\n\r\nplot(xy, col = \"blue\", pch = 19, cex = 1.5)\r\n\r\n# Berechnung von href nach: Pebsworth et al. (2012) Evaluating home range techniques: \r\n# use of Global Positioning System (GPS) collar data from chacma baboons\r\n\r\nsigma <- 0.5*(sd(x)+sd(y))                              \r\nn <- length(x)\r\nhref <- sigma * n^(-1/6)*0.9  \r\n\r\n# scaled reference: href * 0.9\r\n\r\nkud <- kernelUD(xy, h=href, grid=25)             \r\n\r\n# Berechnung der Home Range (95% Isopleth)\r\n\r\nhomerange <- getverticeshr(kud, percent=95)             \r\n\r\n\r\n# Schreibt HR in den oben beschriebenen Ordner (als Shapefile)\r\n\r\nhr <- st_as_sf(homerange)\r\n\r\nst_write(hr, dsn= \"Results\", layer=\"HR_RE13\", driver=\"ESRI Shapefile\",  \r\n         delete_layer = T )\r\n\r\n\r\n\r\n\r\n\r\n# mit diesem Befehl kann die HR geplottet werden\r\n\r\n\r\nggplot(hr, aes(color = \"red\", fill=\"red\")) + \r\n  geom_sf(size = 1, alpha = 0.3) +\r\ncoord_sf(datum = sf::st_crs(21781))+\r\ntheme(\r\naxis.title = element_blank(),\r\naxis.text = element_blank(),\r\naxis.ticks = element_blank(),\r\nlegend.position=\"none\"\r\n)\r\n\r\n# und die Punkte der GPS-Lokalisationen darüber gelegt werden \r\n\r\nxy_p <- st_as_sf(xy)\r\n\r\nggplot(hr, aes(color = \"red\", fill=\"red\")) + \r\n  geom_sf(size = 1, alpha = 0.3) +\r\ngeom_sf(data = xy_p, aes(fill = \"red\")) +\r\ncoord_sf(datum = sf::st_crs(21781))+\r\ntheme(\r\naxis.title = element_blank(),\r\naxis.text = element_blank(),\r\naxis.ticks = element_blank(),\r\nlegend.position=\"none\"\r\n)\r\n\r\n\r\n\r\nCode um die Homerange auf der Landeskarte 1:25000 zu plotten. Transparenz kann mit alpha angepasst werden\r\n\r\n\r\npk25_wpz <- brick(\"C:/Users/sigb/Beni/WPZ_Fallstudie/HS20/Data/pk25_wpz.tif\")\r\n\r\nxy_p <- st_as_sf(xy)\r\n\r\nggplot(hr, aes(color = \"red\", fill=\"red\")) +\r\nannotation_spatial(pk25_wpz) +\r\ngeom_sf(size = 1, alpha = 0.3) +\r\ngeom_sf(data = xy_p, aes(fill = \"red\")) +\r\ncoord_sf(datum = sf::st_crs(21781))+\r\ntheme(\r\naxis.title = element_blank(),\r\naxis.text = element_blank(),\r\naxis.ticks = element_blank(),\r\nlegend.position=\"none\"\r\n)\r\n\r\n\r\n\r\nNachbauen des Sampling Grids mit den Kreisen (Wird als Grundlage für Extraktion der Umweltvariablen innerhalb der Homeranges benötigt)\r\nXmin bzw. Ymin des Grids: c(684000, 234000)\r\ncellsize des Grids: c(25, 25)\r\nAnzahl Kreise in X und Y Richtung: c(100, 160)\r\n\r\n\r\nx25       <- GridTopology(c(684000, 234000), c(25, 25), c(100, 160)) \r\ndata25    = data.frame(1:(100*160))           \r\n# Erstellt aus der GridTopology und den Daten ein SpatialGridDataFrame\r\ngrid25    <- SpatialGridDataFrame(x25, data25,  proj4string <- CRS(\"+init=epsg:21781\"))\r\npixel25   <- as(grid25, \"SpatialPixelsDataFrame\")\r\n\r\n\r\n# zweites Sampling Grid für einen Ausschnitt aufbauen, plotten\r\n# -> dient nur der Visualisierung des Sampling Grids um einen Eindruck zu erhalten\r\n\r\nx       <- GridTopology(c(684200, 236900), c(25, 25), c(35, 35)) \r\ndata    = data.frame(1:(35*35))           \r\n# Erstellt aus der GridTopology und den Daten ein SpatialGridDataFrame\r\ngrid    <- SpatialGridDataFrame(x, data,  proj4string <- CRS(\"+init=epsg:21781\"))\r\npixel  <- as(grid, \"SpatialPixelsDataFrame\")\r\n\r\npoints <- as(pixel, \"SpatialPointsDataFrame\")\r\n\r\ngrid_plot <- st_buffer(st_as_sf(points), 12.5)\r\n\r\nplot(st_geometry(grid_plot))\r\n\r\nggplot(grid_plot, color = \"black\", fill=NA) + \r\n  geom_sf() +\r\ngeom_sf(data = xy_p, color = \"blue\",  ) +\r\n  geom_sf(data = hr, color = \"red\", fill = NA, size = 2) +\r\ncoord_sf(datum = sf::st_crs(21781))+\r\ntheme(\r\naxis.title = element_blank(),\r\naxis.text = element_blank(),\r\naxis.ticks = element_blank(),\r\nlegend.position=\"none\"\r\n)\r\n\r\n\r\n\r\nAufgabe 3: Testen der Variablen der Vegetationsschichten von letzter Woche auf einen linearen Zusammenhang (Korrelation; Funktion cor.test). DG_Baumschicht vs. DG_os / DG_Strauchschicht vs. DG_us aus dem Datensatz df_with_lidar den wir letzte Woche erstellt haben\r\nDie Theorie zu Korrelation folgt erst ab 1.11\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-11-02T10:58:02+01:00",
    "input_file": {}
  },
  {
    "path": "fallstudien/BE_N_2_Aufgabe3_Berechnung_Homeranges_Loesung/",
    "title": "KW43: Homeranges - Loesung",
    "description": {},
    "author": [
      {
        "name": "Beni Sigrist",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "Biodiversity & Ecosystems (N) Musterloesung"
    ],
    "contents": "\r\nBerechung der Home-Ranges der Rehe\r\nBenötigte Libraries laden\r\n\r\n\r\nipak <- function(pkg){\r\nnew.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\r\nif (length(new.pkg))\r\ninstall.packages(new.pkg, dependencies = TRUE)\r\nsapply(pkg, require, character.only = TRUE)\r\n}\r\npackages <- c(\"sf\", \"raster\", \"tidyverse\", \"adehabitatHR\", \"maptools\", \"sp\", \r\n              \"ggspatial\", \"rgeos\", \"rgdal\", \"pastecs\")\r\nipak(packages)\r\n\r\n\r\n\r\nEinlesen des Gesamtdatensatzes von Moodle, Sichtung des Datensatzes und der Datentypen\r\n\r\n\r\nRehe <- read_delim(\"Aufgabe3_Homeranges_Rehe_landforst_20211014.csv\", delim = \";\")\r\n\r\nstr(Rehe)\r\n\r\n\r\n\r\nAufgabe 1: In Datensatz Rehe eine neue Spalte mit Datum und Zeit in einer Spalte kreieren. Beim Format hat sich ein Fehler eingeschlichen. Findet ihr ihn?\r\n\r\n\r\nRehe <- Rehe %>%\r\n  mutate(UTC_DateTime = as.POSIXct(paste(UTC_Date, UTC_Time), \r\n                                   format = \"%Y-%m-%d %H:%M:%S\"))\r\n\r\n\r\n\r\nHier einige Zeilen Code, um eine HomeRange zu berechnen.\r\nAufgabe 2: Herumschrauben an den Einstellungen von:\r\n- href (in der Funktion kernelUD)\r\n- an der Ausdehung, resp. prozentualer Anteil Punkte in der HR (Funktion getverticeshr)\r\n–> Ziel: eine Karte erstellen mit der Visualiserung mindestens einer HR\r\n\r\n\r\nx <- Rehe$X[Rehe$TierID== \"RE13\"]    \r\ny <- Rehe$Y[Rehe$TierID== \"RE13\"]\r\nxy <- data.frame(cbind (x, y, rep(1, length(x))))       \r\ncoordinates(xy)<-c(\"x\",\"y\")                             \r\nproj4string(xy)<-CRS(\"+init=epsg:21781\")  \r\n\r\nplot(xy, col = \"blue\", pch = 19, cex = 1.5)\r\n\r\n# Berechnung von href nach: Pebsworth et al. (2012) Evaluating home range techniques: \r\n# use of Global Positioning System (GPS) collar data from chacma baboons\r\n\r\nsigma <- 0.5*(sd(x)+sd(y))                              \r\nn <- length(x)\r\nhref <- sigma * n^(-1/6)*0.9  \r\n\r\n# scaled reference: href * 0.9\r\n\r\nkud <- kernelUD(xy, h=href, grid=25)             \r\n\r\n# Berechnung der Home Range (95% Isopleth)\r\n\r\nhomerange <- getverticeshr(kud, percent=50)             \r\n\r\n\r\n# Schreibt HR in den oben beschriebenen Ordner (als Shapefile)\r\n\r\nhr <- st_as_sf(homerange)\r\n\r\nst_write(hr, dsn= \"Results\", layer=\"HR_RE13\", driver=\"ESRI Shapefile\",  \r\n         delete_layer = T )\r\n\r\n\r\n\r\n\r\n\r\n# mit diesem Befehl kann die HR geplottet werden\r\n\r\n\r\nggplot(hr, aes(color = \"red\", fill=\"red\")) + \r\n  geom_sf(size = 1, alpha = 0.3) +\r\ncoord_sf(datum = sf::st_crs(21781))+\r\ntheme(\r\naxis.title = element_blank(),\r\naxis.text = element_blank(),\r\naxis.ticks = element_blank(),\r\nlegend.position=\"none\"\r\n)\r\n\r\n# und die Punkte der GPS-Lokalisationen darüber gelegt werden \r\n\r\nxy_p <- st_as_sf(xy)\r\n\r\nggplot(hr, aes(color = \"red\", fill=\"red\")) + \r\n  geom_sf(size = 1, alpha = 0.3) +\r\ngeom_sf(data = xy_p, aes(fill = \"red\")) +\r\ncoord_sf(datum = sf::st_crs(21781))+\r\ntheme(\r\naxis.title = element_blank(),\r\naxis.text = element_blank(),\r\naxis.ticks = element_blank(),\r\nlegend.position=\"none\"\r\n)\r\n\r\n\r\n\r\nCode um die Homerange auf der Landeskarte 1:25000 zu plotten. Transparenz kann mit alpha angepasst werden\r\n\r\n\r\npk25_wpz <- brick(\"C:/Users/sigb/Beni/WPZ_Fallstudie/HS20/Data/pk25_wpz.tif\")\r\n\r\nxy_p <- st_as_sf(xy)\r\n\r\nggplot(hr, aes(color = \"red\", fill=\"red\")) +\r\nannotation_spatial(pk25_wpz) +\r\ngeom_sf(size = 1, alpha = 0.3) +\r\ngeom_sf(data = xy_p, aes(fill = \"red\")) +\r\ncoord_sf(datum = sf::st_crs(21781))+\r\ntheme(\r\naxis.title = element_blank(),\r\naxis.text = element_blank(),\r\naxis.ticks = element_blank(),\r\nlegend.position=\"none\"\r\n)\r\n\r\n\r\n\r\n\r\nNachbauen des Sampling Grids mit den Kreisen (Wird als Grundlage für Extraktion der Umweltvariablen innerhalb der Homeranges benötigt)\r\nXmin bzw. Ymin des Grids: c(684000, 234000)\r\ncellsize des Grids: c(25, 25)\r\nAnzahl Kreise in X und Y Richtung: c(100, 160)\r\n\r\n\r\nx25       <- GridTopology(c(684000, 234000), c(25, 25), c(100, 160)) \r\ndata25    = data.frame(1:(100*160))           \r\n# Erstellt aus der GridTopology und den Daten ein SpatialGridDataFrame\r\ngrid25    <- SpatialGridDataFrame(x25, data25,  proj4string <- CRS(\"+init=epsg:21781\"))\r\npixel25   <- as(grid25, \"SpatialPixelsDataFrame\")\r\n\r\n\r\n# zweites Sampling Grid für einen Ausschnitt aufbauen, plotten\r\n# -> dient nur der Visualisierung des Sampling Grids um einen Eindruck zu erhalten\r\n\r\nx       <- GridTopology(c(684200, 236900), c(25, 25), c(35, 35)) \r\ndata    = data.frame(1:(35*35))           \r\n# Erstellt aus der GridTopology und den Daten ein SpatialGridDataFrame\r\ngrid    <- SpatialGridDataFrame(x, data,  proj4string <- CRS(\"+init=epsg:21781\"))\r\npixel  <- as(grid, \"SpatialPixelsDataFrame\")\r\n\r\npoints <- as(pixel, \"SpatialPointsDataFrame\")\r\n\r\ngrid_plot <- st_buffer(st_as_sf(points), 12.5)\r\n\r\nplot(st_geometry(grid_plot))\r\n\r\nggplot(grid_plot, color = \"black\", fill=NA) + \r\n  geom_sf() +\r\ngeom_sf(data = xy_p, color = \"blue\",  ) +\r\n  geom_sf(data = hr, color = \"red\", fill = NA, size = 2) +\r\ncoord_sf(datum = sf::st_crs(21781))+\r\ntheme(\r\naxis.title = element_blank(),\r\naxis.text = element_blank(),\r\naxis.ticks = element_blank(),\r\nlegend.position=\"none\"\r\n)\r\n\r\n\r\n\r\nAufgabe 3: Testen der Variablen der Vegetationsschichten von letzter Woche auf einen linearen Zusammenhang (Korrelation; Funktion cor.test). DG_Baumschicht vs. DG_os / DG_Strauchschicht vs. DG_us aus dem Datensatz df_with_lidar den wir letzte Woche erstellt haben\r\nDie Theorie zu Korrelation folgt erst ab 1.11\r\n\r\n\r\ndf_with_lidar <- read_delim(\"df_with_lidar.csv\", delim =\";\")\r\n\r\n\r\nlibrary(pastecs)\r\n\r\nround(stat.desc(cbind(df_with_lidar$DG_us,df_with_lidar$DG_os,\r\n                      df_with_lidar$DG_Strauchschicht,df_with_lidar$DG_Baumschicht), \r\n                basic= F, norm= T), 3)\r\n\r\n\r\n                 V1     V2      V3      V4\r\nmedian        0.272  0.824  35.000  50.000\r\nmean          0.295  0.788  38.949  50.273\r\nSE.mean       0.013  0.013   1.926   1.782\r\nCI.mean.0.95  0.027  0.026   3.806   3.522\r\nvar           0.027  0.025 556.585 476.549\r\nstd.dev       0.164  0.159  23.592  21.830\r\ncoef.var      0.557  0.201   0.606   0.434\r\nskewness      0.661 -1.034   0.438   0.042\r\nskew.2SE      1.662 -2.601   1.106   0.105\r\nkurtosis     -0.068  0.670  -0.834  -0.930\r\nkurt.2SE     -0.087  0.848  -1.059  -1.182\r\nnormtest.W    0.959  0.910   0.953   0.974\r\nnormtest.p    0.000  0.000   0.000   0.007\r\n\r\n# Histogram der Verteilung und die aus den Daten berechnete Normalverteilung als Linie \r\n# dargestellt\r\n\r\nggplot(df_with_lidar, aes(DG_os)) + geom_histogram(aes(y=..density..), \r\n        color = \"black\", fill = \"white\") + \r\n     stat_function(fun = dnorm, args = list(mean = \r\n        mean(df_with_lidar$DG_os, na.rm = T), \r\n        sd = sd(df_with_lidar$DG_os, na.rm = T)), color = \"black\",size = 1)\r\n\r\n\r\n\r\n# testen auf Korrelation \r\n\r\ncor.test(~ DG_Baumschicht+DG_os, data = df_with_lidar, method=\"pearson\")\r\n\r\n\r\n\r\n    Pearson's product-moment correlation\r\n\r\ndata:  DG_Baumschicht and DG_os\r\nt = 5.4918, df = 147, p-value = 1.705e-07\r\nalternative hypothesis: true correlation is not equal to 0\r\n95 percent confidence interval:\r\n 0.2696941 0.5377248\r\nsample estimates:\r\n      cor \r\n0.4126009 \r\n\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_N_2_Aufgabe3_Berechnung_Homeranges_Loesung/BE_N_Aufgabe3_Berechnung_Homeranges_Loesung_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2021-11-02T10:57:03+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "fallstudien/BE_N_3_Aufgabe4_Multivariate_Modelle/",
    "title": "KW44: Einstieg Multivariate Modelle",
    "description": {},
    "author": [
      {
        "name": "Beni Sigrist",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "Biodiversity & Ecosystems (N)"
    ],
    "contents": "\r\nEinstieg Multivariate Modelle / Habitatselektionsmodell\r\nlibraries laden\r\n\r\n\r\n### Funktion um Packages direkt zu installieren und / oder zu laden\r\n\r\nipak <- function(pkg){\r\n  new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\r\n  if (length(new.pkg)) \r\n    install.packages(new.pkg, dependencies = TRUE)\r\n  sapply(pkg, require, character.only = TRUE)\r\n}\r\n\r\npackages <- c(\"sp\", \"raster\", \"tidyverse\", \"PerformanceAnalytics\", \"pastecs\", \"car\")\r\n\r\nipak(packages)\r\n\r\n\r\n\r\nAufgabe 1: Einlesen des Gesamtdatensatzes für die Multivariate Analyse von Moodle\r\n1) Sichtung des Datensatzes, der Variablen und der Datentypen\r\n2) Kontrolle wieviele Rehe in diesem Datensatz enthalten sind\r\nAufgabe 2: Unterteilung des Datensatzes in Teildatensätze entsprechend der Tageszeit\r\nAufgabe 3: Erstellen von Density Plots der Praesenz / Absenz in Abhaengigkeit der unabhaengigen Variablen\r\n\r\n\r\n# Ein Satz Density Plots für den Tagesdatensatz und einer für den Nachtdatensatz \r\n\r\npar(mfrow=c(3,3), mar=c(4, 4, 3, 3))\r\nfor (i in 6:12) {          # innerhalb des for()-loops die Nummern der gewuenschten \r\n                           # Spalten einstellen\r\n  d  <-  DF_mod_day %>% pull(i)\r\n  d  <-  density(d)\r\n  dp  <-  DF_mod_day %>% filter(pres_abs == 1) %>% pull(i)\r\n  dp <- density(dp)\r\n  da  <-  DF_mod_day %>% filter(pres_abs == 0) %>% pull(i)\r\n  da <- density(da)\r\n  plot(0,0, type=\"l\", xlim=range(c(dp$x,da$x)), ylim=range(dp$y,da$y), \r\n       xlab=names(DF_mod_day[i]), ylab=\"Density\")\r\n  lines(dp$x, dp$y, col=\"blue\")             # Praesenz\r\n  lines(da$x, da$y, col=\"red\")              # Absenz\r\n}\r\n\r\n\r\n\r\nAufgabe 4: Testen eurer erklärenden Variablen auf Normalverteilung (nur kontinuierliche)\r\nAufgabe 5: Explorative Analysen der Variablen mit Scatterplots / Scatterplotmatrizen\r\n1) Zu Scatterplots und Scatterplotmatrizen gibt es viele verschiedene Funktionen / Packages, schaut im Internet und sucht euch eines welches euch passt.\r\n2) Testen der Korrelation zwischen den Variablen (Parametrisch oder nicht-parametrische Methode? Ausserdem: gewisse Scatterplotmatrizen zeigen euch die Koeffizenten direkt an)\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-11-02T10:51:09+01:00",
    "input_file": {}
  },
  {
    "path": "fallstudien/BE_N_3_Aufgabe4_Multivariate_Modelle_Loesung/",
    "title": "KW44: Einstieg Multivariate Modelle - Loesung",
    "description": {},
    "author": [
      {
        "name": "Beni Sigrist",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "Biodiversity & Ecosystems (N) Musterloesung"
    ],
    "contents": "\r\nEinstieg Habitatselektionsmodell / Multivariate Modelle\r\nlibraries laden\r\n\r\n\r\n### Funktion um Packages direkt zu installieren und / oder zu laden\r\n\r\nipak <- function(pkg){\r\n  new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\r\n  if (length(new.pkg)) \r\n    install.packages(new.pkg, dependencies = TRUE)\r\n  sapply(pkg, require, character.only = TRUE)\r\n}\r\n\r\npackages <- c(\"tidyverse\", \"PerformanceAnalytics\", \"pastecs\", \"psych\", \"car\")\r\n\r\nipak(packages)\r\n\r\n\r\n\r\nAufgabe 1: Einlesen des Gesamtdatensatzes von Moodle\r\n- Sichtung des Datensatzes und der Datentypen\r\n- Kontrolle wieviele Rehe in diesem Datensatz enthalten sind\r\n\r\n\r\nDF_mod <- read_delim(\"Aufgabe4_Datensatz_Habitatnutzung_Modelle_20211101_moodle.csv\", \r\n                     delim = \";\")\r\n\r\nstr(DF_mod)\r\n\r\n\r\nspec_tbl_df [8,370 x 16] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\r\n $ pres_abs          : num [1:8370] 0 1 0 1 1 1 1 1 1 0 ...\r\n $ nmb               : num [1:8370] 0 1 0 1 3 1 5 8 2 0 ...\r\n $ x                 : num [1:8370] 682250 682250 682225 682225 682225 ...\r\n $ y                 : num [1:8370] 237725 237750 237700 237725 237750 ...\r\n $ forest            : num [1:8370] 0 0 0 0 0 0 0 0 0 0 ...\r\n $ slope             : num [1:8370] 10.15 9.97 8.85 10.33 12.66 ...\r\n $ dist_road_all     : num [1:8370] 60.3 56.3 53.1 68.5 50.2 ...\r\n $ dist_road_only    : num [1:8370] 60.3 56.3 53.1 68.5 50.2 ...\r\n $ dist_build        : num [1:8370] 36.16 12.24 57.51 32.52 7.86 ...\r\n $ forest_prop       : num [1:8370] 0.022246 0.000931 0.018563 0.000824 0 ...\r\n $ us                : num [1:8370] 0 0.0218 0 0 0 ...\r\n $ os                : num [1:8370] 0 0.06744 0 0 0.00406 ...\r\n $ GPStot            : num [1:8370] 420 420 420 420 420 420 420 420 420 420 ...\r\n $ id                : chr [1:8370] \"RE03\" \"RE03\" \"RE03\" \"RE03\" ...\r\n $ time_of_day       : chr [1:8370] \"night\" \"night\" \"night\" \"night\" ...\r\n $ stoerungskategorie: chr [1:8370] \"gering\" \"gering\" \"gering\" \"gering\" ...\r\n - attr(*, \"spec\")=\r\n  .. cols(\r\n  ..   pres_abs = col_double(),\r\n  ..   nmb = col_double(),\r\n  ..   x = col_double(),\r\n  ..   y = col_double(),\r\n  ..   forest = col_double(),\r\n  ..   slope = col_double(),\r\n  ..   dist_road_all = col_double(),\r\n  ..   dist_road_only = col_double(),\r\n  ..   dist_build = col_double(),\r\n  ..   forest_prop = col_double(),\r\n  ..   us = col_double(),\r\n  ..   os = col_double(),\r\n  ..   GPStot = col_double(),\r\n  ..   id = col_character(),\r\n  ..   time_of_day = col_character(),\r\n  ..   stoerungskategorie = col_character()\r\n  .. )\r\n - attr(*, \"problems\")=<externalptr> \r\n\r\nclass(DF_mod$time_of_day)\r\n\r\n\r\n[1] \"character\"\r\n\r\ntable(DF_mod$id)\r\n\r\n\r\n\r\nRE02 RE03 RE04 RE05 RE06 RE07 RE08 RE09 RE10 RE11 RE12 RE13 \r\n1204  260  512  388  306  484  980  836  492 1208  652 1048 \r\n\r\nDF_mod %>% group_by(id) %>% summarize(anzahl = n())\r\n\r\n\r\n# A tibble: 12 x 2\r\n   id    anzahl\r\n   <chr>  <int>\r\n 1 RE02    1204\r\n 2 RE03     260\r\n 3 RE04     512\r\n 4 RE05     388\r\n 5 RE06     306\r\n 6 RE07     484\r\n 7 RE08     980\r\n 8 RE09     836\r\n 9 RE10     492\r\n10 RE11    1208\r\n11 RE12     652\r\n12 RE13    1048\r\n\r\nlength(unique(DF_mod$id))\r\n\r\n\r\n[1] 12\r\n\r\nAufgabe 2: Unterteilung des Datensatzes in Teildatensätze entsprechend der Tageszeit\r\n\r\n\r\nDF_mod_night <- DF_mod %>%\r\n  filter(time_of_day == \"night\")\r\n\r\nDF_mod_day <- DF_mod %>%\r\n  filter(time_of_day == \"day\")\r\n\r\n# Kontrolle\r\n\r\ntable(DF_mod_night$time_of_day)\r\n\r\n\r\n\r\nnight \r\n 4185 \r\n\r\ntable(DF_mod_day$time_of_day)\r\n\r\n\r\n\r\n day \r\n4185 \r\n\r\nAufgabe 3: Erstellen von Density Plots der Praesenz / Absenz in Abhaengigkeit der unabhaengigen Variablen (für Tag und Nacht)\r\n\r\n\r\n# Ein Satz Density Plots für den Tagesdatensatz und einer für den Nachtdatensatz \r\n\r\npar(mfrow=c(3,3), mar=c(4, 4, 3, 3))\r\nfor (i in 6:12) {                           # innerhalb des for()-loops die Nummern der \r\n                                            # gewuenschten Spalten einstellen\r\n  d  <-  DF_mod_day %>% pull(i)\r\n  d  <-  density(d)\r\n  dp  <-  DF_mod_day %>% filter(pres_abs == 1) %>% pull(i)\r\n  dp <- density(dp)\r\n  da  <-  DF_mod_day %>% filter(pres_abs == 0) %>% pull(i)\r\n  da <- density(da)\r\n  plot(0,0, type=\"l\", xlim=range(c(dp$x,da$x)), ylim=range(dp$y,da$y), \r\n       xlab=names(DF_mod_day[i]), ylab=\"Density\")\r\n  lines(dp$x, dp$y, col=\"blue\")             # Praesenz\r\n  lines(da$x, da$y, col=\"red\")              # Absenz\r\n}\r\n\r\n\r\n\r\n\r\nAufgabe 4: Testen erklärenden Variablen auf Normalverteilung (nur kontinuierlichen)\r\n\r\n\r\n# klassischer Weg mit shapiro-wilk (mehrere Spalten, verschiedenene statistische\r\n# Kenngrössen werden angezeigt. Normalverteilung: Wert ganz unten. p>0.05 = ja)\r\n\r\nround(stat.desc(DF_mod_day[6:12], basic= F, norm= T), 3)\r\n\r\n\r\n               slope dist_road_all dist_road_only dist_build\r\nmedian        13.442        28.248         33.693    129.838\r\nmean          15.055        41.289         46.374    154.502\r\nSE.mean        0.158         0.642          0.665      1.625\r\nCI.mean.0.95   0.311         1.259          1.303      3.186\r\nvar          104.994      1725.368       1848.647  11050.895\r\nstd.dev       10.247        41.538         42.996    105.123\r\ncoef.var       0.681         1.006          0.927      0.680\r\nskewness       0.753         1.914          1.666      0.631\r\nskew.2SE       9.945        25.285         22.003      8.341\r\nkurtosis      -0.042         4.250          3.147     -0.537\r\nkurt.2SE      -0.279        28.079         20.790     -3.545\r\nnormtest.W     0.942         0.800          0.837      0.943\r\nnormtest.p     0.000         0.000          0.000      0.000\r\n             forest_prop     us      os\r\nmedian             0.632  0.059   0.754\r\nmean               0.590  0.120   0.586\r\nSE.mean            0.005  0.002   0.006\r\nCI.mean.0.95       0.010  0.005   0.013\r\nvar                0.107  0.023   0.173\r\nstd.dev            0.328  0.151   0.416\r\ncoef.var           0.555  1.259   0.710\r\nskewness          -0.366  1.674  -0.388\r\nskew.2SE          -4.832 22.115  -5.124\r\nkurtosis          -1.094  3.061  -1.586\r\nkurt.2SE          -7.226 20.226 -10.481\r\nnormtest.W         0.919  0.792   0.791\r\nnormtest.p         0.000  0.000   0.000\r\n\r\n# empfohlener Weg\r\n\r\nggplot(DF_mod_day, aes(slope)) + geom_histogram(aes(y=..density..), color = \"black\", \r\n                                                fill = \"white\") + \r\n  stat_function(fun = dnorm, args = list(mean = mean(DF_mod_day$slope, na.rm = T), \r\n                                         sd = sd(DF_mod_day$slope, na.rm = T)), \r\n                color = \"black\",size = 1)\r\n\r\n\r\n\r\n# Aufgabe 4: die Korrelation bei einem Teildatensatz testen reicht, \r\n# denn die verwendeten Kreise sind die selben am Tag und in der Nacht, \r\n# nur die Nutzung durch das Reh nicht\r\n\r\n\r\n\r\nAufgabe 5: Explorative Analysen der Variablen mit Scatterplots, Scatterplotmatrizen\r\n1) Zu Scatterplots und Scatterplotmatrizen gibt es viele verschiedene Funktionen / Packages, schaut im Internet und sucht euch eines welches euch passt.\r\n2) Testen der Korrelation zwischen den Variablen (Parametrisch oder nicht-parametrische Methode? Ausserdem: gewisse Scatterplotmatrizen zeigen euch die Koeffizenten direkt an)\r\n\r\n\r\nchart.Correlation(DF_mod_day[6:12], histogram=TRUE, pch=19, method = \"kendall\")\r\n\r\n\r\n\r\n#?chart.Correlation\r\n\r\npairs.panels(DF_mod_day[6:12], \r\n             method = \"kendall\", # correlation method\r\n             hist.col = \"#00AFBB\",\r\n             density = TRUE,  # show density plots\r\n             ellipses = TRUE # show correlation ellipses\r\n             )\r\n\r\n\r\n\r\n# Aufgabe 5: die Korrelation bei einem Teildatensatz testen reicht, \r\n# denn die verwendeten Kreise sind die selben am Tag und in der Nacht, \r\n# nur die Nutzung durch das Reh nicht.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_N_3_Aufgabe4_Multivariate_Modelle_Loesung/BE_N_Aufgabe4_Einstieg_Multivariate_Modelle_Loesung_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2021-11-02T10:55:54+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "fallstudien/BE_N_4_Aufgabe4_Modelle_Variablenselektion/",
    "title": "KW44: Variablenselektion Multivariate Modelle",
    "description": {},
    "author": [
      {
        "name": "Beni Sigrist",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "Biodiversity & Ecosystems (N)"
    ],
    "contents": "\r\nVariablenselektion Multivariate Modelle / Habitatselektionsmodell\r\nlibraries laden\r\n\r\n\r\n### Funktion um Packages direkt zu installieren und / oder zu laden\r\n\r\nipak <- function(pkg){\r\n  new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\r\n  if (length(new.pkg)) \r\n    install.packages(new.pkg, dependencies = TRUE)\r\n  sapply(pkg, require, character.only = TRUE)\r\n}\r\n\r\npackages <- c(\"sp\", \"raster\", \"tidyverse\", \"PerformanceAnalytics\", \"pastecs\", \"lme4\", \r\n              \"bbmle\", \"MuMIn\", \"MASS\", \"magrittr\")\r\n\r\nipak(packages)\r\n\r\n\r\n\r\nVariablenselektion\r\n-> Vorgehen analog Coppes et al. \r\nAufgabe 1: Mit dem folgenden Code kann eine simple Korrelationsmatrix aufgebaut werden.\r\n\r\n\r\nDF_mod <- read_delim(\"Aufgabe4_Datensatz_Habitatnutzung_Modelle_20211101_moodle.csv\", \r\n                     delim = \";\")\r\n\r\nDF_mod_day <- DF_mod %>%\r\n  filter(time_of_day == \"day\")\r\n\r\n\r\nround(cor(DF_mod_day[,6:12], method = \"kendall\"),2)\r\n\r\n# hier kann die Schwelle fuer die Korrelation gesetzt werden, 0.7 ist liberal / \r\n# 0.5 konservativ\r\n\r\ncor <- round(cor(DF_mod_day[,6:12], method = \"kendall\"),2) \r\ncor[abs(cor)<0.7] <-0\r\ncor\r\n\r\n\r\n\r\nSelektion der Variablen in einem univariaten Model\r\nAufgabe 2: Skalieren der Variablen, damit ihr Einfluss vergleichbar wird (Problem verschiedene Skalen der Variablen (bspw. Neigung in Grad, Distanz in Metern))\r\n\r\n\r\nDF_mod_day %<>%\r\n  mutate(slope_scaled = scale(slope),\r\n         us_scaled = scale(us),\r\n         os_scaled = scale(os),\r\n         forest_prop_scaled = scale(forest_prop),\r\n         dist_road_all_scaled = scale(dist_road_all),\r\n         dist_road_only_scaled = scale(dist_road_only),\r\n         dist_build_scaled = scale(dist_build),\r\n         id = as.factor(id))\r\n\r\n\r\n\r\nAufgabe 3: Ein erstes GLMM (Generalized Linear Mixed Effects Modell) aufbauen: Funktion und Modelformel\r\nwichtige Seite auf der man viele Hilfestellungen zu GLMM’s finden kann:\r\nhttps://bbolker.github.io/mixedmodels-misc/glmmFAQ.html\r\n\r\n\r\n# wir werden das package lme4 mit der Funktion glmer verwenden \r\n# ausserdem brauchen wir noch das package bbmle\r\n# --> installieren & laden\r\n\r\n# die Hilfe von glmer aufrufen: ?glmer\r\n\r\n# glmer(formula, data = , family = binomial)\r\n\r\n# 1) formula: \r\n# Abhaengige Variable ~ Erklaerende Variable + Random Factor \r\n# In unseren Modellen kontrollieren wir fuer individuelle Unterschiede bei den Rehen \r\n# indem wir einen Random Factor definieren => (1 | id) \r\n\r\n# 2) data: \r\n# euer Datensatz\r\n\r\n# 3) family: \r\n# hier binomial\r\n\r\n# warum binomial? Verteilung Daten der Abhaengigen Variable Präsenz/Absenz \r\n\r\nggplot(DF_mod_day, aes(pres_abs)) + geom_histogram()\r\n\r\n# --> Binaere Verteilung => Binomiale Verteilung mit n = 1 \r\n\r\n# und wie schaut es bei der Verteilung der Daten der Abhaengigen Variable \r\n# Nutzungsintensitaet (nmb) aus?\r\n\r\nggplot(DF_mod_day, aes(nmb)) + geom_histogram()\r\n\r\n# --> Negativbinomiale Verteilung \r\n\r\n\r\n\r\nAufgabe 4: Mit der GLMM Formel bauen wir in einem ersten Schritt eine univariate Variablenselektion auf.\r\nAls abhaengige Variable verwenden wir in der ersten Phase die Praesenz/Absenz der Rehe in den Kreisen\r\n\r\n\r\n# Die erklaerende Variable in m1 ist die erste Variable der korrelierenden Beziehung\r\n# Die erklaerende Variable in m2 ist die zweite Variable der korrelierenden Beziehung\r\n\r\nm1 <- glmer(Abhaengige_Variable ~ Erklaerende_Variable + (1 | id), data = DF_mod_day, \r\n            family = binomial)\r\nm2 <- glmer(Abhaengige_Variable ~ Erklaerende_Variable + (1 | id), data = DF_mod_day, \r\n            family = binomial)\r\n\r\n# mit dieser Funktion koennen die Modellergebnisse inspiziert werden\r\nsummary(m1)\r\n\r\n# Mit dieser Funktion kann der Informationgehalt der beiden Modelle gegeneinander \r\n# abgeschaetzt werden\r\nbbmle::AICtab(m1, m2)\r\n\r\n# tieferer AIC -> besser (AIC = Akaike information criterion)\r\n\r\n# ==> dieses Vorgehen muss nun für alle korrelierten Variablen für jeden Teildatensatz \r\n# (Tag/Nacht) durchgeführt werden, um nur noch nicht (R < 0.7) korrelierte Variablen \r\n# in das Modell einfliessen zu lassen \r\n\r\n\r\n\r\nSelektion der Variablen in einem multivariaten Model\r\nAufgabe 5: Mit folgendem Code kann eine automatisierte Variablenselektion (dredge-Funktion) und ein Modelaveraging aufgebaut werden (siehe auch Stats-Skript von J.Dengler & Team)\r\n\r\n\r\n# hier wird die Formel für die dredge-Funktion vorbereitet (die Variablen V1-V6 \r\n# sind jene welche nach der univariaten Variablenselektion noch übrig bleiben)  \r\n\r\nf <- pres_abs ~ \r\n  V1 +\r\n  V2 +\r\n  V3 +\r\n  V4 +\r\n  V5 +\r\n  V6 \r\n\r\n# inn diesem Befehl kommt der Random-Factor (das Reh) hinzu und es wird eine Formel \r\n# daraus gemacht\r\n\r\nf_dredge <- paste(c(f, \"+ (1 | id)\"), collapse = \" \") %>% as.formula()\r\n\r\n# Das Modell mit dieser Formel ausführen\r\n\r\nm <- glmer(f_dredge, data = DF_mod_day, family = binomial, na.action = \"na.fail\")\r\n\r\n# Das Modell in die dredge-Funktion einfügen (siehe auch unbedingt ?dredge)\r\n\r\nall_m <- dredge(m)\r\n\r\n# Importance values der einzelnen Variablen (Gibt an, wie bedeutsam eine bestimmte \r\n# Variable ist, wenn man viele verschiedene Modelle vergleicht (multimodel inference))\r\n\r\nimportance(all_m)\r\n\r\n# Schlussendlich wird ein Modelaverage durchgeführt (Schwellenwert für das delta-AIC = 2)\r\n\r\navgmodel <- model.avg(all_m, rank=\"AICc\", subset = delta < 2)\r\nsummary(avgmodel)\r\n\r\n# ==> für den Nachtdatensatz muss der gleiche Prozess der Variablenselektion \r\n# durchgespielt werden. \r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-11-02T12:25:43+01:00",
    "input_file": "BE_N_Aufgabe4_MM_Variablenselektion_Uebung.knit.md"
  },
  {
    "path": "fallstudien/BE_S_6_Deskriptive_Analysen_Loesung/",
    "title": "KW 44: Loesung Deskriptive Analysen",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "Biodiversity & Ecosystems (S) Musterloesung"
    ],
    "contents": "\r\nAufgabe 1: Verlauf der Besuchszahlen / m\r\n\r\n\r\n#.################################################################################################\r\n# 3. DESKRIPTIVE ANALYSE UND VISUALISIERUNG #####\r\n#.################################################################################################\r\n\r\n# 3.1 Verlauf der Besuchszahlen / m ####\r\n# Monatliche Summen am Standort\r\n\r\n# wann beginnt die Datenreihe schon wieder?\r\nfirst(depo_m$Ym)\r\n# und wann ist die fertig?\r\nlast(depo_m$Ym)\r\n\r\n# Plotte\r\nggplot(depo_m, mapping = aes(Ym, Total, group = 1))+ # group = 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird\r\n  #zeichne Lockdown 1\r\n  geom_rect(mapping = aes(xmin=\"2020 3\", xmax=\"2020 5\",\r\n                          ymin =0, ymax=max(Total+(Total/100*10))),\r\n            fill = \"lightskyblue\", alpha = 0.4, colour = NA)+\r\n  #zeichne Lockdown 2\r\n  geom_rect(mapping = aes(xmin=\"2020 12\", xmax=\"2021 3\", \r\n                          ymin =0, ymax=max(Total+(Total/100*10))), \r\n            fill = \"lightskyblue\", alpha = 0.4, colour = NA)+\r\n  geom_line(alpha = 0.6, size = 1.5)+\r\n  scale_x_discrete(breaks = c(\"2019 1\", \"2019 7\",\"2019 1\",\"2020 1\",\"2020 7\",\"2021 1\",\"2021 7\"),\r\n                   labels = c(\"2019 1\", \"2019 7\",\"2019 1\",\"2020 1\",\"2020 7\",\"2021 1\",\"2021 7\"))+\r\n  labs(title= \"\", y=\"Fussgaenger:innen pro Monat\", x = \"Jahr\")+\r\n  theme_linedraw(base_size = 15)+\r\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))\r\n\r\n\r\n\r\n# Beachtet, dass ich in der Musterloesung keine Resultate exportiere, untenstehend aber der Code dazu:\r\n\r\n# ggsave(\"Entwicklung_Zaehlstelle.png\", width=20, height=10, units=\"cm\", dpi=1000, \r\n#        path = \"_fallstudien/_R_analysis/results/\") \r\n\r\n\r\n\r\nAufgabe 2: Wochengang\r\n\r\n\r\n# mean / d / phase\r\nmean_phase_wd <- depo_d %>% \r\n  group_by(Wochentag, Phase) %>% \r\n  summarise(Total = mean(Total))\r\n\r\n# write.csv(mean_phase_wd, \"_fallstudien/_R_analysis/results/mean_phase_wd.csv\")\r\n\r\n#plot\r\nggplot(data = depo_d)+\r\n  geom_boxplot(mapping = aes(x= Wochentag, y = Total, fill = Phase))+\r\n  labs(title=\"\", y= \"Fussgaenger:innen pro Tag\")+\r\n  scale_fill_manual(values = c(\"royalblue\", \"red4\", \"orangered\", \"gold2\"))+\r\n  theme_classic(base_size = 15)+\r\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),\r\n        legend.title = element_blank())\r\n\r\n\r\n\r\n# ggsave(\"Wochengang_Lockdown.png\", width=15, height=15, units=\"cm\", dpi=1000, \r\n#        path = \"_fallstudien/_R_analysis/results/\")\r\n\r\n# Statistik: Unterschied WE und WO waehrend Lockdown 1\r\nt.test(depo_d$Total [depo_d$Phase == \"Lockdown_1\" & depo_d$Wochenende==\"Werktag\"], \r\n       depo_d$Total [depo_d$Phase == \"Lockdown_1\" & depo_d$Wochenende==\"Wochenende\"])\r\n\r\n\r\n\r\nAufgabe 3: Tagesgang\r\n\r\n\r\n# 3.3 Tagesgang ####\r\n# Bei diesen Berechnungen wird jeweils der Mittelwert pro Stunde berechnet. \r\n# wiederum nutzen wir dafuer \"pipes\"\r\nMean_h <- depo %>% \r\n  group_by(Wochentag, Stunde, Phase) %>% \r\n  summarise(Total = mean(Total)) \r\n\r\n# transformiere fuer Plotting\r\nMean_h_long<- reshape2::melt(Mean_h,measure.vars = c(\"Total\"),\r\n                             value.name = \"Durchschnitt\",variable.name = \"Gruppe\")\r\n\r\n# Plotte den Tagesgang, unterteilt nach Wochentagen\r\n\r\n# Normal\r\ntag_norm <- ggplot(subset(Mean_h_long, Phase %in% c(\"Normal\")), \r\n                   mapping=aes(x = Stunde, y = Durchschnitt, colour = Wochentag, linetype = Wochentag))+\r\n  geom_line(size = 2)+\r\n  scale_colour_viridis_d()+\r\n  scale_linetype_manual(values = c(rep(\"solid\", 5),  \"twodash\", \"twodash\"))+\r\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\r\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\r\n  lims(y = c(0,25))+\r\n  theme_linedraw(base_size = 15)+\r\n  theme(legend.position = \"right\")\r\n\r\n# Lockdown 1\r\ntag_lock_1 <- ggplot(subset(Mean_h_long, Phase %in% c(\"Lockdown_1\")), \r\n                     mapping=aes(x = Stunde, y = Durchschnitt, colour = Wochentag, linetype = Wochentag))+\r\n  geom_line(size = 2)+\r\n  scale_colour_viridis_d()+\r\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\"))+\r\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\r\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\r\n  lims(y = c(0,25))+\r\n  theme_linedraw(base_size = 15)+\r\n  theme(legend.position = \"right\")\r\n\r\n# Lockdown 2\r\ntag_lock_2 <- ggplot(subset(Mean_h_long, Phase %in% c(\"Lockdown_2\")), \r\n                     mapping=aes(x = Stunde, y = Durchschnitt, colour = Wochentag, linetype = Wochentag))+\r\n  geom_line(size = 2)+\r\n  scale_colour_viridis_d()+\r\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\"))+\r\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\r\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\r\n  lims(y = c(0,25))+\r\n  theme_linedraw(base_size = 15)+\r\n  theme(legend.position = \"right\")\r\n\r\n# Covid\r\ntag_covid <- ggplot(subset(Mean_h_long, Phase %in% c(\"Covid\")), \r\n                    mapping=aes(x = Stunde, y = Durchschnitt, colour = Wochentag, linetype = Wochentag))+\r\n  geom_line(size = 2)+\r\n  scale_colour_viridis_d()+\r\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\"))+\r\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\r\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\r\n  lims(y = c(0,25))+\r\n  theme_linedraw(base_size = 15)+\r\n  theme(legend.position = \"right\")\r\n\r\n# Arrange und Export Tagesgang\r\nggarrange(tag_lock_1+            # plot 1 aufrufen\r\n            rremove(\"x.text\")+   # plot 1 braucht es nicht alle Achsenbeschriftungen\r\n            rremove(\"x.title\"),            \r\n          tag_lock_2+            # plot 2 aufrufen\r\n            rremove(\"y.text\")+   # bei plot 2 brauchen wir keine Achsenbeschriftung\r\n            rremove(\"y.title\")+\r\n            rremove(\"x.text\")+\r\n            rremove(\"x.title\"),\r\n          tag_norm,\r\n          tag_covid+\r\n            rremove(\"y.text\")+   \r\n            rremove(\"y.title\"),\r\n          ncol = 2, nrow = 2,    # definieren, wie die plots angeordnet werden\r\n          heights = c(0.9, 1),  # beide plots sind wegen der fehlenden Beschriftung nicht gleich hoch\r\n          widths = c(1,0.9),    \r\n          labels = c(\"a) Lockdown 1\", \"b) Lockdown 2\", \"c) Normal\", \"d) Covid\"),\r\n          label.x = 0.1,        # wo stehen die Plottitel\r\n          label.y = 0.99,\r\n          common.legend = TRUE, legend = \"bottom\") # wir brauchen nur eine Legende, unten\r\n\r\n\r\n\r\n# ggsave(\"Tagesgang.png\", width=25, height=25, units=\"cm\", dpi=1000,\r\n#        path = \"_fallstudien/_R_analysis/results/\")\r\n\r\n\r\n\r\nAufgabe 4: Kennzahlen\r\n\r\n\r\n# 3.4 Kennzahlen ####\r\ntotal_phase <- depo_d %>% \r\n  # gruppiere nach Phasen inkl. Normal. Diese Levels haben wir bereits definiert\r\n  group_by(Phase) %>% \r\n  summarise(Total = sum(Total),\r\n            IN = sum(Fuss_IN),\r\n            OUT = sum(Fuss_OUT))\r\n\r\n# write.csv(total_phase, \"_fallstudien/_R_analysis/results/total_phase.csv\")\r\n\r\n# mean besser Vergleichbar, da Zeitreihen unterschiedlich lange\r\nmean_phase_d <- depo_d %>% \r\n  group_by(Phase) %>% \r\n  summarise(Total = mean(Total),\r\n            IN = mean(Fuss_IN),\r\n            OUT = mean(Fuss_OUT))\r\n# berechne prozentuale Richtungsverteilung\r\nmean_phase_d <- mean_phase_d %>% \r\n  mutate(Proz_IN = round(100/Total*IN, 1)) %>% # berechnen und auf eine Nachkommastelle runden\r\n  mutate(Proz_OUT = round(100/Total*OUT,1))\r\n\r\n# write.csv(mean_phase_d, \"_fallstudien/_R_analysis/results/mean_phase_d.csv\")\r\n\r\n# selektiere absolute Zahlen\r\n# behalte rel. Spalten (nur die relativen Prozentangaben)\r\nmean_phase_d_abs <- mean_phase_d[,-c(2,5,6), drop=FALSE]\r\n# transformiere fuer Plotting\r\nmean_phase_d_abs <- reshape2::melt(mean_phase_d_abs, \r\n                                   measure.vars = c(\"IN\",\"OUT\"),\r\n                                   value.name = \"Durchschnitt\",variable.name = \"Gruppe\")\r\n\r\n# selektiere relative Zahlen\r\n# behalte rel. Spalten (nur die relativen Prozentangaben)\r\nmean_phase_d_proz <- mean_phase_d[,-c(2:4), drop=FALSE]\r\n# transformiere fuer Plotting\r\nmean_phase_d_proz <- reshape2::melt(mean_phase_d_proz, \r\n                                    measure.vars = c(\"Proz_IN\",\"Proz_OUT\"),\r\n                                    value.name = \"Durchschnitt\",variable.name = \"Gruppe\")\r\n\r\n# Visualisierung abs\r\nabs <- ggplot(data = mean_phase_d_abs, mapping = aes(x = Gruppe, y = Durchschnitt, fill = Phase))+\r\n  geom_col(position = \"dodge\", width = 0.8)+\r\n  scale_fill_manual(values = c(\"royalblue\", \"red4\", \"orangered\", \"gold2\"), name = \"Phase\")+\r\n  scale_x_discrete(labels = c(\"IN\", \"OUT\"))+\r\n  labs(y = \"Durchschnitt [mean]\", x= \"Bewegungsrichtung\")+\r\n  theme_classic(base_size = 15)+\r\n  theme(legend.position = \"bottom\")\r\n\r\n# Visualisierung %\r\nproz <- ggplot(data = mean_phase_d_proz, mapping = aes(x = Gruppe, y = Durchschnitt, fill = Phase))+\r\n  geom_col(position = \"dodge\", width = 0.8)+\r\n  scale_fill_manual(values = c(\"royalblue\", \"red4\", \"orangered\", \"gold2\"), name = \"Phase\")+\r\n  scale_x_discrete(labels = c(\"IN\", \"OUT\"))+\r\n  labs(y = \"Durchschnitt [%]\", x= \"Bewegungsrichtung\")+\r\n  theme_classic(base_size = 15)+\r\n  theme(legend.position = \"bottom\")\r\n\r\n# Arrange und Export Verteilung\r\nggarrange(abs,            # plot 1 aufrufen\r\n          proz,            # plot 2 aufrufen\r\n          ncol = 2, nrow = 1,    # definieren, wie die plots angeordnet werden\r\n          heights = c(1),        # beide sind bleich hoch\r\n          widths = c(1,0.95),    # plot 2 ist aufgrund der fehlenden y-achsenbesch. etwas schmaler\r\n          labels = c(\"a) Absolute Verteilung\", \"b) Relative Verteilung\"),\r\n          label.x = 0,        # wo stehen die labels\r\n          label.y = 1.0,\r\n          common.legend = TRUE, legend = \"bottom\") # wir brauchen nur eine Legende, unten\r\n\r\n\r\n\r\n# ggsave(\"Verteilung.png\", width=20, height=15, units=\"cm\", dpi=1000,\r\n#        path = \"_fallstudien/_R_analysis/results/\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_6_Deskriptive_Analysen_Loesung/Musterloesung_Desktiptive_Analysen_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2021-11-02T09:04:05+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "fallstudien/BE_S_7_Multivariate_Statistik/",
    "title": "KW 45 Aufgabe Multivariate Statistik",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nNachdem die deskriptiven Resultate vorliegen, kann jetzt die Berechnung eines multivariaten Modells angegangen werden. Das Ziel ist es, den Zusammenhang zwischen der gesamten Anzahl Besucher:innen (Total) und verschiedenen erklärenden Variablen (Wetter, Ferien, Phase Covid, Wochentag, KW, Jahr) aufzuzeigen.\r\nAufgabe 1: Verbinden von Daten (Join)\r\nAktuell haben wir noch zwei einzelne Datensätze von Interesse:\r\neinen mit den täglichen Besuchszahlen von Besucher:innen mit den dazugehörigen Datumsinformationen (Datensatz “depo_d” - zu Tagen aggregierte Stunden)\r\nund einen mit den Wetterparametern (“meteo”).\r\nDiese beiden Datensätze müssen miteinander verbunden werden. Ziel: Ein Datensatz mit den täglichen Zähldaten und Datumsinformationen angereichert mit Wetterdaten. Der neue Datensatz soll \" umwelt \" heissen.\r\nSind durch das Zusammenführen NA’s entstanden? Falls ja, müssen alle für die weiteren Auswertungen ausgeschlossen werden.\r\nAufgabe 2: Convinience Variablen, Faktoren, Skalieren\r\nWir haben bereits verschiedene Convinience Variablen definiert. Nun brauchen wir noch neu die Ferienzeiten als Faktor.\r\n2a)\r\nDefiniert mit if_else() alle Ferienzeiträume in euren df umwelt. WENN Ferien waren, DANN = 1, SONST = 0\r\nHinweis: etwas ganz ähnliches habt ihr unter Import/Vorverarbeitung bereits für die Covid-Phasen gemacht.\r\n2b)\r\nMacht aus den Ferien einen Faktor.\r\nAuch das Jahr und die KW müssen als Faktor vorliegen.\r\nNachfolgende Schritte funktionieren nur, wenn umwelt als data.frame vorliegt. Prüft das und ändert das, falls noch kein data.frame.\r\nUnser Modell kann nur mit Ganzzahlen (Integer) umgehen. Daher müssen Kommazahlen in Integer umgewandelt werden. Zum Glück haben wir das schon gemacht und uns bleibt nichts weiter zu tun. =)\r\n2c)\r\nProblem: verschiedene Skalen der Variablen (z.B. Temperatur in Grad Celsius, Niederschlag in Millimeter und Sonnenscheindauer in %)\r\nLösung: Skalieren aller Variablen mit Masseinheiten gemäss unterstehendem Code:\r\n\r\numwelt <- umwelt %>% \r\n  mutate(tre200jx_scaled = scale(tre200jx)%>%\r\n  ...\r\n\r\nAufgabe 3: Korrelationen und Variablenselektion\r\n3a)\r\nKorrelierende Variablen können das Modellergebnis verfälschen. Daher muss vor der Modelldefinition auf Korrelation zwischen den Messwerten getestet werden. Welches sind die erklärenden Variablen, welches ist die Abhängige?\r\nTeste mittels folgendem Code auf eine Korrelation zwischen den Messwerten.\r\n\r\ncor <-  cor(umwelt[,ERSTE SPALTE MIT ERKLAERENDEN MESSWERTEN : \r\n                     LETZTE SPALTE MIT ERKLAERENDEN MESSWERTEN)])\r\n\r\n3b)\r\nKorrelationsmatrix erstellen\r\nMit dem folgenden Code kann eine Korrelationsmatrix (mit den Messwerten) aufgebaut werden. Hier kann auch die Schwelle für die Korrelation gesetzt werden (0.7 ist liberal / 0.5 konservativ).\r\n\r\n\r\ncor[abs(cor) < 0.7] <-  0 #Setzt alle Werte kleiner 0.7 auf 0\r\n\r\n\r\n\r\nZur Visualisierung kann ein einfacher Plot erstellt werden.\r\n\r\nchart.Correlation(umwelt[,ERSTE SPALTE MIT ERKLAERENDEN MESSWERTEN : \r\n                     LETZTE SPALTE MIT ERKLAERENDEN MESSWERTEN)], histogram=TRUE, pch=19)\r\n\r\nWo kann eine kritische Korrelation beobachtet werden? Kann man es verantworten, trotzdem alle drei Wetterparameter in das Modell zu geben?\r\nFalls ja: warum? Falls nein: schliesst den betreffenden Parameter aus. Wenn ihr Parameter ausschliesst: welchen der beiden korrelierenden Parameter behaltet ihr im Modell?\r\nAufgabe 4 (OPTIONAL): Automatische Variablenselektion\r\nFühre die dredge-Funktion und ein Modelaveraging durch. Der Code dazu ist unten. Was passiert in der Funktion? Macht es Sinn, die Funktion auszuführen?\r\nHinweis: untenstehender Code ist rechenentensiv.\r\n\r\n\r\nf <- Total ~ Wochentag + Ferien + Phase +\r\n  tre200jx_scaled + rre150j0_scaled + sremaxdv_scaled\r\n# Jetzt kommt der Random-Factor hinzu und es wird eine Formel daraus gemacht\r\nf_dredge <- paste(c(f, \"+ (1|KW)\", \"+ (1|Jahr)\"), collapse = \" \") %>% \r\n  as.formula()\r\n# Das Modell mit dieser Formel ausführen\r\nm <- glmer(f_dredge, data = umwelt, family = poisson, na.action = \"na.fail\")\r\n# Das Modell in die dredge-Funktion einfügen (siehe auch ?dredge)\r\nall_m <- dredge(m)\r\n# suche das beste Modell\r\nprint(all_m)\r\n# Importance values der Variablen \r\n# hier wird die wichtigkeit der Variablen in den verschiedenen Modellen abgelesen\r\nMuMIn::importance(all_m) \r\n\r\n# Schliesslich wird ein Modelaverage durchgeführt \r\n# Schwellenwert für das delta-AIC = 2\r\navgmodel <- model.avg(all_m, rank = \"AICc\", subset = delta < 2) \r\nsummary(avgmodel)\r\n\r\n\r\n\r\nAufgabe 5: Verteilung der abhaengigen Variabel pruefen\r\nDie Verteilung der abhängigen Variabel bestimmt generell, was für ein Modell geschrieben werden kann. Die Modelle gehen von einer gegebenen Verteilung aus. Wenn diese Annahme verletzt wird, kann es sein, dass das Modellergebnis nicht valide ist.\r\nFolgender Codeblock zeigt, wie die Daten auf verschiedene Verteilungen passen.\r\nHinweis: es kann sein, dass nicht jede Verteilung geplottet werden kann, es erscheint eine Fehlermeldung. Das ist nicht weiter schlimm, die betreffende Verteilung kann gelöscht werden. Analog muss das auch im Befehl gofstat() passieren.\r\nDie besten drei Verteilungen (gemäss AIC) sollen zur Visualisierung geplottet werden.\r\n\r\n\r\nf1<-fitdist(umwelt$Anzahl_Total,\"norm\")  # Normalverteilung\r\nf1_1<-fitdist(umwelt$Anzahl_Total,\"lnorm\")  # log-Normalvert. \r\nf2<-fitdist(umwelt$Anzahl_Total,\"pois\")  # Poisson\r\nf3<-fitdist(umwelt$Anzahl_Total,\"nbinom\")  # negativ binomial\r\nf4<-fitdist(umwelt$Anzahl_Total,\"exp\")  # exponentiell\r\nf5<-fitdist(umwelt$Anzahl_Total,\"gamma\")  # gamma\r\nf6<-fitdist(umwelt$Anzahl_Total,\"logis\")  # logistisch\r\nf7<-fitdist(umwelt$Anzahl_Total,\"geom\")  # geometrisch\r\nf8<-fitdist(umwelt$Anzahl_Total,\"weibull\")  # Weibull\r\n\r\ngofstat(list(f1,f1_1,f2,f3,f4,f5,f6,f7,f8), \r\n        fitnames = c(\"Normalverteilung\", \"log-Normalverteilung\", \"Poisson\",\r\n                     \"negativ binomial\",\"exponentiell\",\"gamma\", \"logistisch\",\r\n                     \"geometrisch\",\"weibull\"))\r\n\r\n# die 4 besten (gemaess Akaike's Information Criterion) als Plot, \r\nplot.legend <- c(\"log norm\", \"weibull\", \"gamma \", \"negativ binomial\")\r\n# vergleicht mehrere theoretische Verteilungen mit den empirischen Daten\r\ncdfcomp(list(f1_1, f8, f5, f3), legendtext = plot.legend)\r\n\r\n\r\n\r\nWie sind unsere Daten verteilt? Welche Modelle können wir anwenden?\r\nAufgabe 6: Multivariates Modell berechnen\r\nIch verwende die Funktion glmer() aus der Bibliothek lme4. glmer ist neuer, schneller und zuverlässiger als vergleichbare Funktionen (diese Bibliothek wird auch in vielen wissenschaftlichen Papern im Feld Biologie / Wildtiermamagement zitiert).\r\n6a)\r\nDie Totale Besucheranzahl soll durch die Wetterparameter, den Wochentag, die Ferien sowie die Covid-Phasen erklärt werden (Datensatz “umwelt”). Die Saisonalität (KW und Jahr) soll hierbei nicht beachtet werden, sie werden als “random factor” bestimmt.\r\nFrage: Warum bestimmen wir KW und Jahr als random factor?\r\nFalls ihr der Meinung seid, KW und / oder Jahr sind keine “guten” random factor, dann nehmt sie nicht an random factor ins Modell sondern als erklärende Variable. Begründet das unbedingt in eurer Methodik.\r\nHinweis: Auch wenn wir gerade herausgefunden haben, dass die Verteilung negativ binomial (in meinem Fall) ist, berechne ich für den Vergleich zuerst ein “einfaches Modell” der Familie poisson.\r\nDie Modellformel lautet:\r\n\r\nTages_Model <- glmer(ABHAENGIGE VARIABLE ~ ERKLAERENDE VARIABLE 1 + ERKLAERENDE VARIABLE 2 +\r\n                      ERKLAERENDE VARIABLE 3 + ERKLAERENDE VARIABLE 4 + \r\n                      ERKLAERENDE VARIABLE 5 + ERKLAERENDE VARIABLE 6 +\r\n                     (1|RANDOM FACTOR A)+ (1|RANDOM FACTOR B),\r\n                     family = poisson, data = DATENSATZ))\r\n\r\nsummary(Tages_Model) #Zeigt das Resultat des Modells\r\n\r\nFrage: Was bedeutet “family = poisson”?\r\n6b) Modelldiagnostik\r\nPrüft optisch ob euer Modell valide ist.\r\nHinweis: glmer bringt einige eigene Funktionen mit, mit denen sich testen lässt, ob das Modell valide ist. Unten sind sie aufgeführt (–> analog zu den Funktionen aus der Vorlesung, aber halt für glmer).\r\n\r\n\r\n# Verteilung der Residuen\r\nplot(Tages_Model, type = c(\"p\", \"smooth\"))\r\n# Pruefen auf Normalverteilung\r\nqqmath(Tages_Model)\r\n\r\n# Overdispersion describes the observation that variation is higher than would be expected.\r\ndispersion_glmer(Tages_Model) #it shouldn't be over 1.4\r\n# zeige die erklaerte Varianz (je hoeher r2m ist, desto besser!)\r\nr.squaredGLMM(Tages_Model) \r\n\r\n\r\n\r\nSind die Voraussetzungen des Modells erfuellt?\r\n6c) Alternative Modelle\r\nWir sind auf der Suche nach dem minimalen adäquaten Modell. Das ist ein iterativer Prozess. Wir schreiben ein Modell, prüfen ob die Voraussetzungen erfüllt sind und ob die abhängige Variable besser erklärt wird als im vorhergehenden. Und machen das nochmals und nochmals…\r\nUnsere (meine) Daten sind negativ binomial verteilt. Daher sollte wir unbedingt ein solches Modell programmieren. –> Funktion glmer.nb()\r\nHypothese: “Es gehen weniger Leute in den Wald, wenn es zu heiss ist” –> auf quadratischen Term Temperatur testen (Codeblock unten).\r\n\r\n\r\n...\r\ntre200jx_scaled + I(tre200jx_scaled^2) + \r\n  ...\r\n\r\n\r\n\r\nKönnte es zwischen einzelnen Variablen zu Interaktionen kommen, die plausible sind? (z. B.: Im Winter hat Niederschlag einen negativeren Effekt als im Sommer, wenn es heiss ist) –> Falls ja: testen!\r\nHinweis: Interaktionen berechnen ist sehr rechenintensiv. Auch die Interpretation der Resultate wird nicht unbedingt einfacher. Wenn ihr auf Interaktionen testet, dann geht “langsam” vor, probiert nicht zu viel auf einmal.\r\nWenn ihr verschiedene Modelle gerechnet habt, können diese über den AICc verglichen werden. Folgender Code kann dazu genutzt werden:\r\n\r\n\r\n# Vergleich der Modellguete mittels AICc\r\ncand.models<-list()\r\ncand.models[[1]] <- Tages_Model\r\ncand.models[[2]] <- Tages_Model_nb\r\ncand.models[[3]] <- Tages_Model_nb_quad\r\n\r\nModnames<-c(\"Tages_Model\",\"Tages_Model_nb\", \r\n            \"Tages_Model_nb_quad\")\r\naictab(cand.set=cand.models,modnames=Modnames)\r\n#K = Anzahl geschaetzter Parameter (2 Funktionsparameter und die Varianz)\r\n#Delta_AICc <2 = Statistisch gleichwertig\r\n#AICcWt =  Akaike weight in %\r\n\r\n\r\n\r\n6d) (OPTIONAL) Transformationen\r\nBei meinen Daten waren die Modellvoraussetzungen überall mehr oder weniger verletzt. Das ist ein Problem, allerdings auch nicht ein so grosses (man sollte es aber trotzdem ernst nehmen). Mehr dazu unter:\r\nhttps://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.13434\r\nFalls die Voraussetzungen stark verletzt werden, wäre eine Transformation angezeigt.\r\nMehr dazu unter:\r\nhttps://www.datanovia.com/en/lessons/transform-data-to-normal-distribution-in-r/\r\nBerechne den skewness coefficient\r\n\r\n\r\nlibrary(moments)\r\nskewness(umwelt$Anzahl_Total)\r\n# A positive value means the distribution is positively skewed (rechtsschief).\r\n# The most frequent values are low; tail is toward the high values (on the right-hand side)\r\n\r\n\r\n\r\nWelche Transformation kann angewandt werden?\r\nWas spricht gegen eine Transformation (auch im Hinblick zur Visualisierung und Interpretation)? Was spricht dafür?\r\n6c) Exportiere die Modellresultate (des besten Modells)\r\nModellresultate können mit summary() angezeigt werden. Ich verwende aber lieber die Funktion tab_model()! Die Resultate werden gerundet und praktisch im separaten Fenster angezeigt. Von dort kann man sie via copy + paste ins (z.B.) Word bringen.\r\n\r\n\r\ntab_model(MODELLNAME, transform = NULL, show.se = TRUE)\r\n# The marginal R squared values are those associated with your fixed effects, \r\n# the conditional ones are those of your fixed effects plus the random effects. \r\n# Usually we will be interested in the marginal effects.\r\n\r\n\r\n\r\nAufgabe 7: Modellvisualisierung\r\nVisualisiert die (signifikanten) Ergebnisse eures Modells.\r\nDas Resultat soll sich für kontinuierliche Variablen an untenstehendem Plot orientieren:\r\n\r\n\r\n\r\nFür diskrete Variablen haltet ihr euch bitte an diesen Plot:\r\n\r\n\r\n\r\nEinige Codeblocks, die euch dabei helfen können:\r\n\r\n\r\nt <- plot_model(NAME_DES_BESTEN_MODELLS, # hier sagen wir, aus welchem Modell geplottet werden soll\r\n                \r\n                # Wir moechten nicht nur die tatsaechlichen Werte geplottet, sondern \r\n                # \"Vorhersagen\" / predictions (fuer jeden Wert auf der x-Achse soll es auch einen\r\n                # auf der y-Achse geben)\r\n                type = \"pred\", \r\n                \r\n                # jetzt nennen wir den Term aus dem Modell:\r\n                # [all] = Unser Modell enthaellt polynomial oder cubic / quadratic Terme. \r\n                # mit [all] tragen wir dem Rechnung und zeichnen \"smooth\" plots\r\n                terms = \"tre200jx_scaled [all]\", \r\n                \r\n                # und schliesslich setzen wir die Achsentitel\r\n                title = \"\", axis.title = c(\"Tagesmaximaltemperatur [°C]\", \r\n                                           \"Fussgaenger:innen pro Tag [log]\"))\r\n\r\n# Vorbereitungen zum Hinzufuegen der Achsenbeschriftung (Aktuell sehen wir noch die skalierten Werte). \r\n# Nun sollen aber die unskalierten Werte gezeigt werden.\r\nlabels <- round(seq(floor(min(umwelt$tre200jx)), ceiling(max(umwelt$tre200jx)),\r\n                    \r\n                    # length.out = ___ --> Anpassen gemaess der Anzahl zu sehender breaks auf dem Plot\r\n                    length.out = 5), 0) \r\n# Schliesslich fuegen wir die Achsenbeschriftung hinzu.\r\n(Tempplot <- t + \r\n    \r\n    # fuege die x- Achsenbeschriftung hinzu.\r\n    # breaks = c() --> Anpassen gemaess der zu sehender breaks auf dem Plot\r\n    scale_x_continuous(breaks = c(-2,-1,0,1,2), \r\n                       labels = c(labels))+\r\n    \r\n    # fuege die y- Achsenbeschriftung hinzu. Hier transformieren wir die Werte zurueck\r\n    # Hinweis: falls ihr keine Transformation gemacht habt, muessen die y-Werte auch nicht \r\n    # zuruecktransformiert werden.\r\n    scale_y_continuous(breaks = c(0,0.5,1,1.5,2),\r\n                       labels = round(c(10^0, 10^0.5, 10^1, 10^1.5, 10^2),0),\r\n                       limits = c(0, 2))+ \r\n    theme_classic(base_size = 15))\r\n\r\n# Exportiere das Resultat\r\nggsave(\"temp.png\", width=15, height=15, units=\"cm\", dpi=1000, \r\n       path = \"_fallstudien/_R_analysis/results/\") \r\n\r\n\r\n\r\nHinweis: damit unsere Plots verglichen werden können, sollen sie alle dieselbe Skalierung (limits) auf der y-Achse haben. Das wird erreicht, indem man bei jedem Plot die limits in scale_y_continuous() gleichsetzt.\r\nAbschluss\r\nNun habt ihr verschiedenste Ergebnisse vorliegen. In einem wissenschaftlichen Bericht sollen aber niemals alle Ergebnisse abgebildet werden. Eine Faustregel besagt, dass nur signifikante Ergebnisse visualisiert werden. Entscheidet euch daher, was ihr in eurem Bericht abbilden wollt und was lediglich besprochen werden soll.\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_7_Multivariate_Statistik/Multivariate_Statistik_files/figure-html5/unnamed-chunk-14-1.png",
    "last_modified": "2021-11-02T09:04:05+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "fallstudien/BE_S_6_Deskriptive_Analysen/",
    "title": "KW 44: Aufgabe Deskriptive Analysen",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-11-02",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nAufgabe 1: Verlauf der Besuchszahlen / m\r\nNachdem wir die Projektstruktur aufgebaut haben und die Daten vorbereitet sind, machen wir uns an die deskriptive Analyse. Dies macht eigentlich immer Sinn. Bevor mach sich an die schliessende Statistik macht, muss man ein “Gefühl” für die Daten bekommen. Dies funktioniert am einfachsten mit deskriptiven, explorativen Analysen.\r\nWir interessieren uns in den Analysen grundsätzlich für 4 Zeitabschnitte:\r\nNormal (vom Start der Erhebungen bis vor dem ersten Lockdown)\r\nLockdown 1\r\nLockdown 2\r\nSeit Covid, aber nicht während eines Lockdowns\r\nWir haben relativ lange Zeitreihen. Zur Visualisierung des generellen Trends greifen wir darum auf die aggregierten Daten zurück - das macht den Plot übersichtlicher und damit aussagekräftiger.\r\nPlottet den Verlauf der monatlichen Besuchszahlen an eurer Zählstelle. Auf der x-Achse steht dabei dabei Jahr und Monat (gespeichert im df depo_m), auf der y-Achse die monatlichen Besuchszahlen. Zeichnet auch die beiden Lockdown ein (Hinweis: rundet das Start- und Enddatum des Lockdowns auf den Monat, da im Plot die monatlichen Zahlen gezeigt werden).\r\nHaltet euch dabei an untenstehenden Plot:\r\n\r\n\r\n\r\nHinweis: - Nutzt zum plotten ggplot() - folgende Codeschnipsel helfen euch:\r\n\r\n\r\nggplot(data = depo_m, mapping = aes(Ym, Total, group = 1))+ # group 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird\r\n  # zeichne Lockdown 1; ein einfaches Rechteck. bestimme mit min und max die Dimensionen\r\n  geom_rect(mapping = aes(xmin=\"2020 3\", xmax=\"2020 5\",\r\n                          ymin =0, ymax=max(Total+(Total/100*10))), # das Rechteck soll 10 % grösser als die maximale Besuchszahl sein \r\n            fill = \"lightskyblue\", alpha = 0.4, colour = NA)+\r\n  # zeichne Lockdown 2\r\n    ...+\r\n  # zeichne die Linie\r\n  geom_line(...)+\r\n  # bestimme manuell, wo auf der x-Achse die breaks sind und wie diese angeschrieben werden sollen\r\n  scale_x_discrete(breaks = c(\"...\", \"...\", ...),\r\n                   labels = c(\"...\", \"...\", ...))+\r\n  theme_linedraw(base_size = 15)+\r\n  ...\r\n\r\n\r\n\r\nExportiert euren Plot mit ggsave() nach results. Breite = 20, Höhe = 10, Einheiten = cm, dpi = 1000\r\nAufgabe 2: Wochengang\r\nNachdem wir nun wissen, wie sich die Besuchszahlen während der Untersuchungsdauer monatlich entwickelt haben, möchten wir genauer untersuchen, wie sich die Zahlen je nach Phase (Normal, Lockdown 1. Lockdown 2 und Covid) auf die Wochentage verteilen.\r\n2a)\r\nBerechnet zuerst die Totale Anzahl pro Wochentag pro Phase.\r\n\r\n\r\nmean_phase_wd <- depo_d %>% \r\n  group_by(...) %>% \r\n  ...\r\n\r\n\r\n\r\nSpeichert das als .csv\r\n\r\n\r\nwrite.csv(mean_phase_wd, \"results/mean_phase_wd.csv\")\r\n\r\n\r\n\r\n2b)\r\nErstellt einen Boxplot nach untenstehender Vorgabe:\r\n\r\n\r\n\r\nHinweis: - Nutzt zum plotten ggplot() - folgende Codeschnipsel helfen euch:\r\n\r\n\r\nggplot(data = depo_d)+\r\n  geom_boxplot(mapping = aes(x= Wochentag, y = Total, fill = Phase))+\r\n  ...\r\n\r\n\r\n\r\nExportiert auch diesen Plot mit ggsave(). Welche Breite und Höhe passt hier?\r\n2c)\r\nSind die Unterschiede zwischen Werktag und Wochenende wirklich signifikant? Falls ja, in allen Phasen oder nur während bestimmter?\r\nPrüft das pro Phase mit einem einfachen t.test.\r\nAufgabe 3: Tagesgang\r\nVom Grossen zum Kleinen, von der Übersicht ins Detail. Jetzt widmen wir uns dem Tagesgang, das heisst der Verteilung der Besuchenden auf die 24 Tagesstunden je nach Phase.\r\n3a)\r\nBerechnet zuerst den Mittelwert der Totalen Besuchszahlen pro Wochentag pro Stunde pro Phase. (ganz ähnlich wie unter 2a) und speichert das df unter Mean_h.\r\n3b)\r\nPlottet den Tagesgang, unterteilt nach den 7 Wochentagen nun für unsere 4 Phasen.\r\n\r\n\r\n\r\nFür die Phase “Normal” benutze ich folgenden Codeschnipsel. Speichert den Plot ab (hier: tag_norm).\r\n\r\n\r\ntag_norm <- ggplot(subset(Mean_h, Phase %in% c(\"Normal\")), \r\n                     mapping=aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag))+\r\n  ...\r\n\r\n\r\n\r\nHinweis: Achtet darauf, dass die Skalierung der y-Achse bei allen 4 Plots dieselbe ist (z.B. immer vom 0 bis 25).\r\n3c)\r\nArrangiert die vier erstellten Plots und speichert das Resultat. Das ist etwas tricky, darum hier der vollständige Code.\r\n\r\n\r\n# Arrange und Export Tagesgang\r\nggarrange(tag_lock_1+            # plot 1 aufrufen\r\n            rremove(\"x.text\")+   # plot 1 braucht es nicht alle Achsenbeschriftungen\r\n            rremove(\"x.title\"),            \r\n          tag_lock_2+            # plot 2 aufrufen\r\n            rremove(\"y.text\")+   # bei plot 2 brauchen wir keine Achsenbeschriftung\r\n            rremove(\"y.title\")+\r\n            rremove(\"x.text\")+\r\n            rremove(\"x.title\"),\r\n          tag_norm,\r\n          tag_covid+\r\n            rremove(\"y.text\")+   \r\n            rremove(\"y.title\"),\r\n          ncol = 2, nrow = 2,    # definieren, wie die plots angeordnet werden\r\n          heights = c(0.9, 1),  # beide plots sind wegen der fehlenden Beschriftung nicht gleich hoch\r\n          widths = c(1,0.9),    \r\n          labels = c(\"a) Lockdown 1\", \"b) Lockdown 2\", \"c) Normal\", \"d) Covid\"),\r\n          label.x = 0.1,        # wo stehen die Plottitel\r\n          label.y = 0.99,\r\n          common.legend = TRUE, legend = \"bottom\") # wir brauchen nur eine Legende, unten\r\n\r\nggsave(\"Tagesgang.png\", width=25, height=25, units=\"cm\", dpi=1000,\r\n       path = \"results/\")\r\n\r\n\r\n\r\nAufgabe 4: Kennzahlen\r\nSchliesslich berechnen wir noch einige Kennzahlen (Anzahl Passagen, Richtungsverteilung, …).\r\n4a)\r\nGruppiert nach Phase und berechnet dieses mal die Summe (nicht den Durchschnitt) Total, IN und OUT (ähnlich wie in 2a und 3a).\r\nSpeichert das Ergebnis als .csv\r\n4b)\r\nDie Zeitreihen der 4 Phasen unterscheiden sich deutlich voneinander. Totale Summen sind da kaum miteinander vergleichbar, besser eignet sich der Durchschnitt oder der Median.\r\nGruppiert nach Phase und berechnet den Durchschnitt Total, IN und OUT und speichert das df unter mean_phase_d.\r\nErgänzt das mit der prozentualen Richtungsverteilung\r\n\r\n\r\nmean_phase_d <- mean_phase_d %>% \r\n  mutate(Proz_IN = round(100/Total*IN, 1)) %>% # berechnen und auf eine Nachkommastelle runden\r\n  ...\r\n\r\n\r\n\r\nSpeichert das Ergebnis als .csv\r\nSelektiert nun die absoluten Zahlen im df mean_phase_d sowie die relativen und speichert das jeweils in einem df mean_phase_d_abs und mean_phase_d_proz.\r\n\r\n\r\nmean_phase_d_abs <- mean_phase_d %>% dplyr::select(-c(Total, Proz_IN, Proz_OUT))\r\n\r\n\r\n\r\ntransformiert beide df mittels pivot_longer() von wide zu long:\r\n\r\n\r\nmean_phase_d_abs <- pivot_longer(mean_phase_d_abs, cols = c(\"IN\",\"OUT\"), \r\n             names_to = \"Gruppe\", values_to = \"Durchschnitt\")\r\n\r\n\r\n\r\n4c)\r\nNun visualisieren wie die Verteilung der absoluten und der relativen Zahlen nach Phasen in einem Barplot.\r\nErstellt je einen Plot zu den absoluten und den relativen Zahlen nach den unterstehenden Vorgaben und speichert beide Plots im Environment:\r\n\r\n\r\n\r\nArrangiert beide Plots nebeneinander und exportiert das Ergebnis (Arrangieren siehe 3c).\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_6_Deskriptive_Analysen/Deskriptive_Analysen_files/figure-html5/unnamed-chunk-2-1.png",
    "last_modified": "2021-11-02T15:12:25+01:00",
    "input_file": "Deskriptive_Analysen.knit.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "fallstudien/BE_S_5_Import_Vorverarbeitung_Loesung/",
    "title": "KW 43: Loesung Import und Datenvorverarbeitung",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-10-27",
    "categories": [
      "Biodiversity & Ecosystems (S) Musterloesung"
    ],
    "contents": "\r\n\r\n\r\n\r\nAufgabe 1: Zähldaten\r\n\r\n\r\n#.################################################################################################\r\n# 1. DATENIMPORT #####\r\n#.################################################################################################\r\n\r\n# Beim Daten einlesen koennen sogleich die Datentypen und erste Bereinigungen vorgenommen werden\r\n\r\n# 1.1 Zaehldaten ####\r\n# Die Zaehldaten des Wildnispark wurden vorgaengig bereinigt. z.B. wurden Stundenwerte \r\n# entfernt, an denen am Zaehler Wartungsarbeiten stattgefunden haben.\r\n\r\n# lese die Daten mithilfe der Bibliothek data.table ein (alternative zu read_csv und dergleichen). \r\n# Je nach Bedarf muss der Speicherort sowie der Dateiname angepasst werden\r\ndepo <- fread(\"211_sihlwaldstrasse_2017_2021.csv\")\r\n\r\n# Hinweis zu den Daten:\r\n# In hourly analysis format, the data at 11:00 am corresponds to the counts saved between \r\n# 11:00 am and 12:00 am.\r\n\r\n# Anpassen der Datentypen und erstes Sichten\r\nstr(depo)\r\n\r\ndepo <- depo %>%\r\n  mutate(Datum_Uhrzeit = as.character(DatumUhrzeit)) %>%\r\n  separate(Datum_Uhrzeit, into = c(\"Datum\", \"Zeit\"), sep = \" \")%>%\r\n  mutate(Datum = as.Date(Datum, format = \"%d.%m.%Y\")) %>% \r\n  # Schneide das df auf den gewuenschten Zeitraum zu\r\n  filter(Datum >= depo_start, Datum <=  depo_end) # das Komma hat die gleiche Funktion wie ein &\r\n\r\n# In dieser Auswertung werden nur Velos betrachtet!\r\ndepo <- depo[,-c(1,4,5), drop=FALSE] # mit diesem Befehl lassen wir Spalten \"fallen\", \r\n                                     # aendern aber nichts an der Form des data.frames\r\n\r\n# Berechnen des Totals, da dieses in den Daten nicht vorhanden ist\r\ndepo <- depo%>%\r\n  mutate(Total = Fuss_IN + Fuss_OUT)\r\n\r\n# Entferne die NA's in dem df.\r\ndepo <- na.omit(depo)\r\n\r\n\r\n\r\nAufgabe 2: Meteodaten\r\n\r\n\r\n# 1.2 Meteodaten ####\r\n# Einlesen\r\nmeteo <- fread(\"order_97149_data.txt\")\r\n\r\n# Datentypen setzen\r\n# Das Datum wird als Integer erkannt. Zuerst muss es in Text umgewaldelt werden aus dem dann\r\n# das eigentliche Datum herausgelesen werden kann\r\nmeteo <- transform(meteo, time = as.Date(as.character(time), \"%Y%m%d\"))\r\n\r\n# Die eigentlichen Messwerte sind alle nummerisch\r\nmeteo <- meteo%>%\r\n  mutate(tre200jx = as.numeric(tre200jx))%>%\r\n  mutate(rre150j0 = as.numeric(rre150j0))%>%\r\n  mutate(sremaxdv = as.numeric(sremaxdv)) %>% \r\n  filter(time >= depo_start, time <=  depo_end) # schneide dann auf Untersuchungsdauer\r\n\r\n# Was ist eigentlich Niederschlag:\r\n# https://www.meteoschweiz.admin.ch/home/wetter/wetterbegriffe/niederschlag.html\r\n\r\n# Filtere Werte mit NA\r\nmeteo <- meteo %>%\r\n  filter(!is.na(stn)) %>%\r\n  filter(!is.na(time))%>%\r\n  filter(!is.na(tre200jx))%>%\r\n  filter(!is.na(rre150j0))%>%\r\n  filter(!is.na(sremaxdv))\r\n# Pruefe ob alles funktioniert hat\r\nstr(meteo)\r\nsum(is.na(meteo)) # zeigt die Anzahl NA's im data.frame an\r\n\r\n\r\n\r\nAufgabe 3: Datenvorverarbeitung (Mutationen)\r\n\r\n\r\n#.################################################################################################\r\n# 2. VORBEREITUNG DER DATEN #####\r\n#.################################################################################################\r\n\r\n# 2.1 Convinience Variablen ####\r\n# fuege dem Dataframe (df) die Wochentage hinzu\r\ndepo <- depo %>% \r\n  mutate(Wochentag = weekdays(Datum)) %>% \r\n  # R sortiert die Levels aplhabetisch. Da das in unserem Fall aber sehr unpraktisch ist,\r\n  # muessen die Levels manuell manuell bestimmt werden\r\n  mutate(Wochentag = base::factor(Wochentag, \r\n                            levels = c(\"Montag\", \"Dienstag\", \"Mittwoch\", \r\n                                       \"Donnerstag\", \"Freitag\", \"Samstag\", \"Sonntag\"))) %>% \r\n  # Werktag oder Wochenende hinzufuegen\r\n  mutate(Wochenende = if_else(Wochentag == \"Montag\" | Wochentag == \"Dienstag\" | \r\n                           Wochentag == \"Mittwoch\" | Wochentag == \"Donnerstag\" | \r\n                           Wochentag == \"Freitag\", \"Werktag\", \"Wochenende\"))%>%\r\n  #Kalenderwoche hinzufuegen\r\n  mutate(KW= week(Datum))%>%\r\n  # monat und Jahr\r\n  mutate(Monat = month(Datum)) %>% \r\n  mutate(Jahr = year(Datum))\r\n\r\n# Lockdown \r\n# Hinweis: ich mache das nachgelagert, da ich die Erfahrung hatte, dass zu viele \r\n# Operationen in einem Schritt auch schon mal durcheinander erzeugen koennen.\r\n# Hinweis II: Wir packen alle Phasen (normal, die beiden Lockdowns und Covid aber ohne Lockdown)\r\n# in eine Spalte --> long ist schoener als wide\r\ndepo <- depo %>%\r\nmutate(Phase = if_else(Datum >= lock_1_start_2020 & Datum <= lock_1_end_2020,\r\n                          \"Lockdown_1\",\r\n                       if_else(Datum >= lock_2_start_2021 & Datum <= lock_2_end_2021,\r\n                               \"Lockdown_2\",\r\n                               if_else(Datum < lock_1_start_2020,\r\n                                  \"Normal\", \"Covid\"))))\r\n\r\n# hat das gepklappt?!\r\nunique(depo$Phase)\r\n\r\n# aendere die Datentypen\r\ndepo <- depo %>% \r\n  mutate(Wochenende = as.factor(Wochenende)) %>% \r\n  mutate(KW = factor(KW)) %>% \r\n  # mit factor() koennen die levels direkt einfach selbst definiert werden.\r\n  # wichtig: speizfizieren, dass aus R base, ansonsten kommt es zu einem \r\n  # mix-up mit anderen packages\r\n  mutate(Phase = base::factor(Phase, levels = c(\"Normal\", \"Lockdown_1\", \"Lockdown_2\", \"Covid\")))\r\n\r\nstr(depo)\r\n  \r\n# Fuer einige Auswertungen muss auf die Stunden als nummerischer Wert zurueckgegriffen werden\r\ndepo$Stunde <- as.numeric(format(as.POSIXct(depo$Zeit,format=\"%H:%M\"),\"%H\"))\r\n\r\n# Die Daten wurden kalibriert. Wir runden sie fuer unserer Analysen auf Ganzzahlen\r\ndepo$Total <- round(depo$Total, digits = 0)\r\ndepo$Fuss_IN <- round(depo$Fuss_IN, digits = 0)\r\ndepo$Fuss_OUT <- round(depo$Fuss_OUT, digits = 0)\r\n\r\n\r\n\r\nAufgabe 4: Aggregierung der Stundendaten\r\n\r\n\r\n# 2.3 Aggregierung der Stundendaten zu ganzen Tagen ####\r\n# Zur Berechnung von Kennwerten ist es hilfreich, wenn neben den Stundendaten auch auf Ganztagesdaten\r\n# zurueckgegriffen werden kann\r\n# hier werden also pro Nutzergruppe und Richtung die Stundenwerte pro Tag aufsummiert\r\ndepo_d <- depo %>% \r\n  group_by(Datum, Wochentag, Wochenende, KW, Monat, Jahr, Phase) %>% \r\n  summarise(Total = sum(Fuss_IN + Fuss_OUT), \r\n            Fuss_IN = sum(Fuss_IN),\r\n            Fuss_OUT = sum(Fuss_OUT)) \r\n# Wenn man die Convinience Variablen als grouping variable einspeisst, dann werden sie in \r\n# das neue df uebernommen und muessen nicht nochmals hinzugefuegt werden\r\n\r\n# pruefe das df\r\nhead(depo_d)\r\n\r\n# Gruppiere die Werte nach Monat\r\ndepo_m <- depo %>% \r\n  group_by(Jahr, Monat) %>% \r\n  summarise(Total = sum(Total)) \r\n# sortiere das df aufsteigend (nur das es sicher stimmt)\r\ndepo_m <- as.data.frame(depo_m)\r\ndepo_m[\r\n  with(depo_m, order(Jahr, Monat)),]\r\n# mache dann aus Jahr und Monat faktoren\r\ndepo_m <- depo_m %>% \r\n  mutate(Jahr = as.factor(Jahr)) %>% \r\n  mutate(Monat = as.factor(Monat)) %>% \r\n  mutate(Ym = paste(Jahr, Monat)) %>% # und mache eine neue Spalte, in der Jahr und\r\n  mutate(Ym= factor(Ym, levels=unique(Ym))) # Monat in zusammen sind\r\n\r\n# Beispiele pruefen der Daten:\r\n\r\n# Verteilung mittels Histogram pruefen\r\nhist(depo$Total[!depo$Total==0] , breaks = 100) \r\n\r\n\r\n\r\n# hier schliesse ich die Nuller aus der Visualisierung aus\r\n\r\n# Verteilung mittels Scatterplot pruefen\r\nplot(x=depo$Datum, y=depo$Total)\r\n\r\n\r\n\r\n# Temperaturmaximum\r\nggplot(data=meteo, mapping=aes(x=time, y=tre200jx))+\r\n  geom_point()+\r\n  geom_smooth(col=\"red\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_5_Import_Vorverarbeitung_Loesung/Musterloesung_Import_Vorverarbeitung_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2021-11-01T08:28:05+01:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "fallstudien/BE_S_5_Import_Vorverabeitung/",
    "title": "KW 43: Aufgabe Import und Datenvorverarbeitung",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-10-26",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nAufgabe 1: Zähldaten\r\nDie Projektstruktur steht. Nun können die Daten eingelesen und die nötigen Datentypen definiert werden. Das tidyverse-Universum (u.a. pipes, ggplot usw.) ist in unseren Auswertungen zentral.\r\n\r\n\r\n\r\nDie Zähldaten des Wildnispark Zürich wurden vorgängig bereinigt (z.B. wurden Stundenwerte entfernt, an denen am Zähler Wartungsarbeiten stattgefunden haben). Das macht es für uns einfach, denn wir können die Daten ohne vorgängige Bereinigung einlesen. Behaltet aber im Hinterkopf, dass die Datenaufbereitung, die Datenbereinigung mit viel Aufwand verbunden ist.\r\nLest die Zählaten ein, speichert ihn unter der Variable depo und sichtet den Datensatz (z.B. str(), head(), view() usw.).\r\n\r\n\r\ndepo <- read_csv(\"./HIER RELATIVEN DATEIPFAD EINGEBEN\") \r\n# Speicherort sowie Dateiname anpassen\r\n\r\n\r\n\r\nHinweis: Im Stundenformat zeigen die Werte bei 11:00 die Zähldaten zwischen 11:00 bis 12:00 Uhr.\r\n1a)\r\nIm Datensatz des Wildnisparks sind Datum und Uhrzeit in einer Spalte. Diese müssen getrennt werden (Ich schlage hier den Ansatz des piping ( %>% ) vor. Damit können in einem “Rutsch” mehrere Operationen ausgeführt werden).\r\nEbenfalls muss das Datum als solches definiert werden. Welches Format hat es (im Code: format = “HIER DATUMSFORMAT”)?\r\nSchliesslich schneiden wir den Datensatz auf die Untersuchungsdauer zu.\r\n\r\n\r\nstr(depo)\r\n\r\ndepo <- depo %>%\r\n  mutate(Datum_Uhrzeit = as.character(DatumUhrzeit)) %>%\r\n  separate(Datum_Uhrzeit, into = c(\"Datum\", \"Zeit\"), sep = \" \")%>% # mit seperate() trennt man\r\n                                                                   # 1 Spalte in 2.\r\n  mutate(Datum = as.Date(Datum, format = \"HIER DATUMSFORMAT\")) %>% # hier wird Text zum Datum\r\n  # Schneide das df auf den gewünschten Zeitraum zu\r\n  filter(Datum >= depo_start, Datum <=  depo_end) # das Komma hat die gleiche Funktion wie ein &\r\n\r\n\r\n\r\n1b)\r\nIhr könnt selbst wählen, ob ihr Fussgänger:innen oder Velos untersuchen wollt (je nachdem ob sie in eurem Datensatz vorhanden sind).\r\nEntfernt die überflüssigen Spalten aus dem Datensatz.\r\n1c)\r\nBerechnen des Totals (IN + OUT), da dieses in den Daten nicht vorhanden ist (wiederum mit piping).\r\nTipp: Wenn man R sagt: “addiere mir Spalte x mit Spalte y”, dann macht R das für alle Zeilen in diesen zwei Spalten. Wenn man nun noch sagt: “speichere mir das Ergebnis dieser Addition in einer neuen Spalte namens Total”, dann hat man die Aufgabe bereits gelöst. Arbeitet mit mutate()).\r\nEntfernt nun alle NA-Werte mit na.omit().\r\nAufgabe 2: Meteodaten\r\n2a)\r\nLest die Meteodaten ein und speichert sie unter meteo.\r\n2b)\r\nAuch hier müssen die Datentypen manuell gesetzt werden.\r\nTipp: Das Datum wird als Integer erkannt. Zuerst muss es in Text umgewandelt werden aus dem dann das eigentliche Datum herausgelesen werden kann. Das ist mühsam - darum hier der Code.\r\n\r\n\r\nmeteo <- transform(meteo, time = as.Date(as.character(time), \"%Y%m%d\"))\r\n\r\n\r\n\r\nHinweis Was ist eigentlich Niederschlag:\r\nhttps://www.meteoschweiz.admin.ch/home/wetter/wetterbegriffe/niederschlag.html\r\nWerden den anderen Spalten die richtigen Typen zugewiesen? Falls nicht, ändert die Datentypen.\r\nNun schneiden wir den Datensatz auf die Untersuchungsdauer zu.\r\n2c)\r\nJetzt müssen auch hier alle nicht verfügbare Werte (NA’s) herausgefiltert werden.\r\nTipp: Entweder geht das mit na.omit() für alle Spalten oder, etwas konservativer, können mit filter() die zu filternden Spalten definiert werden. Mit folgendem Codeblock können z.B. alle Werte gefiltert werden, die in der Spalte stn nicht gleich NA sind (es werden also die Werte behalten, die vorhanden sind). Der Code muss für die anderen relevanten Spalten noch ergänzt werden.\r\n\r\n\r\nmeteo <- meteo %>%\r\n  filter(!is.na(stn))%>%\r\n  ...%>%\r\n  ...\r\n\r\n\r\n\r\nHinweis: … steht im Code für folgende oder vorhergehende Zeilen im Code (in einer Pipe)\r\nPrüft nun, wie die Struktur des data.frame (df) aussieht und ob alle NA Werte entfernt wurden (sum(is.na(df$Variable))). Stimmen alle Datentypen?\r\nAufgabe 3: Datenvorverarbeitung (Mutationen)\r\n3a)\r\nJetzt fügen wir viele Convinience Variabeln hinzu. Wir brauchen:\r\nWochentag; der Befehl dazu ist weekdays()\r\nTipp: R sortiert die Levels alphabetisch. Da das in unserem Fall aber sehr unpraktisch ist, müssen die Levels manuell bestimmt werden\r\n\r\n\r\n  ...\r\n  mutate(Wochentag = base::factor(Wochentag, \r\n                            levels = c(\"Montag\", \"Dienstag\", \"Mittwoch\", \r\n                                       \"Donnerstag\", \"Freitag\", \"Samstag\", \"Sonntag\")))\r\n  ...\r\n\r\n\r\n\r\nFrage: Was bedeutet base:: vor den eigentlichen Befehl?\r\nIst es ein Werktag oder Wochenende?\r\n\r\n\r\n  ...\r\n  mutate(Wochenende = if_else(Wochentag == \"Montag\" | Wochentag == \"Dienstag\" | \r\n                           Wochentag == \"Mittwoch\" | Wochentag == \"Donnerstag\" | \r\n                           Wochentag == \"Freitag\", \"Werktag\", \"Wochenende\"))\r\n  ...\r\n\r\n\r\n\r\nFrage: Was bedeuten die | (zu erstellen mit AltGr + 7)? Welches ist das if Argument, welches das else?\r\nKalenderwoche: week()\r\nMonat: month()\r\nJahr: year()\r\nPhase Covid (Code untenstehend)\r\nHinweis I: ich mache den letzten Punkt nachgelagert, da zu viele Operationen in einem Schritt auch schon mal etwas durcheinander erzeugen können. Hinweis II: Wir packen alle Phasen (normal, die beiden Lockdowns und Covid aber ohne Lockdown) in eine Spalte –> long-format ist schöner (und praktischer für das plotten) als wide-format.\r\n\r\n\r\ndepo <- depo %>%\r\nmutate(Phase = if_else(Datum >= lock_1_start_2020 & Datum <= lock_1_end_2020,\r\n                          \"Lockdown_1\",\r\n                       if_else(Datum >= lock_2_start_2021 & Datum <= lock_2_end_2021,\r\n                               \"Lockdown_2\",\r\n                               if_else(Datum < lock_1_start_2020,\r\n                                  \"Normal\", \"Covid\"))))\r\n\r\n# hat das gepklappt?!\r\nunique(depo$Phase)\r\n\r\n\r\n\r\nFrage: Welches ist das if Argument, welches das else?\r\nÄndert die Datentypen der Spalten Wochenende, KW, Phase zu factor.\r\n3b)\r\nNun soll noch die volle Stunde als Integer im Datensatz stehen. Diese Angabe muss etwas mühsam aus den Daten gezogen werden (darum hier der fertige Code dazu):\r\n\r\n\r\ndepo$Stunde <- as.numeric(format(as.POSIXct(depo$Zeit,format=\"%H:%M\"),\"%H\"))\r\n\r\n\r\n\r\n3c)\r\nDie Daten wurden durch den WPZ kalibriert (Kommastellen).\r\nRundet sie auf 0 Nachkommastellen (Ganzzahl; unser Modell kann nicht mit Kommazahlen in der ahbängigen Variable umgehen).\r\nDefiniert sie sicherheitshalber als Integer\r\nMacht das für IN, OUT und Total.\r\n\r\n\r\ndepo$... <- round(..., digits = 0)\r\ndepo$... <- as.integer(...)\r\n\r\n\r\n\r\nAufgabe 4: Aggregierung der Stundendaten\r\n4a)\r\nUnsere Daten liegen im Stundenformat vor. Für einige Auswertungen müssen wir aber auf ganze Tage zurückgreifen können.\r\nDie Stundendaten müssen zu ganzen Tagen aggregiert werden. Macht das wiederum einer Pipe Bezieht folgende Gruppierungen (group_by()) mit ein: Datum, Wochentag, Wochenende, KW, Monat, Jahr, Phase. Summiert die Zählmengen separat (Total, IN, OUT) auf und speichert das Resultat unter depo_d.\r\nTipp: Wenn man die Convinience Variablen als grouping variable einspeisst, dann werden sie in das neue df übernommen und müssen nicht nochmals hinzugefügt werden\r\n\r\ndepo_d <- depo %>% \r\n  group_by(VARIABLE1, VARIABLE2, ...) %>%   # Gruppieren nach den Variablen\r\n  summarise(Total = sum(Fuss_IN + Fuss_OUT),# Berechnen der gewünschten Werte\r\n            Fuss_IN = sum(Fuss_IN),\r\n            ...\r\n\r\n4b)\r\nAggregiere die Stundenwerte nach dem Monat (Gruppierungen Monat, Jahr) und speichert das neue df unter depo_m.\r\nTipp: Braucht wiederum group_by() und summarise(). Nun brauchen wir nur noch das Total, keine Richtungstrennung mehr.\r\nFügt den neu erstellten df eine Spalte mit Jahr + Monat hinzu. Das ist etwas mühsam, darum hier der fertige Code dazu:\r\n\r\n\r\n# vergewissere, dass sicher df\r\ndepo_m <- as.data.frame(depo_m)\r\n# sortiere das df anhand zwei Spalten aufsteigend (damit die Reihenfolge sicher stimmt)\r\ndepo_m[with(depo_m, order(Jahr, Monat)),]\r\n\r\ndepo_m <- depo_m %>% \r\n  mutate(Jahr = as.factor(Jahr)) %>% # mache dann aus Jahr und Monat Faktoren\r\n  mutate(Monat = as.factor(Monat)) %>% \r\n  mutate(Ym = paste(Jahr, Monat)) %>% # und mache eine neue Spalte, in der Jahr und Monat in zusammen sind\r\n  mutate(Ym= factor(Ym, levels=unique(Ym))) # auch dass soll ein Faktor sein, \r\n        # die Levels sind die einzelnen Einträge in der Spalte (welche ja bereits geordnet sind)\r\n\r\n\r\n\r\n4c)\r\nMacht euch mit den Daten vertraut. Plottet sie, seht euch die df’s an, versteht, was sie repräsentieren.\r\nZ.B. sind folgende Befehle und Plots wichtig:\r\nstr()\r\nsummarize()\r\nhead()\r\nScatterplot, x = Datum, y = Anzahl pro Zeiteinheit\r\nHistrogram\r\nusw.\r\n–> Erklärt dem Plenum am 26.10.2021 was ihr gemacht habt, was eure Daten zeigen und präsentiert diese einfachen Plots. \r\nNachdem nun alle Daten vorbereitet sind folgt im nächsten Schritt die Analyse.\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_5_Import_Vorverabeitung/tidyverse.png",
    "last_modified": "2021-11-01T08:28:05+01:00",
    "input_file": {},
    "preview_width": 718,
    "preview_height": 424
  },
  {
    "path": "fallstudien/BE_S_2_Felderhebung/",
    "title": "KW40 + KW42: Aufgabe Felderhebung Grüntal",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-10-25",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nEinführung und Installation\r\nEs gibt eine Vielzahl an möglichen Methoden zur Erfassung der Besucherzahlen. Automatische Zählgeräte bieten die Möglichkeit lange und durchgehende Zeitreihen zu erfassen. Diese müssen aber natürlich auch ausgewertet werden. Hier erhaltet ihr erste Inputs dazu.\r\n\r\n\r\n\r\nZiele\r\nDie Studierenden können das eingesetzte Gerät installieren und kennen die Vor- und Nachteile verschiedener Methoden.\r\nSie können die Daten auslesen und explorativ analysieren.\r\nGrundlagen\r\nDie Geräte werden innerhalb der auf Abbildung 1 gekennzeichneten Standorte platziert. Damit soll überprüft werden, wie stark frequentiert die Waldränder der ökologisch aufgewerteten Seeparzelle sind.\r\n\r\n\r\n\r\nDatenschutz ist ein wichtiges Thema. Die Besuchenden werden über den Zweck der Kameras informiert, die Daten nach der Bearbeitung wieder gelöscht und nicht weitergegeben.\r\n\r\n\r\n\r\nNun geht es ins Feld uns die Geräte werden installiert.\r\nAuswertung\r\nAUFGABE ab dem 12.10.2021\r\nNachdem die Kameras für zwei Wochen im Einsatz standen, werden die Daten ausgelesen, die Sichtungen in Excel festgehalten und die explorativen Analysen durchgeführt.\r\nBereits beim Detektieren der Sichtungen muss einem klar sein, was man auswerten möchte. Nur so können die relevanten Variablen erfasst werden.\r\nIm Rahmen dieser Felderhebung erhaltet ihr von Adrian eine Excel-Vorlage zur Verifizeriung der automatisch detektierten Sichtungen.\r\nVerifiziert kurz, was euch der Algorithmus geliefert hat.\r\nAls nächstes geht es ins R. Da wir für unsere Auswertungen zu wenige Sichtungen haben, verwendet bitte den Datensatz DummyData (ReMe HS21 MSc ENR_/Fallstudie Biodiversity & Ecosystems/S_Daten/Felderhebungen). Eure Verifizierung braucht ihr nicht mehr.\r\nDatenanalyse in R\r\nVorbereitungen\r\nFuer diese Aufgabe benoetigen wir folgende Bibliotheken:\r\n\r\n\r\n# Benoetigte Bibliotheken ####\r\nlibrary(tidyverse) # Data wrangling und piping\r\nlibrary(lubridate) # Arbeiten mit Datumsformaten\r\nlibrary(data.table)# schnelles Dateneinlesen\r\n\r\n\r\n\r\nLese nun zuerst den bereitsgestellen, respektiven den selbst erstellten Datensatz (csv) mithilfe von fread() oder read.csv() ein und nennt ihn cam.\r\nPruefe die Daten. Wurden sie richtig eingelesen? Wie sieht die Struktur der Daten aus?\r\nTipp: Brauch zum pruefen den Befehl str() sowie head().\r\nAufgabe 1: Datentypen\r\nViele Befehle zum Einlesen erkennen die Datentypen automatisch. Bei Faktoren funktioniert das aber nicht (sie sind ja eigentlich einfach Text und R weiss nicht, was wir damit wollen).\r\nAuch das Datum muss vielfach manuell definiert werden (hier muessen wir R sagen, wie das Format dieses aussieht).\r\n\r\n\r\ncam <- cam %>% \r\n  mutate(Datum = as.Date(Datum, format = \"%d.%m.%Y\"))%>%\r\n  mutate(Kamerastandort = factor(Kamerastandort))%>%\r\n  ...\r\n\r\n\r\n\r\nDefiniert nun die restlichen (relevanten) Variablen als Faktor.\r\nAufgabe 2: Datensatz trennen\r\nUnser Datensatz enthaellt die Angeben zu ost und west. Wir wollen die Auswertungen aber pro Standort machen.\r\nTrennt den Datensatz aufgrund des Standorts. Nutzt dazu filter().\r\n\r\n\r\nost <- filter(DATENSATZ, SPALTENNAME == \"Attribut\")\r\nwest <- ...\r\n\r\n\r\n\r\nAufgabe 3: Verteilung pruefen\r\nBei explorativen Analysen macht es immer Sinn sich die Verteilung der Daten anzuschauen. Pruefe daher die Verteilung pro Datensatz mittels Histogram und Scatterplot.\r\nBeim Histogram sollen nur die Menschen angezeigt und die 0er ausgeschlossen werden. Das kann mit folgendem Code erreicht werden:\r\n\r\n\r\nhist(west$Anzahl[west$Art==\"Mensch\" &\r\n                  !west$Anzahl==0], # das \"!\" bedeutet \"nicht gleich\"\r\n     breaks = 10)                   # wie viele Balken brauchen wir im Histogram?\r\n\r\n\r\n\r\nBeim Scatterplot soll auf der x-Achse das Datum stehen, auf der y-Achse die Anzahl der Personen. Auch hier wollen wir keine Wildtiere im Plot.\r\nAufgabe 3: Daten ausschliessen\r\nFuer die weiteren Analysen schliessen wir die Wildtiere komplett aus.\r\nNutzt dazu wiederum den Befehl filter() und ueberschreibt die Datensaetze ost und west.\r\nDennoch wolle wir auch wissen, welche Tiere auf dem Areal (ost und west zusammen, also df cam) unterwegs sind.\r\nDafuer gibts einen separaten Datensatz namens Tiere. Nutzt dazu den Befehl filter().\r\nAufgabe 4: Explorative Analysen\r\nBerechnet zuerst die totale Anzahl Menschen / Standort mit sum(DATENSATZ$SPALTENNAME).\r\nGruppieren und summieren:\r\nBerechnet nun die Anzahl Menschen pro Aktivität und Standort (= Akt_ost und Akt_west).\r\nBerechnet auch die Anzahl Begleittier pro Kategorie und Standort (= Begleittier_ost und Begleittier_west).\r\nUntenstehender Code eigent sich dazu ganz gut:\r\n\r\n\r\nAkt_ost <- ost %>%\r\n  group_by(Aktivitaet)%>%      # Hier sagen wir nach was wir gruppieren \r\n  summarise (n = sum(Anzahl)) %>%      # und dann sagen wir, dass R zusammenfassen soll und zwar die Anzahl\r\n  mutate(freq = n / sum(n))%>% # und dann soll und R das prozentuale Verhaeltniss berechnen\r\n  arrange(desc(n))             # und dann das ganze absteigend sortieren\r\n\r\n\r\n\r\nNun soll noch berechnet werden, wie viele unterschiedliche Wildtiere auf dem ganzen Areal gezaehlt wurden.\r\nRecycelt dazu obenstenenden Code.\r\nAufgabe 5: Visualisieren\r\nVerteilung der Aktivitäten als Pie Chart\r\nZuerst eine Palette mit 5 Farben definieren:\r\n\r\n\r\npal <- hcl.colors(5, palette = \"heat\")\r\n\r\n\r\n\r\nDann als Kreisdiagramm plotten.\r\n\r\n\r\npie(Akt_west$n, labels = c(\"Anderes\", \"Biker\", \"Landwirtschaft\", \"Spaziergaenger\", \"unbestimmbar\"),\r\n    main = \"Prozentuales Verhaeltnis West\",\r\n    col = pal) \r\n\r\n\r\n\r\n\r\nHinweis: Die labels im base R plot müssen manuell definiert werden. ggplot als Alternative macht das selbst.\r\nFRAGE: eignen sich Pie Charts überhaupt für solche Darstellungen? Wie könnten die Aktivitäten auch noch dargestellt werden? Welches sind eure eigenen Ideen zur Visualisierung?\r\nBegleittier als Bar Chart\r\n\r\n\r\n# Begleittier als Bar Chart ####\r\nggplot(Begleit_ost,                      # hier den Datensatz spezifizieren\r\n       mapping=aes(x=Begleittier, y = n))+ # Absolute Anzahl darstellen\r\n  geom_col(width=0.9,position = \"dodge\")+# hier sage ich, dass ich ein Balkendiagramm will\r\n  labs(x=\"Begleittier\", y= \"Anzahl\")+    # Achsenbeschriftung setzen\r\n  theme_classic(base_size = 15)+         # Und zu guter letzt: Stil definieren\r\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) # sowie Achsenbeschr.ausrichten\r\n\r\n\r\n\r\n\r\nUnd schliesslich: Wildtier als Bar Chart Stellt hier auf der y-Achse die Anzahl nicht total sondern relativ (in Prozent) dar.\r\n\r\n\r\n\r\nBei Bedraf koennen die selben Plots fuer den zweiten Standort gemacht werden.\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_2_Felderhebung/gruental.jpg",
    "last_modified": "2021-11-01T08:28:05+01:00",
    "input_file": {}
  },
  {
    "path": "fallstudien/BE_S_3_Aufgabenstellung/",
    "title": "KW 43: Aufgabenstellung Wildnispark",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-10-25",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nAbschlussbericht über die multivariate Analyse\r\nZiele\r\nBisher habt ihr euch mit dem Untersuchungsgebiet beschäftigt und habt selbst ein (kleines) Besuchermonitoring durchgeführt. Das Besuchermonitoring Grüental ist nun abgeschlossen und wir beschäftigen uns voll und ganz mit dem Wildnispark Zürich.\r\nIm Rahmen dessen programmieren wir multivariate Modelle, welche den Zusammenhang zwischen der Anzahl Besuchenden und verschiedenen Einflussfaktoren (Lockdown, Wetter, Ferien, Wochentag, Kalenderwoche) beschreiben. Dank ihnen können wir sagen, wie die Besucher:innen auf die untersuchten Faktoren reagieren (siehe dazu [Einleitung], Ziele).\r\nKonkret sollen folgende Fragestellungen beantwortet werden:\r\n\r\nWelchen Einfluss haben neben den Lockdowns auch die Wetterparameter (Sonnenscheindauer, Tageshöchsttemperatur, Niederschlagssumme) sowie der Wochentag, die Ferien, die Kalenderwoche und das Jahr auf die Besuchszahlen?\r\nDabei interessiert uns besonders, wie stark die jeweiligen Einflüsse sind, welche Effektrichtungen beobachtbar sind und welche der untersuchten Parameter signifikant sind.\r\nKönnen deutliche Unterschiede zwischen den “normalen”, vor-Covid19-Jahren und danach bei Tages-, Wochen-, und / oder Saisongang sowie den wichtigsten, deskriptiven Kennzahlen gefunden werden?\r\n\r\nJede Gruppe wertet ausschliesslich Daten eines Zählers aus. Sprecht miteinander ab, wer welchen Zähler behandelt (204, 211 oder 502; Spezifikationen siehe [Einleitung], Hinweis). Jeder Zähler soll nur von einer Gruppe ausgewertet werden!\r\nFür euren Zähler stehen eventuell Zahlen zu Fussgänger:innen und Velos zur Verfügung (siehe [Einleitung], Hinweis). Entscheidet euch in diesem Fall selbst, ob ihr Fussgänger:innen ODER Velos auswerten wollt. Die anderen Daten dürft ihr vernachlässigen.\r\nIm Bericht sollen die Informationen und Erfahrungen aus dem gesamten Verlauf der Fallstudie in geeigneter Weise einfliessen. Bezüglich der Felderhebung Grüntal erwarten wir keine Angaben.\r\n\r\n\r\n\r\nErwartungen\r\nStruktur / Aufbau\r\nFragestellung (siehe oben; die Fragestellung ist vorgegeben, darf aber natürlich für den Bericht geschärft und optimal formuliert und konkretisiert werden.)\r\nMethoden (kurzes Kapitel mit den statistischen Analysen)\r\nResultate (deskriptive Statistik, multivariates Modell; kurzer Fliesstext sowie die notwendigen Tabellen und eine Auswahl möglichst informativer Grafiken)\r\nDiskussion (Diskussion der deskriptiven Analysen und der Modellergebnisse; dieser Abschnitt sollte die eigenen Resultate auch im Zusammenhang mit aktueller Fachliteratur reflektieren.)\r\nLiteraturverzeichnis (Tipp: Das Literaturverzeichnis sollte vollständig sein, sowie formal korrekt und einheitlich daherkommen. Wir erwarten speziell in der Diskussion eine Abstützung auf aktuelle Fachliteratur. Auf Moodle haben wir Euch eine Auswahl relevanter Papers bereitgestellt.)\r\nAnhang (für alle Auswertungen relevanter R-Code in geeigneter Form)\r\nGesamtumfang max. 7500 Zeichen (inkl. Leerzeichen; exkl. Einleitung, Tabellen, Literaturverzeichnis und Anhang)\r\nAbgabe am 9.1.2022 auf Moodle oder per Mail an hoce@zhaw.ch\r\nBewertungskriterien\r\nIst die Methode klar und verständlich formuliert?\r\nSind die deskriptiven Analysen klar beschrieben und geeignet visualisiert?\r\nIst die Variablenselektion klar beschrieben, plausibel und nachvollziehbar?\r\nSind die Modellresultate in Text- und Tabellenform korrekt beschrieben und geeignet visualisiert?\r\nIst die Diskussion klar formuliert und inhaltlich schlüssig?\r\nWie gut ist die Diskussion auf relevante und aktuelle Fachliteratur abgestützt?\r\nZusätzliche bewerten wir die inhaltliche Dichte der Arbeit und die formale Qualität (Sprache, Struktur, Aufbau, Darstellung, Literaturverzeichnis, Umgang mit Literatur im Text)\r\nZusammensetzung der Fallstudiennote:\r\nFallstudie-Leistungsnachweis 1 - Forschungsplan: 30%\r\nFallstudie-Leistungsnachweis 2 - Multivariate Analyse: 70%\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_3_Aufgabenstellung/Aufbau_Fallstudie_Profil_S.png",
    "last_modified": "2021-11-01T08:28:05+01:00",
    "input_file": {},
    "preview_width": 1429,
    "preview_height": 903
  },
  {
    "path": "fallstudien/BE_S_4_Projektierung/",
    "title": "KW 41: Aufgabe R Projekt vorbereiten",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-10-25",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nArbeiten mit Projekten\r\nVor den eigentlichen Auswertungen muessen einige Vorbereitungen unternommen werden. Die Zeit, die man hier investiert, wird in der späteren Projektphase um ein Mehrfaches eingespart.\r\n\r\n\r\n\r\nIch empfehle generell mit Projekten zu arbeiten, da diese sehr einfach ausgetauscht (auf verschiedene Rechner) und somit auch reproduziert werden können. Wichtig ist, dass es keine absoluten Arbeitspfade sondern nur relative gibt. Der Datenimport (und -export) kann mithilfe dieser relativen Pfade stark vereinfacht werden. –> Kurz gesagt: Projekte helfen alles am richtigen Ort zu behalten (mehr zur Arbeit mit Projekten: https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects).\r\nErstellt an einem passenden Speicherort ein neues Projekt mit einem treffenden Namen:\r\n–> File / New Project\r\nAufgabe 1: Projektaufbau\r\nNutzt für allen Text, welcher nicht im Code integriert ist, das Symbol #. Wenn ihr den Text als Titel definieren wollt, so dass er in der Übersicht erscheint, müssen vor dem Wort # und nach dem Wort #### eingefügt werden.\r\n\r\n\r\n# Texte, vor denen ein # und nach denen #### stehen, sind Titel\r\n# Texte, vor denen ein # steht, erklaeren den Ablauf\r\n# Zeilen ohne vorangehendes # sind Operationen\r\n\r\n# Wenn man rechts neben \"Source\" und links neben \"Environment\" klickt \r\n# (oder CTRL + SHIFT + O --> Show document Outline), \r\n# oeffnet sich die UEbersicht zu den UEberschriften\r\n\r\n\r\n\r\nTipp:\r\nAlt + - = <-\r\nCtrl + Shift + M = %>%\r\nCtrl + Shift + C = # vor der ausgewaehlten Zeile\r\nZuerst immer den Titel des Projekts sowie den Autor/ die Autorin des Skripts nennen. Hier soll auch die Herkunft der Daten ersichtlich sein und falls externe Daten verwendet werden, sollte geklärt werden, wer Dateneigentümer ist (Wildnispark und Meteo Schweiz).\r\nIm Skript soll immer die Ordnerstruktur des Projekts genannt werden. So kann der Arbeitsvorgang auf verschiedenen Rechnern einfach reproduziert werden (ich verwende hier ein Projektornder mit den Unterordnern __skripts, data, results).\r\nBeschreibt zudem folgendes die verwendete Meteodaten (siehe dazu Metadata Meteodaten, –> order_XXX_legend.txt)\r\nEin Skript soll in R eigentlich immer (mehr oder weniger) nach dem selbem Schema aufgebaut sein. Dieses Schema enthällt (nach den bereits erwähnten Definitionen) 4 Kapitel:\r\nMetadaten und Definitionen\r\nDatenimport,\r\nVorbereitung,\r\nDeskriptive Analyse und Visualisierung und\r\nMultifaktorielle Analyse und Visualisierung.\r\nBereitet euer Sktipt mit diesen Kapitel vor.\r\n\r\n\r\n#.###########################################################################################\r\n# Einfluss von COVID19 auf das Naherholungsverhalten in WPZ ####\r\n# Fallstudie Modul Research Methods, HS21. Autor/in ####\r\n#.##########################################################################################\r\n\r\n#.##########################################################################################\r\n# METADATA UND DEFINITIONEN ####\r\n#.##########################################################################################\r\n\r\n# Datenherkunft ####\r\n# ...\r\n\r\n#.##########################################################################################\r\n# 1. DATENIMPORT #####\r\n#.##########################################################################################\r\n\r\n\r\n\r\nAufgabe 2: Laden der Bibliotheken\r\nGeplottet wird mit ggplot, daher wird tidyverse geladen. Diese Bibliothek ergaenzt BASE R in vielerlei Hinsicht uns ist eigentlich fast immer nötig. Da wir es bei Besucherdaten immer mit einem zeitlichen Bezug zu tun haben, benoetigen wir eine passende Bibliothek. Ich arbeite mit lubridate, POSIXct waere natuerlich auch moeglich. Base R bietet verschiedene Funktionen um Daten einzulesen. data.table ergaenzt diese Basisfunktionen sehr gut. ggpubr brauchen wir für das Darstellen von mehreren verschiedenen Plots in nur einem. PerformanceAnalytics, MuMIn, AICcmodavg, fitdistrplus, lme4 und sjPlot werden fuer die spaeteren multivariaten Analysen benoetigt. Die Modellguete werden wir mittels lattice, blmeco und lattice pruefen.\r\nLadet nun also die benoetigten Bibliotheken.\r\nAllenfalls muessen diese zuerst mit install.packages(“NAME”) installiert werden.\r\n\r\n\r\n# Benoetigte Bibliotheken ####\r\nlibrary(tidyverse) # Data wrangling und piping\r\nlibrary(lubridate) # Arbeiten mit Datumsformaten\r\nlibrary(data.table)# schnelles Dateneinlesen\r\nlibrary(ggpubr)    # to arrange multiple plots in one graph\r\nlibrary(PerformanceAnalytics) # Plotte Korrelationsmatrix\r\nlibrary(MuMIn)     # Multi-Model Inference\r\nlibrary(AICcmodavg)# Modellaverageing\r\nlibrary(fitdistrplus)# Prueft die Verteilung in Daten\r\nlibrary(lme4)      # Multivariate Modelle\r\nlibrary(blmeco)    # Bayesian data analysis using linear models\r\nlibrary(sjPlot)    # Plotten von Modellergebnissen (tab_model)\r\nlibrary(lattice)   # einfaches plotten von Zusammenhängen zwischen Variablen\r\n\r\n\r\n\r\nAufgabe 3: Zeitliche Definitionen\r\nDefiniert den zeitlichen Horizont, also Start sowie Ende der Untersuchungen. Bezieht in eure Auswertungen den gesamten verfügbaren Zeitraum ein.\r\nDafür müsst ihr in die Rohdaten eures Zählers schauen. Am einfachsten direkt in der .csv Datei.\r\n\r\n\r\ndepo_start <- as.Date(\"YYYY-MM-DD\")\r\ndepo_end <- ...\r\n\r\n\r\n\r\nWichtiger Teil unserer Auswertungen ist der Einfluss des Lockdown auf das Besuchsverhalten. -Wir müssen also Start und Ende der beiden Lockdowns in der Schweiz definieren:\r\n\r\n\r\nlock_1_start_2020 <- as.Date(\"2020-03-16\")\r\nlock_1_end_2020 <- as.Date(\"2020-05-11\")\r\n\r\nlock_2_start_2021 <- as.Date(\"2020-12-22\")\r\nlock_2_end_2021 <- as.Date(\"2021-03-01\")\r\n\r\n\r\n\r\nEbenfalls müssen die erste und letzte Kalenderwoche der Untersuchungsfrist definiert werden. Diese werden bei wochenweisen Analysen ausgeklammert da sie i.d.R. unvollstaendig sind (das ist ein späterer Arbeitsschritt). Geht wie oben vor. Tipp: der Befehl week() liefert euch die Kalenderwoche.\r\nFerienzeiten können einen grossen Einfluss auf das Besucheraufkommen haben. Die relevanten Ferienzeiträume (in meinem Beispiel ab 2019, je nach dem müsst ihr das anpassen) muüsen daher bekannt sein. Zur Definition der Ferien kann z.B. folgend vorgegangen werden:\r\n\r\n\r\n# (https://www.schulferien.org/schweiz/ferien/2020/)\r\nFruehlingsferien_2019_start <- as.Date(\"2019-04-13\")\r\nFruehlingsferien_2019_ende <- as.Date(\"2019-04-28\")\r\nSommerferien_2019_start <- as.Date(\"2019-07-6\")\r\nSommerferien_2019_ende <- as.Date(\"2019-08-18\")\r\nHerbstferien_2019_start <- as.Date(\"2019-10-05\")\r\nHerbstferien_2019_ende <- as.Date(\"2019-10-20\")\r\nWinterferien_2019_start <- as.Date(\"2019-12-21\")\r\nWinterferien_2019_ende <- as.Date(\"2020-01-02\")\r\n\r\nFruehlingsferien_2020_start <- as.Date(\"2020-04-11\")\r\nFruehlingsferien_2020_ende <- as.Date(\"2020-04-26\")\r\nSommerferien_2020_start <- as.Date(\"2020-07-11\")\r\nSommerferien_2020_ende <- as.Date(\"2020-08-16\")\r\nHerbstferien_2020_start <- as.Date(\"2020-10-03\")\r\nHerbstferien_2020_ende <- as.Date(\"2020-10-18\")\r\nWinterferien_2020_start <- as.Date(\"2020-12-19\")\r\nWinterferien_2020_ende <- as.Date(\"2021-01-03\")\r\n\r\nFruehlingsferien_2021_start <- as.Date(\"2021-04-24\")\r\nFruehlingsferien_2021_ende <- as.Date(\"2021-05-09\")\r\nSommerferien_2021_start <- as.Date(\"2021-07-17\")\r\n\r\n\r\n\r\nNun sind alle Vorbereitungen gemacht, die Projektstruktur aufgebaut und die eigentliche Arbeit kann beginnen.\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_4_Projektierung/the-r-project-for-statistical-computing.png",
    "last_modified": "2021-11-01T08:28:05+01:00",
    "input_file": {},
    "preview_width": 797,
    "preview_height": 298
  },
  {
    "path": "fallstudien/BE_S_2_Felderhebung_Loesung/",
    "title": "KW42: Loesung Felderhebung Grüntal",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-10-18",
    "categories": [
      "Biodiversity & Ecosystems (S) Musterloesung"
    ],
    "contents": "\r\n\r\n\r\n\r\n\r\n\r\n#.###############################################################################################\r\n# Besuchermonitoring Grüntal - Auswertung der Besucherzahlen ####\r\n# Modul Research Methods, HS20. Adrian Hochreutener ####\r\n#.################################################################################################\r\n#.##############################################################################################\r\n# METADATA UND DEFINITIONEN ####\r\n#.################################################################################################\r\n# Ordnerstruktur ####\r\n# Im Ordner in dem das R-Projekt abgelegt ist muessen folgende Unterordner bestehen:\r\n# - Skripts\r\n# - Felderhebungen (Rohdaten hier ablegen)\r\n# - Results\r\n# Benoetigte Bibliotheken ####\r\nlibrary(tidyverse) # Data wrangling und piping\r\nlibrary(lubridate) # Arbeiten mit Datumsformaten\r\nlibrary(data.table)# schnelles Dateneinlesen\r\n\r\n#.###############################################################################################\r\n# 1. DATENIMPORT #####\r\n#.###############################################################################################\r\n\r\n# 1.1 Einlesen ####\r\n# lese die Daten mithilfe von data.table ein. Je nach Bedarf muss der Speicherort sowie der\r\n# Dateiname angepasst werden\r\ncam <- fread(\"DummyData.csv\")\r\n\r\n\r\n\r\n\r\n\r\n#.###############################################################################################\r\n# 2. VORBEREITUNG DER DATEN #####\r\n#.###############################################################################################\r\n\r\n# 2.1 erstes Sichten und anpassen der Datentypen ####\r\nstr(cam)\r\n\r\n\r\nClasses 'data.table' and 'data.frame':  100 obs. of  11 variables:\r\n $ Person_Auswertung: chr  \"Bsp\" \"Bsp\" \"Bsp\" \"Bsp\" ...\r\n $ Kamerastandort   : chr  \"ost\" \"ost\" \"ost\" \"ost\" ...\r\n $ ID_Foto          : chr  \"bsp_001\" \"bsp_002\" \"bsp_003\" \"bsp_004\" ...\r\n $ Datum            : chr  \"08.10.2020\" \"07.10.2020\" \"06.10.2020\" \"09.10.2020\" ...\r\n $ Stunde           : int  3 0 16 24 17 23 14 7 5 23 ...\r\n $ Art              : chr  \"Mensch\" \"Wildtier\" \"Wildtier\" \"Wildtier\" ...\r\n $ Anzahl           : int  3 4 1 6 7 10 2 6 9 6 ...\r\n $ Richtung         : chr  \"Bergauf\" \"Bergauf\" \"Bergauf\" \"Bergab\" ...\r\n $ Aktivitaet       : chr  \"Spaziergaenger\" \"0\" \"0\" \"0\" ...\r\n $ Begleittier      : chr  \"Hund_ohne_Leine\" \"0\" \"0\" \"0\" ...\r\n $ Wildtier         : chr  \"0\" \"Hase\" \"Hase\" \"Hase\" ...\r\n - attr(*, \".internal.selfref\")=<externalptr> \r\n\r\nhead(cam)\r\n\r\n\r\n   Person_Auswertung Kamerastandort ID_Foto      Datum Stunde\r\n1:               Bsp            ost bsp_001 08.10.2020      3\r\n2:               Bsp            ost bsp_002 07.10.2020      0\r\n3:               Bsp            ost bsp_003 06.10.2020     16\r\n4:               Bsp            ost bsp_004 09.10.2020     24\r\n5:               Bsp            ost bsp_005 07.10.2020     17\r\n6:               Bsp            ost bsp_006 12.10.2020     23\r\n        Art Anzahl Richtung     Aktivitaet     Begleittier Wildtier\r\n1:   Mensch      3  Bergauf Spaziergaenger Hund_ohne_Leine        0\r\n2: Wildtier      4  Bergauf              0               0     Hase\r\n3: Wildtier      1  Bergauf              0               0     Hase\r\n4: Wildtier      6   Bergab              0               0     Hase\r\n5: Wildtier      7  Bergauf              0               0    Fuchs\r\n6:   Mensch     10  Bergauf   Unbestimmbar         Anderes        0\r\ncam <- cam %>% \r\n  mutate(Datum = as.Date(Datum, format = \"%d.%m.%Y\"))%>%\r\n  mutate(Kamerastandort = factor(Kamerastandort))%>%\r\n  mutate(Art = factor(Art))%>%\r\n  mutate(Richtung = factor(Richtung))%>%\r\n  mutate(Aktivität = factor(Aktivitaet))%>%\r\n  mutate(Begleittier = factor(Begleittier))%>%\r\n  mutate(Wildtier = factor(Wildtier))\r\n\r\n# Datensatz trennen ####\r\n# Kamera ost und West sind noch in einem Datensatz.\r\n# Wir betrachten jeden Standort einzeln --> trennen aufgrund Name Standort\r\nost <- filter(cam, Kamerastandort == \"ost\")\r\nwest <- filter(cam, Kamerastandort == \"west\")\r\n\r\n# 2.3 Verteilung pruefen ####\r\n# mittels Histogram \r\n# bei explorativen Analysen macht es immer Sinn sich die Verteilung der Daten anzuschauen\r\nhist(ost$Anzahl[ost$Art==\"Mensch\" &# wir sind vorerst nur an den Menschen interessiert\r\n                  !ost$Anzahl==0], # hier schliesse ich die Nuller aus der Visualisierung aus\r\n     breaks = 10) \r\n\r\nhist(west$Anzahl[west$Art==\"Mensch\" &\r\n                  !west$Anzahl==0], \r\n     breaks = 10) \r\n\r\n\r\n\r\n# 2.4 mittels Scatterplot ####\r\nplot(x=ost$Datum[ost$Art==\"Mensch\" &\r\n                   !ost$Anzahl==0], \r\n     y=ost$Anzahl[ost$Art==\"Mensch\" &\r\n                    !ost$Anzahl==0], \r\n     xlab = \"Datum\")\r\n\r\n\r\n\r\nplot(x=west$Datum[west$Art==\"Mensch\" &\r\n                   !west$Anzahl==0], \r\n     y=west$Anzahl[west$Art==\"Mensch\" &\r\n                    !west$Anzahl==0], \r\n     xlab = \"Datum\")\r\n\r\n\r\n\r\n# Filter ####\r\n# fuer die weiteren Analysen schliessen wir die Wildtiere komplett aus\r\nost <- filter(ost, Art == \"Mensch\")\r\nwest <- filter(west, Art == \"Mensch\")\r\n\r\n# Dennoch wolle wir auch wissen, welche Tiere auf dem Areal unterwegs sind\r\n# Dafuer gibts einen separaten Datensatz\r\nTiere <- filter(cam, cam$Art == \"Wildtier\")\r\n\r\n\r\n\r\n\r\n\r\n#.##############################################################################################\r\n# 3. ANALYSE #####\r\n#.###############################################################################################\r\n\r\n# Fuer die Analyse Eigenschaften Datensatz anschauen\r\nsummary(ost)\r\n\r\n\r\n Person_Auswertung  Kamerastandort   ID_Foto         \r\n Length:26          ost :26        Length:26         \r\n Class :character   west: 0        Class :character  \r\n Mode  :character                  Mode  :character  \r\n                                                     \r\n                                                     \r\n                                                     \r\n     Datum                Stunde            Art         Anzahl      \r\n Min.   :2020-10-06   Min.   : 0.00   Mensch  :26   Min.   : 1.000  \r\n 1st Qu.:2020-10-07   1st Qu.: 6.25   Wildtier: 0   1st Qu.: 3.000  \r\n Median :2020-10-08   Median :14.00                 Median : 6.000  \r\n Mean   :2020-10-08   Mean   :13.04                 Mean   : 5.308  \r\n 3rd Qu.:2020-10-10   3rd Qu.:20.75                 3rd Qu.: 6.000  \r\n Max.   :2020-10-12   Max.   :23.00                 Max.   :10.000  \r\n         Richtung   Aktivitaet                 Begleittier\r\n Bergab      : 7   Length:26          0              :8   \r\n Bergauf     :15   Class :character   Anderes        :6   \r\n Unbestimmbar: 4   Mode  :character   Hund_angeleint :9   \r\n                                      Hund_ohne_Leine:3   \r\n                                                          \r\n                                                          \r\n    Wildtier           Aktivität\r\n 0      :26   0             :0  \r\n Anderes: 0   Anderes       :8  \r\n Fuchs  : 0   Biker         :3  \r\n Hase   : 0   Landwirtschaft:3  \r\n Reh    : 0   Spaziergaenger:7  \r\n              Unbestimmbar  :5  \r\n\r\nsummary(west)\r\n\r\n\r\n Person_Auswertung  Kamerastandort   ID_Foto         \r\n Length:28          ost : 0        Length:28         \r\n Class :character   west:28        Class :character  \r\n Mode  :character                  Mode  :character  \r\n                                                     \r\n                                                     \r\n                                                     \r\n     Datum                Stunde            Art         Anzahl     \r\n Min.   :2020-10-06   Min.   : 1.00   Mensch  :28   Min.   :0.000  \r\n 1st Qu.:2020-10-07   1st Qu.: 6.75   Wildtier: 0   1st Qu.:1.750  \r\n Median :2020-10-09   Median :11.00                 Median :3.500  \r\n Mean   :2020-10-09   Mean   :12.07                 Mean   :4.143  \r\n 3rd Qu.:2020-10-11   3rd Qu.:16.75                 3rd Qu.:7.250  \r\n Max.   :2020-10-12   Max.   :24.00                 Max.   :9.000  \r\n         Richtung   Aktivitaet                 Begleittier\r\n Bergab      :11   Length:28          0              :5   \r\n Bergauf     : 8   Class :character   Anderes        :8   \r\n Unbestimmbar: 9   Mode  :character   Hund_angeleint :8   \r\n                                      Hund_ohne_Leine:7   \r\n                                                          \r\n                                                          \r\n    Wildtier           Aktivität\r\n 0      :28   0             :0  \r\n Anderes: 0   Anderes       :5  \r\n Fuchs  : 0   Biker         :8  \r\n Hase   : 0   Landwirtschaft:2  \r\n Reh    : 0   Spaziergaenger:5  \r\n              Unbestimmbar  :8  \r\n# Anzahl Total / standort ####\r\nAnzahl_Ost <- sum(ost$Anzahl)\r\nAnzahl_West <- sum(west$Anzahl)\r\n\r\n# Meiste Aktivitaet ####\r\nAkt_ost <- ost %>%\r\n  group_by(Aktivität)%>%       # Hier sagen wir nach was wir gruppieren \r\n  summarise (n = sum(Anzahl)) %>%      # und dann sagen wir, dass R zusammenfassen soll und zwar die Anzahl\r\n  mutate(freq = n / sum(n))%>% # und dann soll und R das prozentuale Verhaeltniss berechnen\r\n  arrange(desc(n))             # und dann das ganze absteigend sortieren\r\n\r\n# das ganze wiederholen wir fuer den zweiten Standort\r\n# Jetzt kommt die grosse Staerke von R. \r\n# Wir haben den Code zur Berechnung der Anzahl pro Gruppe bereits geschrieben.\r\n# fuer die folgenden Auswertungen koennen wir ihn einfach \"recyceln\"\r\n Akt_west<- west %>%\r\n  group_by(Aktivität)%>%\r\n  summarise (n = sum(Anzahl)) %>%\r\n  mutate(freq = n / sum(n))%>%\r\n  arrange(desc(n))\r\n\r\nAktivitaet_West <- west %>%\r\n  group_by(Aktivität)%>%\r\n  summarise (n = sum(Anzahl)) %>%\r\n  mutate(freq = n / sum(n))%>%\r\n  arrange(desc(n))\r\n\r\n# Begleittier\r\nBegleit_ost <- ost %>%\r\n  group_by(Begleittier)%>%\r\n  summarise (n = sum(Anzahl)) %>%\r\n  mutate(freq = n / sum(n))%>%\r\n  arrange(desc(n))\r\n# uns interessiert es nicht, wie viele Leute kein Begleittier dabei hatten\r\nBegleit_ost <- filter(Begleit_ost, !Begleittier == \"0\")\r\n\r\nBegleit_west <- west %>%\r\n  group_by(Begleittier)%>%\r\n  summarise (n = sum(Anzahl)) %>%\r\n  mutate(freq = n / sum(n))%>%\r\n  arrange(desc(n))\r\n\r\nBegleit_west <- filter(Begleit_west, !Begleittier == \"0\")\r\n\r\n# Wildtier\r\nWildtier <- Tiere %>%\r\n  group_by(Wildtier)%>%\r\n  summarise (n = sum(Anzahl)) %>%\r\n  mutate(freq = n / sum(n))%>%\r\n  arrange(desc(n))\r\n\r\n\r\n\r\n#.###############################################################################################\r\n# 4. VISUALISIERUNG #####\r\n#.###############################################################################################\r\n\r\n# Verteilung der Aktivitaeten als Pie Chart ####\r\n# Zuerst eine Palette mit 5 Farben definieren\r\npal <- hcl.colors(5, palette = \"heat\")\r\n# Dann als Kreisdiagramm plotten\r\npie(Akt_west$n, labels = c(\"Anderes\", \"Biker\", \"Landwirtschaft\", \"Spaziergaenger\", \"unbestimmbar\"),\r\n    main = \"Prozentuales Verhaeltnis West\",\r\n    col = pal) \r\n\r\n\r\n\r\n# Begleittier als Bar Chart ####\r\nggplot(Begleit_ost,                      # hier den Datensatz spezifizieren\r\n       mapping=aes(x=Begleittier, y = n))+ # Absolute Anzahl darstellen\r\n  geom_col(width=0.9,position = \"dodge\")+# hier sage ich, dass ich ein Balkendiagramm will\r\n  labs(x=\"Begleittier\", y= \"Anzahl\")+    # Achsenbeschriftung setzen\r\n  theme_classic(base_size = 15)+         # Und zu guter letzt: Stil definieren\r\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) # sowie Achsenbeschr.ausrichten\r\n\r\n\r\n\r\n# Wildtier als Bar Chart ####\r\nggplot(Wildtier, mapping=aes(x=Wildtier, y=freq*100))+ # kann auch prozentual dargestellt werden\r\n  geom_col(width=0.9,position = \"dodge\")+\r\n  labs(x=\"Begleittier\", y= \"Prozent [%]\")+\r\n  theme_classic(base_size = 15)+\r\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))\r\n\r\n\r\n\r\n# Bei Bedraf koennen die selben Plots fuer den zweiten Standort gemacht werden.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_2_Felderhebung_Loesung/Musterloesung_Felderhebung_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2021-10-25T06:40:09+02:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "fallstudien/BE_N_0_Vorbemerkung/",
    "title": "Vorbemerkung Fallstudie WPZ - Profil N",
    "description": {},
    "author": [
      {
        "name": "Beni Sigrist",
        "url": {}
      }
    ],
    "date": "2021-10-11",
    "categories": [
      "Biodiversity & Ecosystems (N)"
    ],
    "contents": "\r\nAktuell dient diese Plattform für die BiEc Fallstudie - Profil N einzig der Bereitstellung von Aufgaben die von euch im Rahmen dieses Fallstudienprojekts erarbeitet werden sollen. Die Aufgaben werden in den meisten Fällen mit Code-Beispielen erläutert oder benötigten Code-snippets resp. Funktionen werden mitgeliefert. Im Laufe des Semesters werden hier ausserdem häppchenweise (mögliche) Lösungen zu den Aufgaben aufgeschaltet. Alles grundlegende Material und alle Unterlagen zu den theoretischen Inputs sind weiterhin und ausschliesslich im Moodlekurs Research Methods - Fallstudie BiEc zu finden. Die für die Aufgaben benötigten Datengrundlagen sind ebenfalls im entsprechenden Abschnitt auf Moodle zu finden. Frohes Schaffen!\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_N_0_Vorbemerkung/Reh_graf.jpg",
    "last_modified": "2021-10-11T09:47:54+02:00",
    "input_file": {}
  },
  {
    "path": "fallstudien/BE_S_1_Einleitung/",
    "title": "KW40: Einführung",
    "description": {},
    "author": [
      {
        "name": "Adrian Hochreutener",
        "url": {}
      }
    ],
    "date": "2021-09-27",
    "categories": [
      "Biodiversity & Ecosystems (S)"
    ],
    "contents": "\r\nEinleitung\r\nHintergrund\r\nDas rund 1100 ha grosse Naturschutzgebiet Wildnispark Zürich Sihlwald, welches im periurbanen Raum südlich von Zürich liegt, gilt seit dem 1. Januar 2010 als erster national anerkannter Naturerlebnispark. Er ist Teil des Wildnisparks Zürich. Seine Rolle als Naherholungsgebiet für die Stadt Zürich ist von grosser Bedeutung.\r\nIm Perimeter gelten verschiedene Regeln. So darf z. B. nur auf bestimmten Wegen mit den Velo gefahren und Hunde müssen an der Leine geführt werden. Damit soll im Schutzgebiet die Balance zwischen Schutz und Nutzen bewahrt werden, denn einerseits sollen die Besuchenden den Wald erleben dürfen, andererseits soll sich dieser, in der Kernzone, frei entwicklen dürfen.\r\n\r\n\r\n\r\nDamit diese Balance erreicht werden kann, muss das Management auf solide, empirisch erhobene Daten zur Natur und zu den Besuchenden zurückgreifen können. Das Besuchermonitoring deckt den zweiten Teil dieser notwendigen Daten ab.\r\nIm Wildnispark Zürich sind dazu mehrere automatische Zählstellen in Betrieb. Die Zählstellen erfassen stundenweise Besuchende. Einige Zählstellen erfassen richtungsgetrennt und / oder können zwischen verschiedenen Nutzergruppen wie Personen, die zu Fuss gehen, und Velofahrenden unterscheiden.\r\nIm Rahmen des Moduls Research Methods werden in der Fallstudie Profil S mehrere dieser automatischen Zählstellen genauer untersucht. Die Daten, welche im Besitz des WPZ sind, wurden bereits kalibriert. Das heisst, Zählungen während Wartungsarbeiten, bei Felhbetrieb o.ä. wurden bereits ausgeschlossen. Dies ist eine Zeitintensive Arbeit und wir dürfen hier mit einem wahren, sauber aufbereiteten “Datenschatz” arbeiten.\r\nPerimeter des Wildnispark Zürichs mit den ungefähren Standorten von drei ausgewählten automatischen Zählstellen.\r\n\r\n\r\n\r\n\r\nHinweis:\r\nDie Zähler 211 und 502 erfassen sowohl Fussgänger:innen als auch Fahrräder. Die Erfassung erfolgt Richtungsgetrennt.\r\nDer Zähler 204 kann nicht zwischen Nutzungsarten unterscheiden; er erfasst alle Passagen auf den Hochwachtturm als Fussgänger:innen. Der Sensror hat keine Richtungserkennung und die Besuchenden werden jeweils 2x gezählt, einmal beim Aufstieg und einmal beim Abstieg. Das ist im Kalibrierunsgfaktor berücksichtigt, die Kalibrierte Zahl gibt also die Anzahl der Turmbesuche an.\r\nDer Wildnispark wertet die Zahlen auf verschiedene Weise aus. So sind z. B. Jahresgänge (an welchen Monaten herrscht besonders viel Betrieb) und Nutzungszahlen bekannt. Vertiefte Auswertungen, die beispielsweise den Zusammenhang zwischen Besuchszahlen und dem Wetter untersuchen, werden nicht gemacht, da dies die Kapazitäten übersteigen würde.\r\nUnsere Analysen in diesem Modul helfen dem Management, ein besseres Verständnis zum Verhalten der Besuchenden zu erlangen und bilden Grundlagen für Managemententscheide in der Praxis.\r\nZiele\r\nIn dieser Fallstudie zeigen wir, welche Einfluss der Lockdown während der Covid19-Pandemie im Frühjahr 2020 sowie jener im Winter 2020/2021 auf die täglichen Besuchszahlen im Wildnispark Zürich hatte.\r\nErgänzend beschreiben wir den Zusammenhang der Besuchszahlen mit verschiedenen Wetterparametern. Die Hypothese lautet, je mehr Sonnenstunden und je höher die Temperatur, desto mehr Besuchende sind im Untersuchungsgebiet unterwegs; je mehr Niederschlag gemessen wird, desto weniger Besuchende werden gezählt.\r\nDa neben dem Wetter aber auch saisonale Muster, wie z.B. Schulferien, einen grossen Einfluss auf Besuchszahlen haben können, ziehen wir diese und weitere Parameter (Wochentage, Kalenderwoche, Jahr) ebenfalls in die Auswertung ein.\r\nDiese kombinierte, statistisch schliesssende, Betrachtung erlaubt uns Aussagen darüber, ob “nur” aufgrund des schönen Frühlings 2021 mehr Menschen in Wald unterwegs waren, oder ob der Lockdown tatsächlich einen so deutlich positiven Einfluss auf die Besuche hatte.\r\nGrundlagen\r\nZur Verfügung stehen:\r\ndie stündlichen, richtungsgetrennten Zählungen von Fussgänger:innen und Velos an drei Zählstellen\r\nMeteodaten (Temperatur, Sonnenscheindauer, Niederschlagssumme)\r\nR-Skripte mit Hinweisen zur Auswertung\r\n\r\n\r\n\r\n",
    "preview": "fallstudien/BE_S_1_Einleitung/Perimeter.png",
    "last_modified": "2021-10-08T16:23:00+02:00",
    "input_file": {},
    "preview_width": 2001,
    "preview_height": 1051
  }
]
